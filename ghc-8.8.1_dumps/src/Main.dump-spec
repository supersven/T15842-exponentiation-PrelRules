
==================== Specialise ====================
2019-11-05 16:48:07.747131978 UTC

Result size of Specialise
  = {terms: 606, types: 556, coercions: 84, joins: 4/27}

Rec {
-- RHS size: {terms: 18, types: 15, coercions: 4, joins: 1/1}
$dNFData_s8bC :: NFData String
[LclId]
$dNFData_s8bC
  = (\ (eta_a801 :: [Char]) ->
       joinrec {
         go_s8bp [Occ=LoopBreaker] :: [Char] -> ()
         [LclId[JoinId(1)], Arity=1]
         go_s8bp (ds_a803 :: [Char])
           = case ds_a803 of {
               [] -> ghc-prim-0.5.3:GHC.Tuple.();
               : x_a807 xs_a808 ->
                 case case x_a807 of { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW ->
                      ghc-prim-0.5.3:GHC.Tuple.()
                      }
                 of
                 { () ->
                 jump go_s8bp xs_a808
                 }
             }; } in
       jump go_s8bp eta_a801)
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
            :: ([Char] -> ()) ~R# NFData [Char])

-- RHS size: {terms: 5, types: 3, coercions: 3, joins: 0/0}
$dNFData_s8bw :: NFData Double
[LclId]
$dNFData_s8bw
  = (\ (ds_a80j :: Double) ->
       case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
       ghc-prim-0.5.3:GHC.Tuple.()
       })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
            :: (Double -> ()) ~R# NFData Double)

-- RHS size: {terms: 5, types: 2, coercions: 3, joins: 0/0}
$dNFData_s8bs :: NFData Integer
[LclId]
$dNFData_s8bs
  = (\ (ds_a80u :: Integer) ->
       case ds_a80u of { __DEFAULT -> ghc-prim-0.5.3:GHC.Tuple.() })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
            :: (Integer -> ()) ~R# NFData Integer)

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8bO [Occ=OnceL*] :: Num Double
[LclId]
$dNum1_s8bO
  = GHC.Real.$p1Fractional @ Double GHC.Float.$fFractionalDouble

-- RHS size: {terms: 24, types: 17, coercions: 0, joins: 0/4}
$seven_s8cz :: Integer -> Bool
[LclId, Arity=1]
$seven_s8cz
  = let {
      $dReal_s8cH :: Real Integer
      [LclId]
      $dReal_s8cH
        = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger } in
    let {
      $dNum_s8cG :: Num Integer
      [LclId]
      $dNum_s8cG = GHC.Real.$p1Real @ Integer $dReal_s8cH } in
    let {
      $dEq_s8cF [Occ=OnceL] :: Ord Integer
      [LclId]
      $dEq_s8cF = GHC.Real.$p2Real @ Integer $dReal_s8cH } in
    let {
      $dEq1_s8cE [Occ=OnceL] :: Eq Integer
      [LclId]
      $dEq1_s8cE
        = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dEq_s8cF } in
    \ (n_a8cu [Occ=Once] :: Integer) ->
      ==
        @ Integer
        $dEq1_s8cE
        (rem
           @ Integer
           GHC.Real.$fIntegralInteger
           n_a8cu
           (fromInteger @ Integer $dNum_s8cG 2))
        (fromInteger @ Integer $dNum_s8cG 0)

-- RHS size: {terms: 157, types: 83, coercions: 0, joins: 2/14}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId, Arity=2]
$s^_s8bV
  = let {
      $dReal_s8c9 :: Real Integer
      [LclId]
      $dReal_s8c9
        = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger } in
    let {
      $dNum1_s8c8 :: Num Integer
      [LclId]
      $dNum1_s8c8 = GHC.Real.$p1Real @ Integer $dReal_s8c9 } in
    let {
      $dOrd_s8c7 :: Ord Integer
      [LclId]
      $dOrd_s8c7 = GHC.Real.$p2Real @ Integer $dReal_s8c9 } in
    let {
      $dEq_s8c6 [Occ=OnceL] :: Eq Integer
      [LclId]
      $dEq_s8c6
        = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dOrd_s8c7 } in
    \ (x0_a7Tw [Occ=Once] :: Double) (y0_a7Tx :: Integer) ->
      case < @ Integer
             $dOrd_s8c7
             y0_a7Tx
             (fromInteger @ Integer $dNum1_s8c8 0)
      of {
        False ->
          case ==
                 @ Integer $dEq_s8c6 y0_a7Tx (fromInteger @ Integer $dNum1_s8c8 0)
          of {
            False ->
              let {
                $dReal1_s8cj :: Real Integer
                [LclId]
                $dReal1_s8cj
                  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger } in
              let {
                $dNum2_s8ci :: Num Integer
                [LclId]
                $dNum2_s8ci = GHC.Real.$p1Real @ Integer $dReal1_s8cj } in
              let {
                $dEq1_s8ch [Occ=OnceL] :: Ord Integer
                [LclId]
                $dEq1_s8ch = GHC.Real.$p2Real @ Integer $dReal1_s8cj } in
              let {
                $dEq2_s8cg [Occ=OnceL] :: Eq Integer
                [LclId]
                $dEq2_s8cg
                  = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dEq1_s8ch } in
              joinrec {
                f_s8c5 [Occ=LoopBreakerT[2]] :: Double -> Integer -> Double
                [LclId[JoinId(2)], Arity=2]
                f_s8c5 (x_a7TJ :: Double) (y_a7TK :: Integer)
                  = case even @ Integer GHC.Real.$fIntegralInteger y_a7TK of {
                      False ->
                        case ==
                               @ Integer $dEq2_s8cg y_a7TK (fromInteger @ Integer $dNum2_s8ci 1)
                        of {
                          False ->
                            let {
                              $dReal2_s8cn :: Real Integer
                              [LclId]
                              $dReal2_s8cn
                                = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger } in
                            let {
                              $dNum3_s8cm :: Num Integer
                              [LclId]
                              $dNum3_s8cm = GHC.Real.$p1Real @ Integer $dReal2_s8cn } in
                            let {
                              $dEq3_s8cl [Occ=OnceL] :: Ord Integer
                              [LclId]
                              $dEq3_s8cl = GHC.Real.$p2Real @ Integer $dReal2_s8cn } in
                            let {
                              $dEq4_s8ck [Occ=OnceL] :: Eq Integer
                              [LclId]
                              $dEq4_s8ck
                                = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dEq3_s8cl } in
                            joinrec {
                              g1_s8cf [Occ=LoopBreakerT[3]]
                                :: Double -> Integer -> Double -> Double
                              [LclId[JoinId(3)], Arity=3]
                              g1_s8cf (x1_a7TY :: Double)
                                      (y1_a7TZ :: Integer)
                                      (z_a7U0 [Occ=Once*] :: Double)
                                = case even @ Integer GHC.Real.$fIntegralInteger y1_a7TZ of {
                                    False ->
                                      case ==
                                             @ Integer
                                             $dEq4_s8ck
                                             y1_a7TZ
                                             (fromInteger @ Integer $dNum3_s8cm 1)
                                      of {
                                        False ->
                                          jump g1_s8cf
                                            (* @ Double $dNum1_s8bO x1_a7TY x1_a7TY)
                                            (quot
                                               @ Integer
                                               GHC.Real.$fIntegralInteger
                                               y1_a7TZ
                                               (fromInteger @ Integer $dNum3_s8cm 2))
                                            (* @ Double $dNum1_s8bO x1_a7TY z_a7U0);
                                        True -> * @ Double $dNum1_s8bO x1_a7TY z_a7U0
                                      };
                                    True ->
                                      jump g1_s8cf
                                        (* @ Double $dNum1_s8bO x1_a7TY x1_a7TY)
                                        (quot
                                           @ Integer
                                           GHC.Real.$fIntegralInteger
                                           y1_a7TZ
                                           (fromInteger @ Integer $dNum3_s8cm 2))
                                        z_a7U0
                                  }; } in
                            jump g1_s8cf
                              (* @ Double $dNum1_s8bO x_a7TJ x_a7TJ)
                              (quot
                                 @ Integer
                                 GHC.Real.$fIntegralInteger
                                 y_a7TK
                                 (fromInteger @ Integer $dNum2_s8ci 2))
                              x_a7TJ;
                          True -> x_a7TJ
                        };
                      True ->
                        jump f_s8c5
                          (* @ Double $dNum1_s8bO x_a7TJ x_a7TJ)
                          (quot
                             @ Integer
                             GHC.Real.$fIntegralInteger
                             y_a7TK
                             (fromInteger @ Integer $dNum2_s8ci 2))
                    }; } in
              jump f_s8c5 x0_a7Tw y0_a7Tx;
            True -> fromInteger @ Double $dNum1_s8bO 1
          };
        True ->
          errorWithoutStackTrace
            @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
            @ Double
            (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)
      }

-- RHS size: {terms: 34, types: 20, coercions: 0, joins: 0/3}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId, Arity=2]
$s^^_s8bJ
  = let {
      $dReal_s8bR :: Real Integer
      [LclId]
      $dReal_s8bR
        = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger } in
    let {
      $dNum_s8bQ :: Num Integer
      [LclId]
      $dNum_s8bQ = GHC.Real.$p1Real @ Integer $dReal_s8bR } in
    let {
      $dOrd_s8bP [Occ=OnceL] :: Ord Integer
      [LclId]
      $dOrd_s8bP = GHC.Real.$p2Real @ Integer $dReal_s8bR } in
    \ (x_a7Tg [Occ=Once*] :: Double) (n_a7Th :: Integer) ->
      case >=
             @ Integer $dOrd_s8bP n_a7Th (fromInteger @ Integer $dNum_s8bQ 0)
      of {
        False ->
          recip
            @ Double
            GHC.Float.$fFractionalDouble
            (^ @ Double
               @ Integer
               $dNum1_s8bO
               GHC.Real.$fIntegralInteger
               x_a7Tg
               (negate @ Integer $dNum_s8bQ n_a7Th));
        True ->
          ^ @ Double
            @ Integer
            $dNum1_s8bO
            GHC.Real.$fIntegralInteger
            x_a7Tg
            n_a7Th
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Vs
      of
      { (# ipv_a7Vv, ipv1_a7Vw #) ->
      case ((case ($dNFData_s8bC
                   `cast` (Control.DeepSeq.N:NFData[0] <String>_N
                           :: NFData String ~R# (String -> ())))
                    f_a1VF
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Vv
      of
      { (# ipv_X7VW, ipv1_X7VY #) ->
      let {
        duration_s8bF :: Integer
        [LclId]
        duration_s8bF
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              " milli seconds -- "#
                              c_a7X5
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 " pico seconds"# c_a7X5 n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8bF
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8bF 1000000000)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7VW
      }
      }

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Vs
      of
      { (# ipv_a7Vv, ipv1_a7Vw #) ->
      case ((case ($dNFData_s8bw
                   `cast` (Control.DeepSeq.N:NFData[0] <Double>_N
                           :: NFData Double ~R# (Double -> ())))
                    f_a1VF
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Vv
      of
      { (# ipv_X7VW, ipv1_X7VY #) ->
      let {
        duration_s8bz :: Integer
        [LclId]
        duration_s8bz
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              " milli seconds -- "#
                              c_a7X5
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 " pico seconds"# c_a7X5 n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8bz
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8bz 1000000000)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7VW
      }
      }

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Vs
      of
      { (# ipv_a7Vv, ipv1_a7Vw #) ->
      case ((case ($dNFData_s8bs
                   `cast` (Control.DeepSeq.N:NFData[0] <Integer>_N
                           :: NFData Integer ~R# (Integer -> ())))
                    f_a1VF
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Vv
      of
      { (# ipv_X7VW, ipv1_X7VY #) ->
      let {
        duration_s8bv :: Integer
        [LclId]
        duration_s8bv
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              " milli seconds -- "#
                              c_a7X5
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 " pico seconds"# c_a7X5 n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8bv
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8bv 1000000000)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7VW
      }
      }

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 730 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_s8bC :: NFData String).
              measure_s7Y1 @ String $dNFData_s8bC
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_s8bw :: NFData Double).
              measure_s7Y1 @ Double $dNFData_s8bw
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_s8bs :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_s8bs
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Vs
      of
      { (# ipv_a7Vv, ipv1_a7Vw #) ->
      case ((case ($dNFData_a5LK
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                           :: NFData a_a5LI ~R# (a_a5LI -> ())))
                    f_a1VF
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Vv
      of
      { (# ipv_X7VW, ipv1_X7VY #) ->
      let {
        duration_s8br :: Integer
        [LclId]
        duration_s8br
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              " milli seconds -- "#
                              c_a7X5
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 " pico seconds"# c_a7X5 n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8br
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8br 1000000000)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7VW
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (GHC.Base.build
         @ Char
         (\ (@ b_a7WK) ->
            ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7WK "foo"#))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.5.3:GHC.Types.D# 5.0##)
      441

-- RHS size: {terms: 82, types: 97, coercions: 16, joins: 1/1}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case measure_s7Y1
             @ String
             ((\ (eta_a801 :: [Char]) ->
                 joinrec {
                   go_s8bp [Occ=LoopBreaker] :: [Char] -> ()
                   [LclId[JoinId(1)], Arity=1]
                   go_s8bp (ds_a803 :: [Char])
                     = case ds_a803 of {
                         [] -> ghc-prim-0.5.3:GHC.Tuple.();
                         : x_a807 xs_a808 ->
                           case case x_a807 of { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW ->
                                ghc-prim-0.5.3:GHC.Tuple.()
                                }
                           of
                           { () ->
                           jump go_s8bp xs_a808
                           }
                       }; } in
                 jump go_s8bp eta_a801)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "stimes : "#))
             testStimes
             s_a7ZN
      of
      { (# ipv_a7ZQ, ipv1_a7ZR #) ->
      case measure_s7Y1
             @ Double
             ((\ (ds_a80j :: Double) ->
                 case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
                 ghc-prim-0.5.3:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "fractional power 1 : "#))
             testFractionalPower
             ipv_a7ZQ
      of
      { (# ipv_X80i, ipv1_X80k #) ->
      case measure_s7Y1
             @ Double
             ((\ (ds_a80j :: Double) ->
                 case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
                 ghc-prim-0.5.3:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "fractional power 2 : "#))
             testFractionalPower
             ipv_X80i
      of
      { (# ipv_X80n, ipv1_X80p #) ->
      case measure_s7Y1
             @ Double
             ((\ (ds_a80j :: Double) ->
                 case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
                 ghc-prim-0.5.3:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "fractional power 3 : "#))
             testFractionalPower
             ipv_X80n
      of
      { (# ipv_X80s, ipv1_X80u #) ->
      measure_s7Y1
        @ Integer
        ((\ (ds_a80u :: Integer) ->
            case ds_a80u of { __DEFAULT -> ghc-prim-0.5.3:GHC.Tuple.() })
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        (GHC.Base.build
           @ Char
           (\ (@ b_a7WK) ->
              ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                @ b_a7WK "integral power : "#))
        testIntegralPower
        ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== SpecConstr ====================
2019-11-05 16:48:08.228057446 UTC

Result size of SpecConstr
  = {terms: 535, types: 542, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId]
lvl_s8dU = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qK :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qK = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId, Str=x]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qK)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId]
lvl_s8dA = 1

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8cu [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8dC)
                        lvl_s8dU
                 of wild_a8eO [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
                 }}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8dC)
             lvl_s8dU
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8nl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><S,U><L,U>]
$wg1_s8nl
  = \ (ww_s8nc :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8n8 :: Integer)
      (ww_s8ng :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8n8 lvl_s8dC)
             lvl_s8dU
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8n8 lvl_s8dA
          of {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng
          };
        1# ->
          $wg1_s8nl
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
            ww_s8ng
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8nv [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8nv
  = \ (ww_s8nq :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8nn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8nn lvl_s8dC)
             lvl_s8dU
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nn lvl_s8dA
          of {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dC)
                ww_s8nq;
            1# -> ww_s8nq
          };
        1# ->
          $wf_s8nv
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dC)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8nB [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8nB
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8nx lvl_s8dU
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nx lvl_s8dU
          of {
            __DEFAULT ->
              case w_s8nw of { ghc-prim-0.5.3:GHC.Types.D# ww_s8nq ->
              $wf_s8nv ww_s8nq w_s8nx
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8dM of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nw [Occ=Once] :: Double)
                 (w_s8nx [Occ=Once] :: Integer) ->
                 case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
                 }}]
$s^_s8bV
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8nH [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8nH
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8nD lvl_s8dU
      of {
        __DEFAULT ->
          case $w$s^_s8nB
                 w_s8nC (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8nD)
          of ww_s8nA
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8nA
          };
        1# -> $w$s^_s8nB w_s8nC w_s8nD
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nC [Occ=Once] :: Double)
                 (w_s8nD [Occ=Once] :: Integer) ->
                 case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
                 }}]
$s^^_s8bJ
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 [Dmd=<S,H>] xs_a808 [Dmd=<S,U>] ->
          case x_a807 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW [Dmd=<L,A>] ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId]
lvl_s8dX = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qL :: [Char]
[LclId]
lvl_s8qL = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case go_s8cO f_a1VF of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YD, ipv1_X7YF [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bF :: Integer
        [LclId]
        duration_s8bF
          = case ipv1_X7YF of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7YW [Dmd=<L,A>], y_X7YY [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Y8 ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YJ, ipv1_X7YL [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bz :: Integer
        [LclId]
        duration_s8bz
          = case ipv1_X7YL of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Z2 [Dmd=<L,A>], y_X7Z4 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Ye ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YL, ipv1_X7YN [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bv :: Integer
        [LclId]
        duration_s8bv
          = case ipv1_X7YN of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Z4 [Dmd=<L,A>], y_X7Z6 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Yg ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YS, ipv1_X7YU [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8br :: Integer
        [LclId]
        duration_s8br
          = case ipv1_X7YU of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Zb [Dmd=<L,A>], y_X7Zd [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Yn ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7Y1
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qP :: Integer
[LclId]
lvl_s8qP = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qQ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qQ = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qR :: [Char]
[LclId]
lvl_s8qR = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qQ

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8qP
      lvl_s8qR

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qS :: Integer
[LclId]
lvl_s8qS = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8qS lvl_s8qP

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qU :: Double
[LclId]
lvl_s8qU = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qV :: Integer
[LclId]
lvl_s8qV = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8nH lvl_s8qU lvl_s8qV of ww_s8nG { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r4 = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r5 :: [Char]
[LclId]
lvl_s8r5 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r2 = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r3 :: [Char]
[LclId]
lvl_s8r3 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r0 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r0 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r1 :: [Char]
[LclId]
lvl_s8r1 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qY = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qZ :: [Char]
[LclId]
lvl_s8qZ = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qW = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qX :: [Char]
[LclId]
lvl_s8qX = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qW

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD lvl_s8qX testStimes s_a7ZN of
      { (# ipv_a7ZQ, ipv1_a7ZR [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8qZ testFractionalPower ipv_a7ZQ of
      { (# ipv_X80i, ipv1_X80k [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r1 testFractionalPower ipv_X80i of
      { (# ipv_X80n, ipv1_X80p [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r3 testFractionalPower ipv_X80n of
      { (# ipv_X80s, ipv1_X80u [Dmd=<L,A>] #) ->
      $smeasure_s8bt lvl_s8r5 testIntegralPower ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s80z
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8b7
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ

