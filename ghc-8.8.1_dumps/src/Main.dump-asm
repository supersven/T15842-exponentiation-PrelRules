
==================== Asm code ====================
2019-11-05 16:48:08.339241783 UTC

.section .data
.align 8
.align 1
.globl Main.$s^2_closure
.type Main.$s^2_closure, @object
Main.$s^2_closure:
	.quad	GHC.Integer.Type.S#_con_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.339504497 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
lvl_r8vq_bytes:
	.asciz "Negative exponent"


==================== Asm code ====================
2019-11-05 16:48:08.340733555 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	GHC.Err.errorWithoutStackTrace_closure-(Main.$s^1_info)+0
.globl Main.$s^1_info
.type Main.$s^1_info, @function
Main.$s^1_info:
_c8yB:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8yC
_c8yD:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8yy
_c8yx:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movq $block_c8yz_info,-24(%rbp)
	movl $lvl_r8vq_bytes,%r14d
	addq $-24,%rbp
	jmp GHC.CString.unpackCString#_info
_c8yy:
	jmp *(%rbx)
.align 8
	.quad	0
	.long	30
	.long	GHC.Err.errorWithoutStackTrace_closure-(block_c8yz_info)+0
block_c8yz_info:
_c8yz:
	movq %rbx,%r14
	addq $8,%rbp
	jmp GHC.Err.errorWithoutStackTrace_info
_c8yC:
	jmp *-16(%r13)
	.size Main.$s^1_info, .-Main.$s^1_info


==================== Asm code ====================
2019-11-05 16:48:08.340932953 UTC

.section .data
.align 8
.align 1
.globl Main.$s^1_closure
.type Main.$s^1_closure, @object
Main.$s^1_closure:
	.quad	Main.$s^1_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.341233855 UTC

.section .data
.align 8
.align 1
.globl Main.$seven1_closure
.type Main.$seven1_closure, @object
Main.$seven1_closure:
	.quad	GHC.Integer.Type.S#_con_info
	.quad	2


==================== Asm code ====================
2019-11-05 16:48:08.34145553 UTC

.section .data
.align 8
.align 1
lvl1_r8vr_closure:
	.quad	GHC.Integer.Type.S#_con_info
	.quad	1


==================== Asm code ====================
2019-11-05 16:48:08.343629993 UTC

.section .data
.align 8
.align 1
_u8zF_srt:
	.quad	stg_SRT_2_info
	.quad	GHC.Integer.Type.quotInteger_closure
	.quad	GHC.Integer.Type.remInteger_closure
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.343786424 UTC

.section .text
.align 8
$wg1_r8vs_slow:
_c8yP:
	movsd 16(%rbp),%xmm2
	movq 8(%rbp),%r14
	movsd (%rbp),%xmm1
	addq $24,%rbp
	jmp $wg1_r8vs_info
	.size $wg1_r8vs_slow, .-$wg1_r8vs_slow


==================== Asm code ====================
2019-11-05 16:48:08.34459662 UTC

.section .text
.align 8
.align 8
	.long	$wg1_r8vs_slow-($wg1_r8vs_info)+0
	.long	0
	.quad	323
	.quad	12884901888
	.quad	0
	.long	14
	.long	_u8zF_srt-($wg1_r8vs_info)+0
$wg1_r8vs_info:
_c8yV:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jae _c8yQ
_c8yW:
	movl $$wg1_r8vs_closure,%ebx
	movsd %xmm1,-24(%rbp)
	movq %r14,-16(%rbp)
	movsd %xmm2,-8(%rbp)
	addq $-24,%rbp
	jmp *-8(%r13)
.align 8
	.quad	451
	.long	30
	.long	_u8zF_srt-(block_c8zu_info)+0
block_c8zu_info:
_c8zu:
	movsd 8(%rbp),%xmm0
	movsd 24(%rbp),%xmm1
	addq $32,%rbp
	movsd %xmm0,%xmm2
	mulsd %xmm2,%xmm0
_n8zR:
	movsd %xmm1,%xmm2
	movq %rbx,%r14
	movsd %xmm0,%xmm1
_c8yQ:
	movq $block_c8yT_info,-32(%rbp)
	movl $Main.$seven1_closure+1,%esi
	movq %r14,%rax
	movsd %xmm1,-24(%rbp)
	movq %rax,-16(%rbp)
	movsd %xmm2,-8(%rbp)
	addq $-32,%rbp
	jmp GHC.Integer.Type.remInteger_info
.align 8
	.quad	323
	.long	30
	.long	_u8zF_srt-(block_c8yT_info)+0
block_c8yT_info:
_c8yT:
	movq $block_c8z0_info,(%rbp)
	movl $Main.$s^2_closure+1,%esi
	movq %rbx,%r14
	jmp GHC.Integer.Type.eqInteger#_info
.align 8
	.quad	323
	.long	30
	.long	_u8zF_srt-(block_c8z0_info)+0
block_c8z0_info:
_c8z0:
	movq 16(%rbp),%rax
	cmpq $1,%rbx
	je _c8zw
_c8z8:
	movq $block_c8z5_info,(%rbp)
	movl $lvl1_r8vr_closure+1,%esi
	movq %rax,%r14
	jmp GHC.Integer.Type.eqInteger#_info
_c8zw:
	movq $block_c8zu_info,(%rbp)
	movl $Main.$seven1_closure+1,%esi
	movq %rax,%r14
	jmp GHC.Integer.Type.quotInteger_info
.align 8
	.quad	451
	.long	30
	.long	_u8zF_srt-(block_c8zf_info)+0
block_c8zf_info:
_c8zf:
	movsd 8(%rbp),%xmm0
	movsd 24(%rbp),%xmm1
	addq $32,%rbp
	movsd %xmm0,%xmm2
	mulsd %xmm2,%xmm0
_n8zS:
	movsd %xmm1,%xmm2
	movq %rbx,%r14
	movsd %xmm0,%xmm1
	jmp _c8yQ
.align 8
	.quad	323
	.long	30
	.long	_u8zF_srt-(block_c8z5_info)+0
block_c8z5_info:
_c8z5:
	movsd 8(%rbp),%xmm0
	movsd 24(%rbp),%xmm1
	cmpq $1,%rbx
	je _c8zr
_c8zi:
	movq $block_c8zf_info,(%rbp)
	movl $Main.$seven1_closure+1,%esi
	movq 16(%rbp),%r14
	mulsd %xmm1,%xmm0
	movsd %xmm0,24(%rbp)
	jmp GHC.Integer.Type.quotInteger_info
_c8zr:
	movsd %xmm1,%xmm2
	movsd %xmm0,%xmm1
	mulsd %xmm2,%xmm1
	addq $32,%rbp
	jmp *(%rbp)
	.size $wg1_r8vs_info, .-$wg1_r8vs_info


==================== Asm code ====================
2019-11-05 16:48:08.345765121 UTC

.section .data
.align 8
.align 1
$wg1_r8vs_closure:
	.quad	$wg1_r8vs_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.348718543 UTC

.section .data
.align 8
.align 1
_u8AG_srt:
	.quad	stg_SRT_2_info
	.quad	GHC.Integer.Type.quotInteger_closure
	.quad	$wg1_r8vs_closure
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.348819534 UTC

.section .data
.align 8
.align 1
_u8AH_srt:
	.quad	stg_SRT_2_info
	.quad	GHC.Integer.Type.remInteger_closure
	.quad	_u8AG_srt
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.349032544 UTC

.section .text
.align 8
.globl Main.$wf_slow
.type Main.$wf_slow, @function
Main.$wf_slow:
_c8zV:
	movq 8(%rbp),%r14
	movsd (%rbp),%xmm1
	addq $16,%rbp
	jmp Main.$wf_info
	.size Main.$wf_slow, .-Main.$wf_slow


==================== Asm code ====================
2019-11-05 16:48:08.349653385 UTC

.section .text
.align 8
.align 8
	.long	Main.$wf_slow-(Main.$wf_info)+0
	.long	0
	.quad	66
	.quad	8589934592
	.quad	0
	.long	14
	.long	_u8AH_srt-(Main.$wf_info)+0
.globl Main.$wf_info
.type Main.$wf_info, @function
Main.$wf_info:
_c8A1:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jae _c8zW
_c8A2:
	movl $Main.$wf_closure,%ebx
	movsd %xmm1,-16(%rbp)
	movq %r14,-8(%rbp)
	addq $-16,%rbp
	jmp *-8(%r13)
.align 8
	.quad	194
	.long	30
	.long	_u8AH_srt-(block_c8Aw_info)+0
block_c8Aw_info:
_c8Aw:
	movsd 8(%rbp),%xmm0
	addq $24,%rbp
	movsd %xmm0,%xmm1
	mulsd %xmm1,%xmm0
_n8AR:
	movq %rbx,%r14
	movsd %xmm0,%xmm1
_c8zW:
	movq $block_c8zZ_info,-24(%rbp)
	movl $Main.$seven1_closure+1,%esi
	movq %r14,%rax
	movsd %xmm1,-16(%rbp)
	movq %rax,-8(%rbp)
	addq $-24,%rbp
	jmp GHC.Integer.Type.remInteger_info
.align 8
	.quad	66
	.long	30
	.long	_u8AH_srt-(block_c8zZ_info)+0
block_c8zZ_info:
_c8zZ:
	movq $block_c8A6_info,(%rbp)
	movl $Main.$s^2_closure+1,%esi
	movq %rbx,%r14
	jmp GHC.Integer.Type.eqInteger#_info
.align 8
	.quad	66
	.long	30
	.long	_u8AH_srt-(block_c8A6_info)+0
block_c8A6_info:
_c8A6:
	movq 16(%rbp),%rax
	cmpq $1,%rbx
	je _c8Ay
_c8Ae:
	movq $block_c8Ab_info,(%rbp)
	movl $lvl1_r8vr_closure+1,%esi
	movq %rax,%r14
	jmp GHC.Integer.Type.eqInteger#_info
_c8Ay:
	movq $block_c8Aw_info,(%rbp)
	movl $Main.$seven1_closure+1,%esi
	movq %rax,%r14
	jmp GHC.Integer.Type.quotInteger_info
.align 8
	.quad	194
	.long	30
	.long	$wg1_r8vs_closure-(block_c8Ai_info)+0
block_c8Ai_info:
_c8Ai:
	movsd 8(%rbp),%xmm0
	movsd %xmm0,%xmm2
	movq %rbx,%r14
	movsd %xmm0,%xmm1
	mulsd %xmm0,%xmm1
	addq $24,%rbp
	jmp $wg1_r8vs_info
.align 8
	.quad	66
	.long	30
	.long	_u8AG_srt-(block_c8Ab_info)+0
block_c8Ab_info:
_c8Ab:
	cmpq $1,%rbx
	je _c8At
_c8Al:
	movq $block_c8Ai_info,(%rbp)
	movl $Main.$seven1_closure+1,%esi
	movq 16(%rbp),%r14
	jmp GHC.Integer.Type.quotInteger_info
_c8At:
	movsd 8(%rbp),%xmm1
	addq $24,%rbp
	jmp *(%rbp)
	.size Main.$wf_info, .-Main.$wf_info


==================== Asm code ====================
2019-11-05 16:48:08.350066114 UTC

.section .data
.align 8
.align 1
.globl Main.$wf_closure
.type Main.$wf_closure, @object
Main.$wf_closure:
	.quad	Main.$wf_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.351605624 UTC

.section .data
.align 8
.align 1
_u8Bs_srt:
	.quad	stg_SRT_2_info
	.quad	Main.$s^1_closure
	.quad	Main.$wf_closure
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.352036356 UTC

.section .text
.align 8
.align 8
	.quad	8589934607
	.quad	0
	.long	14
	.long	_u8Bs_srt-(Main.$w$s^_info)+0
.globl Main.$w$s^_info
.type Main.$w$s^_info, @function
Main.$w$s^_info:
_c8B2:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8B3
_c8B4:
	movq $block_c8AX_info,-24(%rbp)
	movq %rsi,%rax
	movl $Main.$s^2_closure+1,%esi
	movq %r14,%rbx
	movq %rax,%r14
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	addq $-24,%rbp
	jmp GHC.Integer.Type.ltInteger#_info
_c8B3:
	movl $Main.$w$s^_closure,%ebx
	jmp *-8(%r13)
.align 8
	.quad	2
	.long	30
	.long	_u8Bs_srt-(block_c8AX_info)+0
block_c8AX_info:
_c8AX:
	cmpq $1,%rbx
	je _c8B1
_c8B0:
	movq $block_c8B7_info,(%rbp)
	movl $Main.$s^2_closure+1,%esi
	movq 16(%rbp),%r14
	jmp GHC.Integer.Type.eqInteger#_info
_c8B1:
	movl $Main.$s^1_closure,%ebx
	addq $24,%rbp
	jmp *(%rbx)
.align 8
	.quad	2
	.long	30
	.long	Main.$wf_closure-(block_c8B7_info)+0
block_c8B7_info:
_c8B7:
	cmpq $1,%rbx
	je _c8Bo
_c8Bf:
	movq 8(%rbp),%rax
	movq $block_c8Bc_info,8(%rbp)
	movq %rax,%rbx
	addq $8,%rbp
	testb $7,%bl
	jne _c8Bc
_c8Bg:
	jmp *(%rbx)
.align 8
	.quad	1
	.long	30
	.long	Main.$wf_closure-(block_c8Bc_info)+0
block_c8Bc_info:
_c8Bc:
	movq 8(%rbp),%r14
	movsd 7(%rbx),%xmm1
	addq $16,%rbp
	jmp Main.$wf_info
_c8Bo:
	movsd _n8Bw(%rip),%xmm1
	addq $24,%rbp
	jmp *(%rbp)
	.size Main.$w$s^_info, .-Main.$w$s^_info
.section .rodata
.align 8
.align 8
_n8Bw:
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	240
	.byte	63


==================== Asm code ====================
2019-11-05 16:48:08.35233304 UTC

.section .data
.align 8
.align 1
.globl Main.$w$s^_closure
.type Main.$w$s^_closure, @object
Main.$w$s^_closure:
	.quad	Main.$w$s^_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.353571114 UTC

.section .data
.align 8
.align 1
_u8C2_srt:
	.quad	stg_SRT_2_info
	.quad	GHC.Integer.Type.negateInteger_closure
	.quad	Main.$w$s^_closure
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.353936077 UTC

.section .text
.align 8
.align 8
	.quad	8589934607
	.quad	0
	.long	14
	.long	_u8C2_srt-(Main.$w$s^^_info)+0
.globl Main.$w$s^^_info
.type Main.$w$s^^_info, @function
Main.$w$s^^_info:
_c8BI:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8BJ
_c8BK:
	movq $block_c8BD_info,-24(%rbp)
	movq %rsi,%rax
	movl $Main.$s^2_closure+1,%esi
	movq %r14,%rbx
	movq %rax,%r14
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	addq $-24,%rbp
	jmp GHC.Integer.Type.geInteger#_info
_c8BJ:
	movl $Main.$w$s^^_closure,%ebx
	jmp *-8(%r13)
.align 8
	.quad	2
	.long	30
	.long	_u8C2_srt-(block_c8BD_info)+0
block_c8BD_info:
_c8BD:
	movq 16(%rbp),%rax
	cmpq $1,%rbx
	je _c8BH
_c8BG:
	movq $block_c8BN_info,(%rbp)
	movq %rax,%r14
	jmp GHC.Integer.Type.negateInteger_info
_c8BH:
	movq %rax,%rsi
	movq 8(%rbp),%r14
	addq $24,%rbp
	jmp Main.$w$s^_info
.align 8
	.quad	130
	.long	30
	.long	Main.$w$s^_closure-(block_c8BN_info)+0
block_c8BN_info:
_c8BN:
	movq $block_c8BR_info,16(%rbp)
	movq %rbx,%rsi
	movq 8(%rbp),%r14
	addq $16,%rbp
	jmp Main.$w$s^_info
.align 8
	.quad	0
	.long	30
	.long	0
block_c8BR_info:
_c8BR:
	movsd %xmm1,%xmm0
	movsd _n8C6(%rip),%xmm1
	divsd %xmm0,%xmm1
	addq $8,%rbp
	jmp *(%rbp)
	.size Main.$w$s^^_info, .-Main.$w$s^^_info
.section .rodata
.align 8
.align 8
_n8C6:
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	240
	.byte	63


==================== Asm code ====================
2019-11-05 16:48:08.35420345 UTC

.section .data
.align 8
.align 1
.globl Main.$w$s^^_closure
.type Main.$w$s^^_closure, @object
Main.$w$s^^_closure:
	.quad	Main.$w$s^^_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.355528828 UTC

.section .text
.align 8
.align 8
	.quad	4294967301
	.quad	0
	.long	14
	.long	0
.globl Main.main_go_info
.type Main.main_go_info, @function
Main.main_go_info:
_c8Cl:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jae _c8Cb
_c8Cm:
	movl $Main.main_go_closure,%ebx
	jmp *-8(%r13)
.align 8
	.quad	1
	.long	30
	.long	0
block_c8Ct_info:
_c8Ct:
	movq 8(%rbp),%rax
	addq $16,%rbp
_n8CG:
	movq %rax,%r14
_c8Cb:
	movq $block_c8Ce_info,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _c8Ce
_c8Cf:
	jmp *(%rbx)
.align 8
	.quad	0
	.long	30
	.long	0
block_c8Ce_info:
_c8Ce:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	jne _c8Cj
_c8Ci:
	movl $()_closure+1,%ebx
	addq $8,%rbp
	jmp *(%rbp)
_c8Cj:
	movq $block_c8Ct_info,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	testb $7,%bl
	jne _c8Ct
_c8Cv:
	jmp *(%rbx)
	.size Main.main_go_info, .-Main.main_go_info


==================== Asm code ====================
2019-11-05 16:48:08.355763123 UTC

.section .data
.align 8
.align 1
.globl Main.main_go_closure
.type Main.main_go_closure, @object
Main.main_go_closure:
	.quad	Main.main_go_info


==================== Asm code ====================
2019-11-05 16:48:08.355998172 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl Main.$trModule4_bytes
.type Main.$trModule4_bytes, @object
Main.$trModule4_bytes:
	.asciz "main"


==================== Asm code ====================
2019-11-05 16:48:08.35624746 UTC

.section .data
.align 8
.align 1
.globl Main.$trModule3_closure
.type Main.$trModule3_closure, @object
Main.$trModule3_closure:
	.quad	GHC.Types.TrNameS_con_info
	.quad	Main.$trModule4_bytes


==================== Asm code ====================
2019-11-05 16:48:08.356468217 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl Main.$trModule2_bytes
.type Main.$trModule2_bytes, @object
Main.$trModule2_bytes:
	.asciz "Main"


==================== Asm code ====================
2019-11-05 16:48:08.356726206 UTC

.section .data
.align 8
.align 1
.globl Main.$trModule1_closure
.type Main.$trModule1_closure, @object
Main.$trModule1_closure:
	.quad	GHC.Types.TrNameS_con_info
	.quad	Main.$trModule2_bytes


==================== Asm code ====================
2019-11-05 16:48:08.35699001 UTC

.section .data
.align 8
.align 1
.globl Main.$trModule_closure
.type Main.$trModule_closure, @object
Main.$trModule_closure:
	.quad	GHC.Types.Module_con_info
	.quad	Main.$trModule3_closure+1
	.quad	Main.$trModule1_closure+1
	.quad	3


==================== Asm code ====================
2019-11-05 16:48:08.357221228 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl Main.main6_bytes
.type Main.main6_bytes, @object
Main.main6_bytes:
	.asciz " milli seconds -- "


==================== Asm code ====================
2019-11-05 16:48:08.357440774 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl Main.main5_bytes
.type Main.main5_bytes, @object
Main.main5_bytes:
	.asciz " pico seconds"


==================== Asm code ====================
2019-11-05 16:48:08.357946686 UTC

.section .data
.align 8
.align 1
.globl Main.main7_closure
.type Main.main7_closure, @object
Main.main7_closure:
	.quad	GHC.Integer.Type.S#_con_info
	.quad	1000000000


==================== Asm code ====================
2019-11-05 16:48:08.35892732 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	0
.globl Main.main4_info
.type Main.main4_info, @function
Main.main4_info:
_c8CW:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8CX
_c8CY:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8CV
_c8CU:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $Main.main5_bytes,%r14d
	addq $-16,%rbp
	jmp GHC.CString.unpackCString#_info
_c8CV:
	jmp *(%rbx)
_c8CX:
	jmp *-16(%r13)
	.size Main.main4_info, .-Main.main4_info


==================== Asm code ====================
2019-11-05 16:48:08.359129214 UTC

.section .data
.align 8
.align 1
.globl Main.main4_closure
.type Main.main4_closure, @object
Main.main4_closure:
	.quad	Main.main4_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.366803557 UTC

.section .data
.align 8
.align 1
_u8Ew_srt:
	.quad	stg_SRT_2_info
	.quad	GHC.Show.$w$cshowsPrec4_closure
	.quad	Main.main4_closure
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.366938501 UTC

.section .data
.align 8
.align 1
_u8Ex_srt:
	.quad	stg_SRT_2_info
	.quad	GHC.Integer.Type.divInteger_closure
	.quad	_u8Ew_srt
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.367101027 UTC

.section .data
.align 8
.align 1
_u8Ey_srt:
	.quad	stg_SRT_2_info
	.quad	GHC.Show.showLitString_closure
	.quad	_u8Ex_srt
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.367218889 UTC

.section .data
.align 8
.align 1
_u8Ez_srt:
	.quad	stg_SRT_4_info
	.quad	GHC.Integer.Type.minusInteger_closure
	.quad	GHC.IO.Handle.FD.stdout_closure
	.quad	GHC.IO.Handle.Text.hPutStr'_closure
	.quad	_u8Ey_srt
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.367337758 UTC

.section .data
.align 8
.align 1
_u8EA_srt:
	.quad	stg_SRT_3_info
	.quad	System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure
	.quad	System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure
	.quad	_u8Ez_srt
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.367721138 UTC

.section .text
.align 8
.align 8
	.quad	2
	.long	18
	.long	GHC.Integer.Type.minusInteger_closure-(duration_s8wn_info)+0
duration_s8wn_info:
_c8Dn:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Dr
_c8Ds:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq $block_c8Dk_info,-32(%rbp)
	movq 16(%rbx),%rax
	movq 24(%rbx),%rbx
	movq %rax,-24(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _c8Dk
_c8Dl:
	jmp *(%rbx)
.align 8
	.quad	1
	.long	30
	.long	GHC.Integer.Type.minusInteger_closure-(block_c8Dk_info)+0
block_c8Dk_info:
_c8Dk:
	movq $block_c8Dq_info,(%rbp)
	movq 15(%rbx),%rax
	movq 8(%rbp),%rbx
	movq %rax,8(%rbp)
	testb $7,%bl
	jne _c8Dq
_c8Du:
	jmp *(%rbx)
.align 8
	.quad	1
	.long	30
	.long	GHC.Integer.Type.minusInteger_closure-(block_c8Dq_info)+0
block_c8Dq_info:
_c8Dq:
	movq 15(%rbx),%rsi
	movq 8(%rbp),%r14
	addq $16,%rbp
	jmp GHC.Integer.Type.minusInteger_info
_c8Dr:
	jmp *-16(%r13)
	.size duration_s8wn_info, .-duration_s8wn_info


==================== Asm code ====================
2019-11-05 16:48:08.368155601 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ew_srt-(sat_s8wB_info)+0
sat_s8wB_info:
_c8DX:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8DY
_c8DZ:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq $block_c8DV_info,-24(%rbp)
	movl $GHC.Types.[]_closure+1,%edi
	movq 16(%rbx),%rsi
	xorl %r14d,%r14d
	addq $-24,%rbp
	jmp GHC.Show.$w$cshowsPrec4_info
_c8DY:
	jmp *-16(%r13)
.align 8
	.quad	0
	.long	30
	.long	Main.main4_closure-(block_c8DV_info)+0
block_c8DV_info:
_c8DV:
	movq %r14,%rdi
	movq %rbx,%rsi
	movl $Main.main4_closure,%r14d
	addq $8,%rbp
	jmp GHC.Base.++_$s++_info
	.size sat_s8wB_info, .-sat_s8wB_info


==================== Asm code ====================
2019-11-05 16:48:08.368473536 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ew_srt-(sat_s8wC_info)+0
sat_s8wC_info:
_c8E1:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8E5
_c8E4:
	movq 16(%rbx),%rax
	movq $sat_s8wB_info,-16(%r12)
	movq %rax,(%r12)
	leaq -16(%r12),%rsi
	movl $Main.main6_bytes,%r14d
	jmp GHC.CString.unpackAppendCString#_info
_c8E5:
	movq $24,904(%r13)
	jmp *-16(%r13)
	.size sat_s8wC_info, .-sat_s8wC_info


==================== Asm code ====================
2019-11-05 16:48:08.368870937 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ex_srt-(sat_s8wD_info)+0
sat_s8wD_info:
_c8E6:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8E7
_c8E8:
	movq $block_c8DH_info,-16(%rbp)
	movl $Main.main7_closure+1,%esi
	movq 16(%rbx),%rax
	movq %rax,%r14
	movq %rax,-8(%rbp)
	addq $-16,%rbp
	jmp GHC.Integer.Type.divInteger_info
_c8E7:
	jmp *-16(%r13)
.align 8
	.quad	1
	.long	30
	.long	_u8Ew_srt-(block_c8DH_info)+0
block_c8DH_info:
_c8DH:
	movq $block_c8DL_info,(%rbp)
	movl $GHC.Types.[]_closure+1,%edi
	movq %rbx,%rsi
	xorl %r14d,%r14d
	jmp GHC.Show.$w$cshowsPrec4_info
.align 8
	.quad	1
	.long	30
	.long	_u8Ew_srt-(block_c8DL_info)+0
block_c8DL_info:
_c8DL:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8Ec
_c8Eb:
	movq $sat_s8wC_info,-16(%r12)
	movq 8(%rbp),%rax
	movq %rax,(%r12)
	movq %r14,%rdi
	movq %rbx,%rsi
	leaq -16(%r12),%r14
	addq $16,%rbp
	jmp GHC.Base.++_$s++_info
_c8Ec:
	movq $24,904(%r13)
	jmp stg_gc_pp
	.size sat_s8wD_info, .-sat_s8wD_info


==================== Asm code ====================
2019-11-05 16:48:08.369406038 UTC

.section .text
.align 8
.align 8
	.quad	2
	.long	18
	.long	_u8Ey_srt-(sat_s8wF_info)+0
sat_s8wF_info:
_c8Ef:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Eg
_c8Eh:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8Ej
_c8Ei:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq 16(%rbx),%rax
	movq 24(%rbx),%rbx
	movq $sat_s8wD_info,-16(%r12)
	movq %rax,(%r12)
	movq $block_c8Ed_info,-24(%rbp)
	leaq -16(%r12),%rsi
	movq %rbx,%r14
	addq $-24,%rbp
	jmp GHC.Base.++_info
_c8Ej:
	movq $24,904(%r13)
_c8Eg:
	jmp *-16(%r13)
.align 8
	.quad	0
	.long	30
	.long	GHC.Show.showLitString_closure-(block_c8Ed_info)+0
block_c8Ed_info:
_c8Ed:
	movl $GHC.Show.$fShow[]1_closure,%esi
	movq %rbx,%r14
	addq $8,%rbp
	jmp GHC.Show.showLitString_info
	.size sat_s8wF_info, .-sat_s8wF_info


==================== Asm code ====================
2019-11-05 16:48:08.369899331 UTC

.section .text
.align 8
.align 8
	.quad	12884901903
	.quad	0
	.long	14
	.long	_u8EA_srt-(Main.main_$smeasure2_info)+0
.globl Main.main_$smeasure2_info
.type Main.main_$smeasure2_info, @function
Main.main_$smeasure2_info:
_c8En:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Ep
_c8Eq:
	movq $block_c8D8_info,-24(%rbp)
	movq %r14,%rax
	movl $System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure+2,%r14d
	movq %rax,-16(%rbp)
	movq %rsi,-8(%rbp)
	addq $-24,%rbp
	jmp System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
_c8Ep:
	movl $Main.main_$smeasure2_closure,%ebx
	jmp *-8(%r13)
.align 8
	.quad	2
	.long	30
	.long	_u8EA_srt-(block_c8D8_info)+0
block_c8D8_info:
_c8D8:
	movq $block_c8Da_info,(%rbp)
	movq 16(%rbp),%r14
	movq %rbx,16(%rbp)
	jmp Main.main_go_info
.align 8
	.quad	2
	.long	30
	.long	_u8EA_srt-(block_c8Da_info)+0
block_c8Da_info:
_c8Da:
	movq $block_c8De_info,(%rbp)
	movl $System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure+2,%r14d
	jmp System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
.align 8
	.quad	2
	.long	30
	.long	_u8Ez_srt-(block_c8De_info)+0
block_c8De_info:
_c8De:
	addq $88,%r12
	cmpq 856(%r13),%r12
	ja _c8Ev
_c8Eu:
	movq $duration_s8wn_info,-80(%r12)
	movq 16(%rbp),%rax
	movq %rax,-64(%r12)
	movq %rbx,-56(%r12)
	movq $sat_s8wF_info,-48(%r12)
	leaq -80(%r12),%rax
	movq %rax,-32(%r12)
	movq 8(%rbp),%rax
	movq %rax,-24(%r12)
	movq $:_con_info,-16(%r12)
	movq $GHC.Show.$fShow(,)3_closure,-8(%r12)
	leaq -48(%r12),%rax
	movq %rax,(%r12)
	movl $GHC.Types.True_closure+2,%edi
	leaq -14(%r12),%rsi
	movl $GHC.IO.Handle.FD.stdout_closure,%r14d
	addq $24,%rbp
	jmp GHC.IO.Handle.Text.hPutStr'_info
_c8Ev:
	movq $88,904(%r13)
	jmp stg_gc_unpt_r1
	.size Main.main_$smeasure2_info, .-Main.main_$smeasure2_info


==================== Asm code ====================
2019-11-05 16:48:08.370262554 UTC

.section .data
.align 8
.align 1
.globl Main.main_$smeasure2_closure
.type Main.main_$smeasure2_closure, @object
Main.main_$smeasure2_closure:
	.quad	Main.main_$smeasure2_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.375590294 UTC

.section .text
.align 8
.align 8
	.quad	2
	.long	18
	.long	GHC.Integer.Type.minusInteger_closure-(duration_s8wS_info)+0
duration_s8wS_info:
_c8Fn:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Fr
_c8Fs:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq $block_c8Fk_info,-32(%rbp)
	movq 16(%rbx),%rax
	movq 24(%rbx),%rbx
	movq %rax,-24(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _c8Fk
_c8Fl:
	jmp *(%rbx)
.align 8
	.quad	1
	.long	30
	.long	GHC.Integer.Type.minusInteger_closure-(block_c8Fk_info)+0
block_c8Fk_info:
_c8Fk:
	movq $block_c8Fq_info,(%rbp)
	movq 15(%rbx),%rax
	movq 8(%rbp),%rbx
	movq %rax,8(%rbp)
	testb $7,%bl
	jne _c8Fq
_c8Fu:
	jmp *(%rbx)
.align 8
	.quad	1
	.long	30
	.long	GHC.Integer.Type.minusInteger_closure-(block_c8Fq_info)+0
block_c8Fq_info:
_c8Fq:
	movq 15(%rbx),%rsi
	movq 8(%rbp),%r14
	addq $16,%rbp
	jmp GHC.Integer.Type.minusInteger_info
_c8Fr:
	jmp *-16(%r13)
	.size duration_s8wS_info, .-duration_s8wS_info


==================== Asm code ====================
2019-11-05 16:48:08.376012287 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ew_srt-(sat_s8x6_info)+0
sat_s8x6_info:
_c8FX:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8FY
_c8FZ:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq $block_c8FV_info,-24(%rbp)
	movl $GHC.Types.[]_closure+1,%edi
	movq 16(%rbx),%rsi
	xorl %r14d,%r14d
	addq $-24,%rbp
	jmp GHC.Show.$w$cshowsPrec4_info
_c8FY:
	jmp *-16(%r13)
.align 8
	.quad	0
	.long	30
	.long	Main.main4_closure-(block_c8FV_info)+0
block_c8FV_info:
_c8FV:
	movq %r14,%rdi
	movq %rbx,%rsi
	movl $Main.main4_closure,%r14d
	addq $8,%rbp
	jmp GHC.Base.++_$s++_info
	.size sat_s8x6_info, .-sat_s8x6_info


==================== Asm code ====================
2019-11-05 16:48:08.376307008 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ew_srt-(sat_s8x7_info)+0
sat_s8x7_info:
_c8G1:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8G5
_c8G4:
	movq 16(%rbx),%rax
	movq $sat_s8x6_info,-16(%r12)
	movq %rax,(%r12)
	leaq -16(%r12),%rsi
	movl $Main.main6_bytes,%r14d
	jmp GHC.CString.unpackAppendCString#_info
_c8G5:
	movq $24,904(%r13)
	jmp *-16(%r13)
	.size sat_s8x7_info, .-sat_s8x7_info


==================== Asm code ====================
2019-11-05 16:48:08.376674477 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ex_srt-(sat_s8x8_info)+0
sat_s8x8_info:
_c8G6:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8G7
_c8G8:
	movq $block_c8FH_info,-16(%rbp)
	movl $Main.main7_closure+1,%esi
	movq 16(%rbx),%rax
	movq %rax,%r14
	movq %rax,-8(%rbp)
	addq $-16,%rbp
	jmp GHC.Integer.Type.divInteger_info
_c8G7:
	jmp *-16(%r13)
.align 8
	.quad	1
	.long	30
	.long	_u8Ew_srt-(block_c8FH_info)+0
block_c8FH_info:
_c8FH:
	movq $block_c8FL_info,(%rbp)
	movl $GHC.Types.[]_closure+1,%edi
	movq %rbx,%rsi
	xorl %r14d,%r14d
	jmp GHC.Show.$w$cshowsPrec4_info
.align 8
	.quad	1
	.long	30
	.long	_u8Ew_srt-(block_c8FL_info)+0
block_c8FL_info:
_c8FL:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8Gc
_c8Gb:
	movq $sat_s8x7_info,-16(%r12)
	movq 8(%rbp),%rax
	movq %rax,(%r12)
	movq %r14,%rdi
	movq %rbx,%rsi
	leaq -16(%r12),%r14
	addq $16,%rbp
	jmp GHC.Base.++_$s++_info
_c8Gc:
	movq $24,904(%r13)
	jmp stg_gc_pp
	.size sat_s8x8_info, .-sat_s8x8_info


==================== Asm code ====================
2019-11-05 16:48:08.377184354 UTC

.section .text
.align 8
.align 8
	.quad	2
	.long	18
	.long	_u8Ey_srt-(sat_s8xa_info)+0
sat_s8xa_info:
_c8Gf:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Gg
_c8Gh:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8Gj
_c8Gi:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq 16(%rbx),%rax
	movq 24(%rbx),%rbx
	movq $sat_s8x8_info,-16(%r12)
	movq %rax,(%r12)
	movq $block_c8Gd_info,-24(%rbp)
	leaq -16(%r12),%rsi
	movq %rbx,%r14
	addq $-24,%rbp
	jmp GHC.Base.++_info
_c8Gj:
	movq $24,904(%r13)
_c8Gg:
	jmp *-16(%r13)
.align 8
	.quad	0
	.long	30
	.long	GHC.Show.showLitString_closure-(block_c8Gd_info)+0
block_c8Gd_info:
_c8Gd:
	movl $GHC.Show.$fShow[]1_closure,%esi
	movq %rbx,%r14
	addq $8,%rbp
	jmp GHC.Show.showLitString_info
	.size sat_s8xa_info, .-sat_s8xa_info


==================== Asm code ====================
2019-11-05 16:48:08.377764635 UTC

.section .text
.align 8
.align 8
	.quad	12884901903
	.quad	0
	.long	14
	.long	_u8EA_srt-(Main.main_$smeasure1_info)+0
.globl Main.main_$smeasure1_info
.type Main.main_$smeasure1_info, @function
Main.main_$smeasure1_info:
_c8Gn:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Gp
_c8Gq:
	movq $block_c8F7_info,-24(%rbp)
	movq %r14,%rax
	movl $System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure+2,%r14d
	movq %rax,-16(%rbp)
	movq %rsi,-8(%rbp)
	addq $-24,%rbp
	jmp System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
_c8Gp:
	movl $Main.main_$smeasure1_closure,%ebx
	jmp *-8(%r13)
.align 8
	.quad	2
	.long	30
	.long	_u8EA_srt-(block_c8F7_info)+0
block_c8F7_info:
_c8F7:
	movq $block_c8F9_info,(%rbp)
	movq %rbx,%rax
	movq 16(%rbp),%rbx
	movq %rax,16(%rbp)
	testb $7,%bl
	jne _c8F9
_c8Fa:
	jmp *(%rbx)
.align 8
	.quad	2
	.long	30
	.long	_u8EA_srt-(block_c8F9_info)+0
block_c8F9_info:
_c8F9:
	movq $block_c8Fe_info,(%rbp)
	movl $System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure+2,%r14d
	jmp System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
.align 8
	.quad	2
	.long	30
	.long	_u8Ez_srt-(block_c8Fe_info)+0
block_c8Fe_info:
_c8Fe:
	addq $88,%r12
	cmpq 856(%r13),%r12
	ja _c8Gv
_c8Gu:
	movq $duration_s8wS_info,-80(%r12)
	movq 16(%rbp),%rax
	movq %rax,-64(%r12)
	movq %rbx,-56(%r12)
	movq $sat_s8xa_info,-48(%r12)
	leaq -80(%r12),%rax
	movq %rax,-32(%r12)
	movq 8(%rbp),%rax
	movq %rax,-24(%r12)
	movq $:_con_info,-16(%r12)
	movq $GHC.Show.$fShow(,)3_closure,-8(%r12)
	leaq -48(%r12),%rax
	movq %rax,(%r12)
	movl $GHC.Types.True_closure+2,%edi
	leaq -14(%r12),%rsi
	movl $GHC.IO.Handle.FD.stdout_closure,%r14d
	addq $24,%rbp
	jmp GHC.IO.Handle.Text.hPutStr'_info
_c8Gv:
	movq $88,904(%r13)
	jmp stg_gc_unpt_r1
	.size Main.main_$smeasure1_info, .-Main.main_$smeasure1_info


==================== Asm code ====================
2019-11-05 16:48:08.378135768 UTC

.section .data
.align 8
.align 1
.globl Main.main_$smeasure1_closure
.type Main.main_$smeasure1_closure, @object
Main.main_$smeasure1_closure:
	.quad	Main.main_$smeasure1_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.383247544 UTC

.section .text
.align 8
.align 8
	.quad	2
	.long	18
	.long	GHC.Integer.Type.minusInteger_closure-(duration_s8xm_info)+0
duration_s8xm_info:
_c8Hd:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Hh
_c8Hi:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq $block_c8Ha_info,-32(%rbp)
	movq 16(%rbx),%rax
	movq 24(%rbx),%rbx
	movq %rax,-24(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _c8Ha
_c8Hb:
	jmp *(%rbx)
.align 8
	.quad	1
	.long	30
	.long	GHC.Integer.Type.minusInteger_closure-(block_c8Ha_info)+0
block_c8Ha_info:
_c8Ha:
	movq $block_c8Hg_info,(%rbp)
	movq 15(%rbx),%rax
	movq 8(%rbp),%rbx
	movq %rax,8(%rbp)
	testb $7,%bl
	jne _c8Hg
_c8Hk:
	jmp *(%rbx)
.align 8
	.quad	1
	.long	30
	.long	GHC.Integer.Type.minusInteger_closure-(block_c8Hg_info)+0
block_c8Hg_info:
_c8Hg:
	movq 15(%rbx),%rsi
	movq 8(%rbp),%r14
	addq $16,%rbp
	jmp GHC.Integer.Type.minusInteger_info
_c8Hh:
	jmp *-16(%r13)
	.size duration_s8xm_info, .-duration_s8xm_info


==================== Asm code ====================
2019-11-05 16:48:08.383615051 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ew_srt-(sat_s8xA_info)+0
sat_s8xA_info:
_c8HN:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8HO
_c8HP:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq $block_c8HL_info,-24(%rbp)
	movl $GHC.Types.[]_closure+1,%edi
	movq 16(%rbx),%rsi
	xorl %r14d,%r14d
	addq $-24,%rbp
	jmp GHC.Show.$w$cshowsPrec4_info
_c8HO:
	jmp *-16(%r13)
.align 8
	.quad	0
	.long	30
	.long	Main.main4_closure-(block_c8HL_info)+0
block_c8HL_info:
_c8HL:
	movq %r14,%rdi
	movq %rbx,%rsi
	movl $Main.main4_closure,%r14d
	addq $8,%rbp
	jmp GHC.Base.++_$s++_info
	.size sat_s8xA_info, .-sat_s8xA_info


==================== Asm code ====================
2019-11-05 16:48:08.38392776 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ew_srt-(sat_s8xB_info)+0
sat_s8xB_info:
_c8HR:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8HV
_c8HU:
	movq 16(%rbx),%rax
	movq $sat_s8xA_info,-16(%r12)
	movq %rax,(%r12)
	leaq -16(%r12),%rsi
	movl $Main.main6_bytes,%r14d
	jmp GHC.CString.unpackAppendCString#_info
_c8HV:
	movq $24,904(%r13)
	jmp *-16(%r13)
	.size sat_s8xB_info, .-sat_s8xB_info


==================== Asm code ====================
2019-11-05 16:48:08.384309406 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ex_srt-(sat_s8xC_info)+0
sat_s8xC_info:
_c8HW:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8HX
_c8HY:
	movq $block_c8Hx_info,-16(%rbp)
	movl $Main.main7_closure+1,%esi
	movq 16(%rbx),%rax
	movq %rax,%r14
	movq %rax,-8(%rbp)
	addq $-16,%rbp
	jmp GHC.Integer.Type.divInteger_info
_c8HX:
	jmp *-16(%r13)
.align 8
	.quad	1
	.long	30
	.long	_u8Ew_srt-(block_c8Hx_info)+0
block_c8Hx_info:
_c8Hx:
	movq $block_c8HB_info,(%rbp)
	movl $GHC.Types.[]_closure+1,%edi
	movq %rbx,%rsi
	xorl %r14d,%r14d
	jmp GHC.Show.$w$cshowsPrec4_info
.align 8
	.quad	1
	.long	30
	.long	_u8Ew_srt-(block_c8HB_info)+0
block_c8HB_info:
_c8HB:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8I2
_c8I1:
	movq $sat_s8xB_info,-16(%r12)
	movq 8(%rbp),%rax
	movq %rax,(%r12)
	movq %r14,%rdi
	movq %rbx,%rsi
	leaq -16(%r12),%r14
	addq $16,%rbp
	jmp GHC.Base.++_$s++_info
_c8I2:
	movq $24,904(%r13)
	jmp stg_gc_pp
	.size sat_s8xC_info, .-sat_s8xC_info


==================== Asm code ====================
2019-11-05 16:48:08.384733578 UTC

.section .text
.align 8
.align 8
	.quad	2
	.long	18
	.long	_u8Ey_srt-(sat_s8xE_info)+0
sat_s8xE_info:
_c8I5:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8I6
_c8I7:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8I9
_c8I8:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq 16(%rbx),%rax
	movq 24(%rbx),%rbx
	movq $sat_s8xC_info,-16(%r12)
	movq %rax,(%r12)
	movq $block_c8I3_info,-24(%rbp)
	leaq -16(%r12),%rsi
	movq %rbx,%r14
	addq $-24,%rbp
	jmp GHC.Base.++_info
_c8I9:
	movq $24,904(%r13)
_c8I6:
	jmp *-16(%r13)
.align 8
	.quad	0
	.long	30
	.long	GHC.Show.showLitString_closure-(block_c8I3_info)+0
block_c8I3_info:
_c8I3:
	movl $GHC.Show.$fShow[]1_closure,%esi
	movq %rbx,%r14
	addq $8,%rbp
	jmp GHC.Show.showLitString_info
	.size sat_s8xE_info, .-sat_s8xE_info


==================== Asm code ====================
2019-11-05 16:48:08.385242317 UTC

.section .text
.align 8
.align 8
	.quad	12884901903
	.quad	0
	.long	14
	.long	_u8EA_srt-(Main.main_$smeasure_info)+0
.globl Main.main_$smeasure_info
.type Main.main_$smeasure_info, @function
Main.main_$smeasure_info:
_c8Id:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8If
_c8Ig:
	movq $block_c8GX_info,-24(%rbp)
	movq %r14,%rax
	movl $System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure+2,%r14d
	movq %rax,-16(%rbp)
	movq %rsi,-8(%rbp)
	addq $-24,%rbp
	jmp System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
_c8If:
	movl $Main.main_$smeasure_closure,%ebx
	jmp *-8(%r13)
.align 8
	.quad	2
	.long	30
	.long	_u8EA_srt-(block_c8GX_info)+0
block_c8GX_info:
_c8GX:
	movq $block_c8GZ_info,(%rbp)
	movq %rbx,%rax
	movq 16(%rbp),%rbx
	movq %rax,16(%rbp)
	testb $7,%bl
	jne _c8GZ
_c8H0:
	jmp *(%rbx)
.align 8
	.quad	2
	.long	30
	.long	_u8EA_srt-(block_c8GZ_info)+0
block_c8GZ_info:
_c8GZ:
	movq $block_c8H4_info,(%rbp)
	movl $System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure+2,%r14d
	jmp System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
.align 8
	.quad	2
	.long	30
	.long	_u8Ez_srt-(block_c8H4_info)+0
block_c8H4_info:
_c8H4:
	addq $88,%r12
	cmpq 856(%r13),%r12
	ja _c8Il
_c8Ik:
	movq $duration_s8xm_info,-80(%r12)
	movq 16(%rbp),%rax
	movq %rax,-64(%r12)
	movq %rbx,-56(%r12)
	movq $sat_s8xE_info,-48(%r12)
	leaq -80(%r12),%rax
	movq %rax,-32(%r12)
	movq 8(%rbp),%rax
	movq %rax,-24(%r12)
	movq $:_con_info,-16(%r12)
	movq $GHC.Show.$fShow(,)3_closure,-8(%r12)
	leaq -48(%r12),%rax
	movq %rax,(%r12)
	movl $GHC.Types.True_closure+2,%edi
	leaq -14(%r12),%rsi
	movl $GHC.IO.Handle.FD.stdout_closure,%r14d
	addq $24,%rbp
	jmp GHC.IO.Handle.Text.hPutStr'_info
_c8Il:
	movq $88,904(%r13)
	jmp stg_gc_unpt_r1
	.size Main.main_$smeasure_info, .-Main.main_$smeasure_info


==================== Asm code ====================
2019-11-05 16:48:08.385570771 UTC

.section .data
.align 8
.align 1
.globl Main.main_$smeasure_closure
.type Main.main_$smeasure_closure, @object
Main.main_$smeasure_closure:
	.quad	Main.main_$smeasure_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.390272471 UTC

.section .text
.align 8
.align 8
	.quad	2
	.long	18
	.long	GHC.Integer.Type.minusInteger_closure-(duration_s8xR_info)+0
duration_s8xR_info:
_c8J2:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c8J6
_c8J7:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq $block_c8IZ_info,-32(%rbp)
	movq 16(%rbx),%rax
	movq 24(%rbx),%rbx
	movq %rax,-24(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _c8IZ
_c8J0:
	jmp *(%rbx)
.align 8
	.quad	1
	.long	30
	.long	GHC.Integer.Type.minusInteger_closure-(block_c8IZ_info)+0
block_c8IZ_info:
_c8IZ:
	movq $block_c8J5_info,(%rbp)
	movq 15(%rbx),%rax
	movq 8(%rbp),%rbx
	movq %rax,8(%rbp)
	testb $7,%bl
	jne _c8J5
_c8J9:
	jmp *(%rbx)
.align 8
	.quad	1
	.long	30
	.long	GHC.Integer.Type.minusInteger_closure-(block_c8J5_info)+0
block_c8J5_info:
_c8J5:
	movq 15(%rbx),%rsi
	movq 8(%rbp),%r14
	addq $16,%rbp
	jmp GHC.Integer.Type.minusInteger_info
_c8J6:
	jmp *-16(%r13)
	.size duration_s8xR_info, .-duration_s8xR_info


==================== Asm code ====================
2019-11-05 16:48:08.390742654 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ew_srt-(sat_s8y5_info)+0
sat_s8y5_info:
_c8JC:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8JD
_c8JE:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq $block_c8JA_info,-24(%rbp)
	movl $GHC.Types.[]_closure+1,%edi
	movq 16(%rbx),%rsi
	xorl %r14d,%r14d
	addq $-24,%rbp
	jmp GHC.Show.$w$cshowsPrec4_info
_c8JD:
	jmp *-16(%r13)
.align 8
	.quad	0
	.long	30
	.long	Main.main4_closure-(block_c8JA_info)+0
block_c8JA_info:
_c8JA:
	movq %r14,%rdi
	movq %rbx,%rsi
	movl $Main.main4_closure,%r14d
	addq $8,%rbp
	jmp GHC.Base.++_$s++_info
	.size sat_s8y5_info, .-sat_s8y5_info


==================== Asm code ====================
2019-11-05 16:48:08.391087985 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ew_srt-(sat_s8y6_info)+0
sat_s8y6_info:
_c8JG:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8JK
_c8JJ:
	movq 16(%rbx),%rax
	movq $sat_s8y5_info,-16(%r12)
	movq %rax,(%r12)
	leaq -16(%r12),%rsi
	movl $Main.main6_bytes,%r14d
	jmp GHC.CString.unpackAppendCString#_info
_c8JK:
	movq $24,904(%r13)
	jmp *-16(%r13)
	.size sat_s8y6_info, .-sat_s8y6_info


==================== Asm code ====================
2019-11-05 16:48:08.391414513 UTC

.section .text
.align 8
.align 8
	.quad	1
	.long	16
	.long	_u8Ex_srt-(sat_s8y7_info)+0
sat_s8y7_info:
_c8JL:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8JM
_c8JN:
	movq $block_c8Jm_info,-16(%rbp)
	movl $Main.main7_closure+1,%esi
	movq 16(%rbx),%rax
	movq %rax,%r14
	movq %rax,-8(%rbp)
	addq $-16,%rbp
	jmp GHC.Integer.Type.divInteger_info
_c8JM:
	jmp *-16(%r13)
.align 8
	.quad	1
	.long	30
	.long	_u8Ew_srt-(block_c8Jm_info)+0
block_c8Jm_info:
_c8Jm:
	movq $block_c8Jq_info,(%rbp)
	movl $GHC.Types.[]_closure+1,%edi
	movq %rbx,%rsi
	xorl %r14d,%r14d
	jmp GHC.Show.$w$cshowsPrec4_info
.align 8
	.quad	1
	.long	30
	.long	_u8Ew_srt-(block_c8Jq_info)+0
block_c8Jq_info:
_c8Jq:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8JR
_c8JQ:
	movq $sat_s8y6_info,-16(%r12)
	movq 8(%rbp),%rax
	movq %rax,(%r12)
	movq %r14,%rdi
	movq %rbx,%rsi
	leaq -16(%r12),%r14
	addq $16,%rbp
	jmp GHC.Base.++_$s++_info
_c8JR:
	movq $24,904(%r13)
	jmp stg_gc_pp
	.size sat_s8y7_info, .-sat_s8y7_info


==================== Asm code ====================
2019-11-05 16:48:08.391813664 UTC

.section .text
.align 8
.align 8
	.quad	2
	.long	18
	.long	_u8Ey_srt-(sat_s8y9_info)+0
sat_s8y9_info:
_c8JU:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8JV
_c8JW:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c8JY
_c8JX:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq 16(%rbx),%rax
	movq 24(%rbx),%rbx
	movq $sat_s8y7_info,-16(%r12)
	movq %rax,(%r12)
	movq $block_c8JS_info,-24(%rbp)
	leaq -16(%r12),%rsi
	movq %rbx,%r14
	addq $-24,%rbp
	jmp GHC.Base.++_info
_c8JY:
	movq $24,904(%r13)
_c8JV:
	jmp *-16(%r13)
.align 8
	.quad	0
	.long	30
	.long	GHC.Show.showLitString_closure-(block_c8JS_info)+0
block_c8JS_info:
_c8JS:
	movl $GHC.Show.$fShow[]1_closure,%esi
	movq %rbx,%r14
	addq $8,%rbp
	jmp GHC.Show.showLitString_info
	.size sat_s8y9_info, .-sat_s8y9_info


==================== Asm code ====================
2019-11-05 16:48:08.392303592 UTC

.section .text
.align 8
.align 8
	.quad	17179869207
	.quad	0
	.long	14
	.long	_u8EA_srt-(Main.measure1_info)+0
.globl Main.measure1_info
.type Main.measure1_info, @function
Main.measure1_info:
_c8K2:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c8K4
_c8K5:
	movq $block_c8IN_info,-32(%rbp)
	movq %r14,%rax
	movl $System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure+2,%r14d
	movq %rax,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdi,-8(%rbp)
	addq $-32,%rbp
	jmp System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
_c8K4:
	movl $Main.measure1_closure,%ebx
	jmp *-8(%r13)
.align 8
	.quad	3
	.long	30
	.long	_u8EA_srt-(block_c8IN_info)+0
block_c8IN_info:
_c8IN:
	movq 8(%rbp),%rax
	movq $block_c8IP_info,8(%rbp)
	movq 24(%rbp),%r14
	movq %rbx,%rcx
	movq %rax,%rbx
	movq %rcx,24(%rbp)
	addq $8,%rbp
	jmp stg_ap_p_fast
.align 8
	.quad	2
	.long	30
	.long	_u8EA_srt-(block_c8IP_info)+0
block_c8IP_info:
_c8IP:
	movq $block_c8IT_info,(%rbp)
	movl $System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure+2,%r14d
	jmp System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
.align 8
	.quad	2
	.long	30
	.long	_u8Ez_srt-(block_c8IT_info)+0
block_c8IT_info:
_c8IT:
	addq $88,%r12
	cmpq 856(%r13),%r12
	ja _c8Ka
_c8K9:
	movq $duration_s8xR_info,-80(%r12)
	movq 16(%rbp),%rax
	movq %rax,-64(%r12)
	movq %rbx,-56(%r12)
	movq $sat_s8y9_info,-48(%r12)
	leaq -80(%r12),%rax
	movq %rax,-32(%r12)
	movq 8(%rbp),%rax
	movq %rax,-24(%r12)
	movq $:_con_info,-16(%r12)
	movq $GHC.Show.$fShow(,)3_closure,-8(%r12)
	leaq -48(%r12),%rax
	movq %rax,(%r12)
	movl $GHC.Types.True_closure+2,%edi
	leaq -14(%r12),%rsi
	movl $GHC.IO.Handle.FD.stdout_closure,%r14d
	addq $24,%rbp
	jmp GHC.IO.Handle.Text.hPutStr'_info
_c8Ka:
	movq $88,904(%r13)
	jmp stg_gc_unpt_r1
	.size Main.measure1_info, .-Main.measure1_info


==================== Asm code ====================
2019-11-05 16:48:08.392624723 UTC

.section .data
.align 8
.align 1
.globl Main.measure1_closure
.type Main.measure1_closure, @object
Main.measure1_closure:
	.quad	Main.measure1_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.393596636 UTC

.section .text
.align 8
.align 8
	.quad	17179869207
	.quad	0
	.long	14
	.long	Main.measure1_closure-(Main.measure_info)+0
.globl Main.measure_info
.type Main.measure_info, @function
Main.measure_info:
_c8KC:
	jmp Main.measure1_info
	.size Main.measure_info, .-Main.measure_info


==================== Asm code ====================
2019-11-05 16:48:08.393728836 UTC

.section .data
.align 8
.align 1
.globl Main.measure_closure
.type Main.measure_closure, @object
Main.measure_closure:
	.quad	Main.measure_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.394107425 UTC

.section .data
.align 8
.align 1
.globl Main.testIntegralPower1_closure
.type Main.testIntegralPower1_closure, @object
Main.testIntegralPower1_closure:
	.quad	GHC.Integer.Type.S#_con_info
	.quad	1000000


==================== Asm code ====================
2019-11-05 16:48:08.394342525 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl Main.testStimes2_bytes
.type Main.testStimes2_bytes, @object
Main.testStimes2_bytes:
	.asciz "foo"


==================== Asm code ====================
2019-11-05 16:48:08.39522301 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	0
.globl Main.testStimes1_info
.type Main.testStimes1_info, @function
Main.testStimes1_info:
_c8KQ:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8KR
_c8KS:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8KP
_c8KO:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $Main.testStimes2_bytes,%r14d
	addq $-16,%rbp
	jmp GHC.CString.unpackCString#_info
_c8KP:
	jmp *(%rbx)
_c8KR:
	jmp *-16(%r13)
	.size Main.testStimes1_info, .-Main.testStimes1_info


==================== Asm code ====================
2019-11-05 16:48:08.39536621 UTC

.section .data
.align 8
.align 1
.globl Main.testStimes1_closure
.type Main.testStimes1_closure, @object
Main.testStimes1_closure:
	.quad	Main.testStimes1_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.396210446 UTC

.section .data
.align 8
.align 1
_u8L7_srt:
	.quad	stg_SRT_3_info
	.quad	GHC.Real.$fIntegralInteger_closure
	.quad	Data.Semigroup.Internal.stimesList_closure
	.quad	Main.testStimes1_closure
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.396463314 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	_u8L7_srt-(Main.testStimes_info)+0
.globl Main.testStimes_info
.type Main.testStimes_info, @function
Main.testStimes_info:
_c8L4:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8L5
_c8L6:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8L3
_c8L2:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $Main.testStimes1_closure,%edi
	movl $Main.testIntegralPower1_closure+1,%esi
	movl $GHC.Real.$fIntegralInteger_closure,%r14d
	addq $-16,%rbp
	jmp Data.Semigroup.Internal.stimesList_info
_c8L3:
	jmp *(%rbx)
_c8L5:
	jmp *-16(%r13)
	.size Main.testStimes_info, .-Main.testStimes_info


==================== Asm code ====================
2019-11-05 16:48:08.396621981 UTC

.section .data
.align 8
.align 1
.globl Main.testStimes_closure
.type Main.testStimes_closure, @object
Main.testStimes_closure:
	.quad	Main.testStimes_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.396874798 UTC

.section .data
.align 8
.align 1
.globl Main.testIntegralPower2_closure
.type Main.testIntegralPower2_closure, @object
Main.testIntegralPower2_closure:
	.quad	GHC.Integer.Type.S#_con_info
	.quad	3


==================== Asm code ====================
2019-11-05 16:48:08.397771391 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	GHC.Real.^_$s^_closure-(Main.testIntegralPower_info)+0
.globl Main.testIntegralPower_info
.type Main.testIntegralPower_info, @function
Main.testIntegralPower_info:
_c8Ll:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Lm
_c8Ln:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8Lk
_c8Lj:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $Main.testIntegralPower1_closure+1,%esi
	movl $Main.testIntegralPower2_closure+1,%r14d
	addq $-16,%rbp
	jmp GHC.Real.^_$s^_info
_c8Lk:
	jmp *(%rbx)
_c8Lm:
	jmp *-16(%r13)
	.size Main.testIntegralPower_info, .-Main.testIntegralPower_info


==================== Asm code ====================
2019-11-05 16:48:08.3979244 UTC

.section .data
.align 8
.align 1
.globl Main.testIntegralPower_closure
.type Main.testIntegralPower_closure, @object
Main.testIntegralPower_closure:
	.quad	Main.testIntegralPower_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.398231121 UTC

.section .data
.align 8
.align 1
.globl Main.testFractionalPower2_closure
.type Main.testFractionalPower2_closure, @object
Main.testFractionalPower2_closure:
	.quad	GHC.Types.D#_con_info
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	20
	.byte	64


==================== Asm code ====================
2019-11-05 16:48:08.398463925 UTC

.section .data
.align 8
.align 1
.globl Main.testFractionalPower1_closure
.type Main.testFractionalPower1_closure, @object
Main.testFractionalPower1_closure:
	.quad	GHC.Integer.Type.S#_con_info
	.quad	441


==================== Asm code ====================
2019-11-05 16:48:08.399715073 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	Main.$w$s^^_closure-(Main.testFractionalPower_info)+0
.globl Main.testFractionalPower_info
.type Main.testFractionalPower_info, @function
Main.testFractionalPower_info:
_c8LD:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _c8LH
_c8LI:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8LA
_c8Lz:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movq $block_c8LB_info,-24(%rbp)
	movl $Main.testFractionalPower1_closure+1,%esi
	movl $Main.testFractionalPower2_closure+1,%r14d
	addq $-24,%rbp
	jmp Main.$w$s^^_info
_c8LA:
	jmp *(%rbx)
_c8LH:
	jmp *-16(%r13)
.align 8
	.quad	0
	.long	30
	.long	0
block_c8LB_info:
_c8LB:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _c8LL
_c8LK:
	movq $GHC.Types.D#_con_info,-8(%r12)
	movsd %xmm1,(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *(%rbp)
_c8LL:
	movq $16,904(%r13)
	jmp stg_gc_d1
	.size Main.testFractionalPower_info, .-Main.testFractionalPower_info


==================== Asm code ====================
2019-11-05 16:48:08.39991087 UTC

.section .data
.align 8
.align 1
.globl Main.testFractionalPower_closure
.type Main.testFractionalPower_closure, @object
Main.testFractionalPower_closure:
	.quad	Main.testFractionalPower_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.400183861 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl Main.main3_bytes
.type Main.main3_bytes, @object
Main.main3_bytes:
	.asciz "integral power : "


==================== Asm code ====================
2019-11-05 16:48:08.401092771 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	0
.globl Main.main2_info
.type Main.main2_info, @function
Main.main2_info:
_c8LY:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8LZ
_c8M0:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8LX
_c8LW:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $Main.main3_bytes,%r14d
	addq $-16,%rbp
	jmp GHC.CString.unpackCString#_info
_c8LX:
	jmp *(%rbx)
_c8LZ:
	jmp *-16(%r13)
	.size Main.main2_info, .-Main.main2_info


==================== Asm code ====================
2019-11-05 16:48:08.401236815 UTC

.section .data
.align 8
.align 1
.globl Main.main2_closure
.type Main.main2_closure, @object
Main.main2_closure:
	.quad	Main.main2_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.401774035 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl Main.main9_bytes
.type Main.main9_bytes, @object
Main.main9_bytes:
	.asciz "fractional power 3 : "


==================== Asm code ====================
2019-11-05 16:48:08.402691255 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	0
.globl Main.main8_info
.type Main.main8_info, @function
Main.main8_info:
_c8Md:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Me
_c8Mf:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8Mc
_c8Mb:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $Main.main9_bytes,%r14d
	addq $-16,%rbp
	jmp GHC.CString.unpackCString#_info
_c8Mc:
	jmp *(%rbx)
_c8Me:
	jmp *-16(%r13)
	.size Main.main8_info, .-Main.main8_info


==================== Asm code ====================
2019-11-05 16:48:08.402870695 UTC

.section .data
.align 8
.align 1
.globl Main.main8_closure
.type Main.main8_closure, @object
Main.main8_closure:
	.quad	Main.main8_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.403185017 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl Main.main11_bytes
.type Main.main11_bytes, @object
Main.main11_bytes:
	.asciz "fractional power 2 : "


==================== Asm code ====================
2019-11-05 16:48:08.404155168 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	0
.globl Main.main10_info
.type Main.main10_info, @function
Main.main10_info:
_c8Ms:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Mt
_c8Mu:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8Mr
_c8Mq:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $Main.main11_bytes,%r14d
	addq $-16,%rbp
	jmp GHC.CString.unpackCString#_info
_c8Mr:
	jmp *(%rbx)
_c8Mt:
	jmp *-16(%r13)
	.size Main.main10_info, .-Main.main10_info


==================== Asm code ====================
2019-11-05 16:48:08.404348749 UTC

.section .data
.align 8
.align 1
.globl Main.main10_closure
.type Main.main10_closure, @object
Main.main10_closure:
	.quad	Main.main10_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.40465771 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl Main.main13_bytes
.type Main.main13_bytes, @object
Main.main13_bytes:
	.asciz "fractional power 1 : "


==================== Asm code ====================
2019-11-05 16:48:08.405476558 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	0
.globl Main.main12_info
.type Main.main12_info, @function
Main.main12_info:
_c8MH:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8MI
_c8MJ:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8MG
_c8MF:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $Main.main13_bytes,%r14d
	addq $-16,%rbp
	jmp GHC.CString.unpackCString#_info
_c8MG:
	jmp *(%rbx)
_c8MI:
	jmp *-16(%r13)
	.size Main.main12_info, .-Main.main12_info


==================== Asm code ====================
2019-11-05 16:48:08.40562327 UTC

.section .data
.align 8
.align 1
.globl Main.main12_closure
.type Main.main12_closure, @object
Main.main12_closure:
	.quad	Main.main12_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.405857796 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl Main.main15_bytes
.type Main.main15_bytes, @object
Main.main15_bytes:
	.asciz "stimes : "


==================== Asm code ====================
2019-11-05 16:48:08.406687984 UTC

.section .text
.align 8
.align 8
	.quad	0
	.long	21
	.long	0
.globl Main.main14_info
.type Main.main14_info, @function
Main.main14_info:
_c8MW:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c8MX
_c8MY:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c8MV
_c8MU:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $Main.main15_bytes,%r14d
	addq $-16,%rbp
	jmp GHC.CString.unpackCString#_info
_c8MV:
	jmp *(%rbx)
_c8MX:
	jmp *-16(%r13)
	.size Main.main14_info, .-Main.main14_info


==================== Asm code ====================
2019-11-05 16:48:08.406831296 UTC

.section .data
.align 8
.align 1
.globl Main.main14_closure
.type Main.main14_closure, @object
Main.main14_closure:
	.quad	Main.main14_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.407987466 UTC

.section .data
.align 8
.align 1
_u8Nn_srt:
	.quad	stg_SRT_3_info
	.quad	Main.testIntegralPower_closure
	.quad	Main.main2_closure
	.quad	Main.main_$smeasure_closure
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.408086333 UTC

.section .data
.align 8
.align 1
_u8No_srt:
	.quad	stg_SRT_4_info
	.quad	Main.testFractionalPower_closure
	.quad	Main.main8_closure
	.quad	Main.main_$smeasure1_closure
	.quad	_u8Nn_srt
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.408164007 UTC

.section .data
.align 8
.align 1
_u8Np_srt:
	.quad	stg_SRT_2_info
	.quad	Main.main10_closure
	.quad	_u8No_srt
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.408234072 UTC

.section .data
.align 8
.align 1
_u8Nq_srt:
	.quad	stg_SRT_2_info
	.quad	Main.main12_closure
	.quad	_u8Np_srt
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.408524033 UTC

.section .text
.align 8
.align 8
	.quad	4294967299
	.quad	4
	.long	14
	.long	0
.globl Main.main1_info
.type Main.main1_info, @function
Main.main1_info:
_c8Ng:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _c8Nh
_c8Ni:
	movq $block_c8N8_info,-8(%rbp)
	movl $Main.testStimes_closure,%esi
	movl $Main.main14_closure,%r14d
	addq $-8,%rbp
	jmp Main.main_$smeasure2_info
_c8Nh:
	movl $Main.main1_closure,%ebx
	jmp *-8(%r13)
.align 8
	.quad	0
	.long	30
	.long	_u8Nq_srt-(block_c8N8_info)+0
block_c8N8_info:
_c8N8:
	movq $block_c8Na_info,(%rbp)
	movl $Main.testFractionalPower_closure,%esi
	movl $Main.main12_closure,%r14d
	jmp Main.main_$smeasure1_info
.align 8
	.quad	0
	.long	30
	.long	_u8Np_srt-(block_c8Na_info)+0
block_c8Na_info:
_c8Na:
	movq $block_c8Nc_info,(%rbp)
	movl $Main.testFractionalPower_closure,%esi
	movl $Main.main10_closure,%r14d
	jmp Main.main_$smeasure1_info
.align 8
	.quad	0
	.long	30
	.long	_u8No_srt-(block_c8Nc_info)+0
block_c8Nc_info:
_c8Nc:
	movq $block_c8Ne_info,(%rbp)
	movl $Main.testFractionalPower_closure,%esi
	movl $Main.main8_closure,%r14d
	jmp Main.main_$smeasure1_info
.align 8
	.quad	0
	.long	30
	.long	_u8Nn_srt-(block_c8Ne_info)+0
block_c8Ne_info:
_c8Ne:
	movl $Main.testIntegralPower_closure,%esi
	movl $Main.main2_closure,%r14d
	addq $8,%rbp
	jmp Main.main_$smeasure_info
	.size Main.main1_info, .-Main.main1_info


==================== Asm code ====================
2019-11-05 16:48:08.408752962 UTC

.section .data
.align 8
.align 1
.globl Main.main1_closure
.type Main.main1_closure, @object
Main.main1_closure:
	.quad	Main.main1_info
	.quad	Main.testStimes_closure
	.quad	Main.main14_closure
	.quad	Main.main_$smeasure2_closure
	.quad	_u8Nq_srt
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.409288722 UTC

.section .text
.align 8
.align 8
	.quad	4294967299
	.quad	0
	.long	14
	.long	Main.main1_closure-(Main.main_info)+0
.globl Main.main_info
.type Main.main_info, @function
Main.main_info:
_c8ND:
	jmp Main.main1_info
	.size Main.main_info, .-Main.main_info


==================== Asm code ====================
2019-11-05 16:48:08.409379907 UTC

.section .data
.align 8
.align 1
.globl Main.main_closure
.type Main.main_closure, @object
Main.main_closure:
	.quad	Main.main_info
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.40987063 UTC

.section .text
.align 8
.align 8
	.quad	4294967299
	.quad	2
	.long	14
	.long	0
.globl Main.main16_info
.type Main.main16_info, @function
Main.main16_info:
_c8NN:
	movl $Main.main1_closure+1,%r14d
	jmp GHC.TopHandler.runMainIO1_info
	.size Main.main16_info, .-Main.main16_info


==================== Asm code ====================
2019-11-05 16:48:08.410266889 UTC

.section .data
.align 8
.align 1
.globl Main.main16_closure
.type Main.main16_closure, @object
Main.main16_closure:
	.quad	Main.main16_info
	.quad	GHC.TopHandler.runMainIO1_closure
	.quad	Main.main1_closure
	.quad	0


==================== Asm code ====================
2019-11-05 16:48:08.410981839 UTC

.section .text
.align 8
.align 8
	.quad	4294967299
	.quad	0
	.long	14
	.long	Main.main16_closure-(:Main.main_info)+0
.globl :Main.main_info
.type :Main.main_info, @function
:Main.main_info:
_c8NX:
	jmp Main.main16_info
	.size :Main.main_info, .-:Main.main_info


==================== Asm code ====================
2019-11-05 16:48:08.411090501 UTC

.section .data
.align 8
.align 1
.globl :Main.main_closure
.type :Main.main_closure, @object
:Main.main_closure:
	.quad	:Main.main_info
	.quad	0

