
==================== Simplifier ====================
2019-11-05 16:48:07.740502976 UTC
  Max iterations = 4
  SimplMode {Phase = InitialPhase [Gentle],
             inline,
             rules,
             eta-expand,
             no case-of-case}
Result size of Simplifier
  = {terms: 186, types: 225, coercions: 47, joins: 1/2}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 730 0}]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Vs
      of
      { (# ipv_a7Vv, ipv1_a7Vw #) ->
      case ((case ($dNFData_a5LK
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                           :: NFData a_a5LI ~R# (a_a5LI -> ())))
                    f_a1VF
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Vv
      of
      { (# ipv_X7VW, ipv1_X7VY #) ->
      let {
        duration_a1VJ :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
        duration_a1VJ
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              " milli seconds -- "#
                              c_a7X5
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 " pico seconds"# c_a7X5 n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_a1VJ
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_a1VJ 1000000000)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7VW
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (GHC.Base.build
         @ Char
         (\ (@ b_a7WK) ->
            ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7WK "foo"#))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.5.3:GHC.Types.D# 5.0##)
      441

-- RHS size: {terms: 82, types: 97, coercions: 16, joins: 1/1}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case measure_s7Y1
             @ String
             ((\ (eta_a801 :: [Char]) ->
                 joinrec {
                   go_a802 [Occ=LoopBreaker] :: [Char] -> ()
                   [LclId[JoinId(1)],
                    Arity=1,
                    Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                            WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 44 10}]
                   go_a802 (ds_a803 :: [Char])
                     = case ds_a803 of {
                         [] -> ghc-prim-0.5.3:GHC.Tuple.();
                         : x_a807 xs_a808 ->
                           case case x_a807 of { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW ->
                                ghc-prim-0.5.3:GHC.Tuple.()
                                }
                           of
                           { () ->
                           jump go_a802 xs_a808
                           }
                       }; } in
                 jump go_a802 eta_a801)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "stimes : "#))
             testStimes
             s_a7ZN
      of
      { (# ipv_a7ZQ, ipv1_a7ZR #) ->
      case measure_s7Y1
             @ Double
             ((\ (ds_a80j :: Double) ->
                 case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
                 ghc-prim-0.5.3:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "fractional power 1 : "#))
             testFractionalPower
             ipv_a7ZQ
      of
      { (# ipv_X80i, ipv1_X80k #) ->
      case measure_s7Y1
             @ Double
             ((\ (ds_a80j :: Double) ->
                 case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
                 ghc-prim-0.5.3:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "fractional power 2 : "#))
             testFractionalPower
             ipv_X80i
      of
      { (# ipv_X80n, ipv1_X80p #) ->
      case measure_s7Y1
             @ Double
             ((\ (ds_a80j :: Double) ->
                 case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
                 ghc-prim-0.5.3:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "fractional power 3 : "#))
             testFractionalPower
             ipv_X80n
      of
      { (# ipv_X80s, ipv1_X80u #) ->
      measure_s7Y1
        @ Integer
        ((\ (ds_a80u :: Integer) ->
            case ds_a80u of { __DEFAULT -> ghc-prim-0.5.3:GHC.Tuple.() })
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        (GHC.Base.build
           @ Char
           (\ (@ b_a7WK) ->
              ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                @ b_a7WK "integral power : "#))
        testIntegralPower
        ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())



==================== Levels added: ====================
2019-11-05 16:48:07.76188954 UTC

<$dNFData_s8bC,<0,0>>
<$dNFData_s8bC,<0,0>>
  = (\ <eta_a801,<1,0>> ->
       letrec {
         <go_s8cO,F<0,0>>
         <go_s8cO,F<0,0>>
           = \ <ds_a803,<1,0>> ->
               case ds_a803 of <wild_a804,<1,2>> {
                 [] -> GHC.Tuple.();
                 : <x_a807,<1,2>> <xs_a808,<1,2>> ->
                   case case x_a807 of <ds1_a7ZU,<1,4>>
                        { GHC.Types.C# <ipv_a7ZW,<1,4>> ->
                        GHC.Tuple.()
                        }
                   of <wild1_a80a,<1,3>>
                   { () ->
                   go_s8cO xs_a808
                   }
               }; } in
       go_s8cO eta_a801)
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[GHC.Types.Char]>_N)
            :: ([GHC.Types.Char] -> ())
               ~R# Control.DeepSeq.NFData [GHC.Types.Char]);
<$dNFData_s8bw,<0,0>>
<$dNFData_s8bw,<0,0>>
  = (\ <ds_a80j,<1,0>> ->
       case ds_a80j of <ds1_a80k,<1,2>> { GHC.Types.D# <ipv_a80m,<1,2>> ->
       GHC.Tuple.()
       })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
            :: (GHC.Types.Double -> ())
               ~R# Control.DeepSeq.NFData GHC.Types.Double);
<$dNFData_s8bs,<0,0>>
<$dNFData_s8bs,<0,0>>
  = (\ <ds_a80u,<1,0>> ->
       case ds_a80u of <ds1_a80v,<1,2>> { __DEFAULT -> GHC.Tuple.() })
    `cast` (Sym (Control.DeepSeq.N:NFData[0]
                     <GHC.Integer.Type.Integer>_N)
            :: (GHC.Integer.Type.Integer -> ())
               ~R# Control.DeepSeq.NFData GHC.Integer.Type.Integer);
<$dNum1_s8bO,<0,0>>
<$dNum1_s8bO,<0,0>>
  = GHC.Real.$p1Fractional
      @ GHC.Types.Double GHC.Float.$fFractionalDouble;
<$seven_s8cz,<0,0>>
<$seven_s8cz,<0,0>>
  = let {
      <$dReal_s8cQ,F<0,0>>
      <$dReal_s8cQ,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
    let {
      <$dNum_s8cS,F<0,0>>
      <$dNum_s8cS,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal_s8cQ } in
    let {
      <$dEq_s8cU,F<0,0>>
      <$dEq_s8cU,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal_s8cQ } in
    let {
      <$dEq1_s8cW,F<0,0>>
      <$dEq1_s8cW,F<0,0>>
        = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dEq_s8cU } in
    \ <n_a8cu,<1,0>> ->
      GHC.Classes.==
        @ GHC.Integer.Type.Integer
        $dEq1_s8cW
        (GHC.Real.rem
           @ GHC.Integer.Type.Integer
           GHC.Real.$fIntegralInteger
           n_a8cu
           (let {
              <lvl_s8cY,F<0,0>>
              <lvl_s8cY,F<0,0>>
                = GHC.Num.fromInteger
                    @ GHC.Integer.Type.Integer
                    $dNum_s8cS
                    (let {
                       <lvl_s8cX,F<0,0>>
                       <lvl_s8cX,F<0,0>> = 2 } in
                     lvl_s8cX) } in
            lvl_s8cY))
        (let {
           <lvl_s8d0,F<0,0>>
           <lvl_s8d0,F<0,0>>
             = GHC.Num.fromInteger
                 @ GHC.Integer.Type.Integer
                 $dNum_s8cS
                 (let {
                    <lvl_s8cZ,F<0,0>>
                    <lvl_s8cZ,F<0,0>> = 0 } in
                  lvl_s8cZ) } in
         lvl_s8d0);
<$s^_s8bV,<0,0>>
<$s^_s8bV,<0,0>>
  = let {
      <$dReal_s8d2,F<0,0>>
      <$dReal_s8d2,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
    let {
      <$dNum1_s8d4,F<0,0>>
      <$dNum1_s8d4,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal_s8d2 } in
    let {
      <$dOrd_s8d6,F<0,0>>
      <$dOrd_s8d6,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal_s8d2 } in
    let {
      <$dEq_s8d8,F<0,0>>
      <$dEq_s8d8,F<0,0>>
        = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dOrd_s8d6 } in
    \ <x0_a7Tw,<1,0>> <y0_a7Tx,<1,0>> ->
      case GHC.Classes.<
             @ GHC.Integer.Type.Integer
             $dOrd_s8d6
             y0_a7Tx
             (let {
                <lvl_s8da,F<0,0>>
                <lvl_s8da,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Integer.Type.Integer
                      $dNum1_s8d4
                      (let {
                         <lvl_s8d9,F<0,0>>
                         <lvl_s8d9,F<0,0>> = 0 } in
                       lvl_s8d9) } in
              lvl_s8da)
      of <wild_a7Ty,<1,2>> {
        GHC.Types.False ->
          case GHC.Classes.==
                 @ GHC.Integer.Type.Integer
                 $dEq_s8d8
                 y0_a7Tx
                 (let {
                    <lvl_s8dc,F<0,0>>
                    <lvl_s8dc,F<0,0>>
                      = GHC.Num.fromInteger
                          @ GHC.Integer.Type.Integer
                          $dNum1_s8d4
                          (let {
                             <lvl_s8db,F<0,0>>
                             <lvl_s8db,F<0,0>> = 0 } in
                           lvl_s8db) } in
                  lvl_s8dc)
          of <wild1_a7TB,<1,3>> {
            GHC.Types.False ->
              let {
                <$dReal1_s8de,F<0,0>>
                <$dReal1_s8de,F<0,0>>
                  = GHC.Real.$p1Integral
                      @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
              let {
                <$dNum2_s8dg,F<0,0>>
                <$dNum2_s8dg,F<0,0>>
                  = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal1_s8de } in
              let {
                <$dEq1_s8di,F<0,0>>
                <$dEq1_s8di,F<0,0>>
                  = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal1_s8de } in
              let {
                <$dEq2_s8dk,F<0,0>>
                <$dEq2_s8dk,F<0,0>>
                  = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dEq1_s8di } in
              letrec {
                <f_s8dm,F<0,0>>
                <f_s8dm,F<0,0>>
                  = \ <x_a7TJ,<1,0>> <y_a7TK,<1,0>> ->
                      case GHC.Real.even
                             @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger y_a7TK
                      of <wild2_a7TN,<1,2>> {
                        GHC.Types.False ->
                          case GHC.Classes.==
                                 @ GHC.Integer.Type.Integer
                                 $dEq2_s8dk
                                 y_a7TK
                                 (let {
                                    <lvl_s8do,F<0,0>>
                                    <lvl_s8do,F<0,0>>
                                      = GHC.Num.fromInteger
                                          @ GHC.Integer.Type.Integer
                                          $dNum2_s8dg
                                          (let {
                                             <lvl_s8dn,F<0,0>>
                                             <lvl_s8dn,F<0,0>> = 1 } in
                                           lvl_s8dn) } in
                                  lvl_s8do)
                          of <wild3_a7TQ,<1,3>> {
                            GHC.Types.False ->
                              let {
                                <$dReal2_s8dq,F<0,0>>
                                <$dReal2_s8dq,F<0,0>>
                                  = GHC.Real.$p1Integral
                                      @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
                              let {
                                <$dNum3_s8ds,F<0,0>>
                                <$dNum3_s8ds,F<0,0>>
                                  = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal2_s8dq } in
                              let {
                                <$dEq3_s8du,F<0,0>>
                                <$dEq3_s8du,F<0,0>>
                                  = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal2_s8dq } in
                              let {
                                <$dEq4_s8dw,F<0,0>>
                                <$dEq4_s8dw,F<0,0>>
                                  = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dEq3_s8du } in
                              letrec {
                                <g1_s8dy,F<0,0>>
                                <g1_s8dy,F<0,0>>
                                  = \ <x1_a7TY,<1,0>> <y1_a7TZ,<1,0>> <z_a7U0,<1,0>> ->
                                      case GHC.Real.even
                                             @ GHC.Integer.Type.Integer
                                             GHC.Real.$fIntegralInteger
                                             y1_a7TZ
                                      of <wild4_a7U1,<1,2>> {
                                        GHC.Types.False ->
                                          case GHC.Classes.==
                                                 @ GHC.Integer.Type.Integer
                                                 $dEq4_s8dw
                                                 y1_a7TZ
                                                 (let {
                                                    <lvl_s8dA,F<0,0>>
                                                    <lvl_s8dA,F<0,0>>
                                                      = GHC.Num.fromInteger
                                                          @ GHC.Integer.Type.Integer
                                                          $dNum3_s8ds
                                                          (let {
                                                             <lvl_s8dz,F<0,0>>
                                                             <lvl_s8dz,F<0,0>> = 1 } in
                                                           lvl_s8dz) } in
                                                  lvl_s8dA)
                                          of <wild5_a7U4,<1,3>> {
                                            GHC.Types.False ->
                                              g1_s8dy
                                                (GHC.Num.*
                                                   @ GHC.Types.Double $dNum1_s8bO x1_a7TY x1_a7TY)
                                                (GHC.Real.quot
                                                   @ GHC.Integer.Type.Integer
                                                   GHC.Real.$fIntegralInteger
                                                   y1_a7TZ
                                                   (let {
                                                      <lvl_s8dC,F<0,0>>
                                                      <lvl_s8dC,F<0,0>>
                                                        = GHC.Num.fromInteger
                                                            @ GHC.Integer.Type.Integer
                                                            $dNum3_s8ds
                                                            (let {
                                                               <lvl_s8dB,F<0,0>>
                                                               <lvl_s8dB,F<0,0>> = 2 } in
                                                             lvl_s8dB) } in
                                                    lvl_s8dC))
                                                (GHC.Num.*
                                                   @ GHC.Types.Double $dNum1_s8bO x1_a7TY z_a7U0);
                                            GHC.Types.True ->
                                              GHC.Num.*
                                                @ GHC.Types.Double $dNum1_s8bO x1_a7TY z_a7U0
                                          };
                                        GHC.Types.True ->
                                          g1_s8dy
                                            (GHC.Num.*
                                               @ GHC.Types.Double $dNum1_s8bO x1_a7TY x1_a7TY)
                                            (GHC.Real.quot
                                               @ GHC.Integer.Type.Integer
                                               GHC.Real.$fIntegralInteger
                                               y1_a7TZ
                                               (let {
                                                  <lvl_s8dE,F<0,0>>
                                                  <lvl_s8dE,F<0,0>>
                                                    = GHC.Num.fromInteger
                                                        @ GHC.Integer.Type.Integer
                                                        $dNum3_s8ds
                                                        (let {
                                                           <lvl_s8dD,F<0,0>>
                                                           <lvl_s8dD,F<0,0>> = 2 } in
                                                         lvl_s8dD) } in
                                                lvl_s8dE))
                                            z_a7U0
                                      }; } in
                              g1_s8dy
                                (GHC.Num.* @ GHC.Types.Double $dNum1_s8bO x_a7TJ x_a7TJ)
                                (GHC.Real.quot
                                   @ GHC.Integer.Type.Integer
                                   GHC.Real.$fIntegralInteger
                                   y_a7TK
                                   (let {
                                      <lvl_s8dG,F<0,0>>
                                      <lvl_s8dG,F<0,0>>
                                        = GHC.Num.fromInteger
                                            @ GHC.Integer.Type.Integer
                                            $dNum2_s8dg
                                            (let {
                                               <lvl_s8dF,F<0,0>>
                                               <lvl_s8dF,F<0,0>> = 2 } in
                                             lvl_s8dF) } in
                                    lvl_s8dG))
                                x_a7TJ;
                            GHC.Types.True -> x_a7TJ
                          };
                        GHC.Types.True ->
                          f_s8dm
                            (GHC.Num.* @ GHC.Types.Double $dNum1_s8bO x_a7TJ x_a7TJ)
                            (GHC.Real.quot
                               @ GHC.Integer.Type.Integer
                               GHC.Real.$fIntegralInteger
                               y_a7TK
                               (let {
                                  <lvl_s8dI,F<0,0>>
                                  <lvl_s8dI,F<0,0>>
                                    = GHC.Num.fromInteger
                                        @ GHC.Integer.Type.Integer
                                        $dNum2_s8dg
                                        (let {
                                           <lvl_s8dH,F<0,0>>
                                           <lvl_s8dH,F<0,0>> = 2 } in
                                         lvl_s8dH) } in
                                lvl_s8dI))
                      }; } in
              f_s8dm x0_a7Tw y0_a7Tx;
            GHC.Types.True ->
              let {
                <lvl_s8dK,F<0,0>>
                <lvl_s8dK,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Types.Double
                      $dNum1_s8bO
                      (let {
                         <lvl_s8dJ,F<0,0>>
                         <lvl_s8dJ,F<0,0>> = 1 } in
                       lvl_s8dJ) } in
              lvl_s8dK
          };
        GHC.Types.True ->
          let {
            <lvl_s8dM,F<0,0>>
            <lvl_s8dM,F<0,0>>
              = GHC.Err.errorWithoutStackTrace
                  @ 'GHC.Types.LiftedRep
                  @ GHC.Types.Double
                  (GHC.CString.unpackCString#
                     (let {
                        <lvl_s8dL,F<0,0>>
                        <lvl_s8dL,F<0,0>> = "Negative exponent"# } in
                      lvl_s8dL)) } in
          lvl_s8dM
      };
<$s^^_s8bJ,<0,0>>
<$s^^_s8bJ,<0,0>>
  = let {
      <$dReal_s8dO,F<0,0>>
      <$dReal_s8dO,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
    let {
      <$dNum_s8dQ,F<0,0>>
      <$dNum_s8dQ,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal_s8dO } in
    let {
      <$dOrd_s8dS,F<0,0>>
      <$dOrd_s8dS,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal_s8dO } in
    \ <x_a7Tg,<1,0>> <n_a7Th,<1,0>> ->
      case GHC.Classes.>=
             @ GHC.Integer.Type.Integer
             $dOrd_s8dS
             n_a7Th
             (let {
                <lvl_s8dU,F<0,0>>
                <lvl_s8dU,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Integer.Type.Integer
                      $dNum_s8dQ
                      (let {
                         <lvl_s8dT,F<0,0>>
                         <lvl_s8dT,F<0,0>> = 0 } in
                       lvl_s8dT) } in
              lvl_s8dU)
      of <wild_a7Ti,<1,2>> {
        GHC.Types.False ->
          GHC.Real.recip
            @ GHC.Types.Double
            GHC.Float.$fFractionalDouble
            (GHC.Real.^
               @ GHC.Types.Double
               @ GHC.Integer.Type.Integer
               $dNum1_s8bO
               GHC.Real.$fIntegralInteger
               x_a7Tg
               (GHC.Num.negate @ GHC.Integer.Type.Integer $dNum_s8dQ n_a7Th));
        GHC.Types.True ->
          GHC.Real.^
            @ GHC.Types.Double
            @ GHC.Integer.Type.Integer
            $dNum1_s8bO
            GHC.Real.$fIntegralInteger
            x_a7Tg
            n_a7Th
      };
<$trModule_s7UU,<0,0>>
<$trModule_s7UU,<0,0>> = "main"#
<$trModule_s7UV,<0,0>>
<$trModule_s7UV,<0,0>> = GHC.Types.TrNameS $trModule_s7UU
<$trModule_s7UW,<0,0>>
<$trModule_s7UW,<0,0>> = "Main"#
<$trModule_s7UX,<0,0>>
<$trModule_s7UX,<0,0>> = GHC.Types.TrNameS $trModule_s7UW
<Main.$trModule,<0,0>>
<Main.$trModule,<0,0>>
  = GHC.Types.Module $trModule_s7UV $trModule_s7UX
<$smeasure_s8bD,<0,0>>
<$smeasure_s8bD,<0,0>>
  = \ <description_a1VE,<1,0>> <f_a1VF,<1,0>> <s_a7Vs,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Vs
      of <ds1_a7Vt,<1,2>>
      { (# <ipv_a7Vv,<1,2>>, <ipv1_a7Vw,<1,2>> #) ->
      case ((case ($dNFData_s8bC
                   `cast` (Control.DeepSeq.N:NFData[0] <GHC.Base.String>_N
                           :: Control.DeepSeq.NFData GHC.Base.String
                              ~R# (GHC.Base.String -> ())))
                    f_a1VF
             of <wild_a7Si,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Vv
      of <ds1_X7VS,<1,3>>
      { (# <ipv_X7VW,<1,3>>, <ipv1_X7VY,<1,3>> #) ->
      let {
        <duration_s8bF,<1,4>>
        <duration_s8bF,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7X4,<1,7>> <c_a7X5,<1,7>> <n_a7X6,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7X4
                           c_a7X5
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              (let {
                                 <lvl_s8dV,F<0,0>>
                                 <lvl_s8dV,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8dV)
                              c_a7X5
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7X4
                                 c_a7X5
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7X4
                                    (let {
                                       <lvl_s8dW,F<0,0>>
                                       <lvl_s8dW,F<0,0>> = " pico seconds"# } in
                                     lvl_s8dW)
                                    c_a7X5
                                    n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8bF
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8bF
                                 (let {
                                    <lvl_s8dX,F<0,0>>
                                    <lvl_s8dX,F<0,0>> = 1000000000 } in
                                  lvl_s8dX))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7VW
      }
      }
<$smeasure_s8bx,<0,0>>
<$smeasure_s8bx,<0,0>>
  = \ <description_a1VE,<1,0>> <f_a1VF,<1,0>> <s_a7Vs,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Vs
      of <ds1_a7Vt,<1,2>>
      { (# <ipv_a7Vv,<1,2>>, <ipv1_a7Vw,<1,2>> #) ->
      case ((case ($dNFData_s8bw
                   `cast` (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N
                           :: Control.DeepSeq.NFData GHC.Types.Double
                              ~R# (GHC.Types.Double -> ())))
                    f_a1VF
             of <wild_a7Si,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Vv
      of <ds1_X7VS,<1,3>>
      { (# <ipv_X7VW,<1,3>>, <ipv1_X7VY,<1,3>> #) ->
      let {
        <duration_s8bz,<1,4>>
        <duration_s8bz,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7X4,<1,7>> <c_a7X5,<1,7>> <n_a7X6,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7X4
                           c_a7X5
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              (let {
                                 <lvl_s8dY,F<0,0>>
                                 <lvl_s8dY,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8dY)
                              c_a7X5
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7X4
                                 c_a7X5
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7X4
                                    (let {
                                       <lvl_s8dZ,F<0,0>>
                                       <lvl_s8dZ,F<0,0>> = " pico seconds"# } in
                                     lvl_s8dZ)
                                    c_a7X5
                                    n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8bz
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8bz
                                 (let {
                                    <lvl_s8e0,F<0,0>>
                                    <lvl_s8e0,F<0,0>> = 1000000000 } in
                                  lvl_s8e0))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7VW
      }
      }
<$smeasure_s8bt,<0,0>>
<$smeasure_s8bt,<0,0>>
  = \ <description_a1VE,<1,0>> <f_a1VF,<1,0>> <s_a7Vs,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Vs
      of <ds1_a7Vt,<1,2>>
      { (# <ipv_a7Vv,<1,2>>, <ipv1_a7Vw,<1,2>> #) ->
      case ((case ($dNFData_s8bs
                   `cast` (Control.DeepSeq.N:NFData[0] <GHC.Integer.Type.Integer>_N
                           :: Control.DeepSeq.NFData GHC.Integer.Type.Integer
                              ~R# (GHC.Integer.Type.Integer -> ())))
                    f_a1VF
             of <wild_a7Si,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Vv
      of <ds1_X7VS,<1,3>>
      { (# <ipv_X7VW,<1,3>>, <ipv1_X7VY,<1,3>> #) ->
      let {
        <duration_s8bv,<1,4>>
        <duration_s8bv,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7X4,<1,7>> <c_a7X5,<1,7>> <n_a7X6,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7X4
                           c_a7X5
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              (let {
                                 <lvl_s8e1,F<0,0>>
                                 <lvl_s8e1,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8e1)
                              c_a7X5
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7X4
                                 c_a7X5
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7X4
                                    (let {
                                       <lvl_s8e2,F<0,0>>
                                       <lvl_s8e2,F<0,0>> = " pico seconds"# } in
                                     lvl_s8e2)
                                    c_a7X5
                                    n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8bv
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8bv
                                 (let {
                                    <lvl_s8e3,F<0,0>>
                                    <lvl_s8e3,F<0,0>> = 1000000000 } in
                                  lvl_s8e3))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7VW
      }
      }
<measure_s7Y1,<0,0>>
<measure_s7Y1,<0,0>>
  = \ <a_a5LI,<1,0>>
      <$dNFData_a5LK,<1,0>>
      <description_a1VE,<1,0>>
      <f_a1VF,<1,0>>
      <s_a7Vs,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Vs
      of <ds1_a7Vt,<1,2>>
      { (# <ipv_a7Vv,<1,2>>, <ipv1_a7Vw,<1,2>> #) ->
      case ((case ($dNFData_a5LK
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                           :: Control.DeepSeq.NFData a_a5LI ~R# (a_a5LI -> ())))
                    f_a1VF
             of <wild_a7Si,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Vv
      of <ds1_X7VS,<1,3>>
      { (# <ipv_X7VW,<1,3>>, <ipv1_X7VY,<1,3>> #) ->
      let {
        <duration_s8br,<1,4>>
        <duration_s8br,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7X4,<1,7>> <c_a7X5,<1,7>> <n_a7X6,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7X4
                           c_a7X5
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              (let {
                                 <lvl_s8e4,F<0,0>>
                                 <lvl_s8e4,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8e4)
                              c_a7X5
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7X4
                                 c_a7X5
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7X4
                                    (let {
                                       <lvl_s8e5,F<0,0>>
                                       <lvl_s8e5,F<0,0>> = " pico seconds"# } in
                                     lvl_s8e5)
                                    c_a7X5
                                    n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8br
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8br
                                 (let {
                                    <lvl_s8e6,F<0,0>>
                                    <lvl_s8e6,F<0,0>> = 1000000000 } in
                                  lvl_s8e6))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7VW
      }
      }
<Main.measure,<0,0>>
<Main.measure,<0,0>>
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <Control.DeepSeq.NFData a>_R
            ->_R <GHC.Base.String>_R
            ->_R <a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Control.DeepSeq.NFData a =>
                GHC.Base.String
                -> a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# (forall a.
                    Control.DeepSeq.NFData a =>
                    GHC.Base.String -> a -> GHC.Types.IO ()))
<Main.testStimes,<0,0>>
<Main.testStimes,<0,0>>
  = GHC.Magic.noinline
      @ (forall b a. GHC.Real.Integral b => b -> [a] -> [a])
      Data.Semigroup.Internal.stimesList
      @ GHC.Integer.Type.Integer
      @ GHC.Types.Char
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8e7,F<0,0>>
         <lvl_s8e7,F<0,0>> = 1000000 } in
       lvl_s8e7)
      (let {
         <lvl_s8ea,F<0,0>>
         <lvl_s8ea,F<0,0>>
           = GHC.Base.build
               @ GHC.Types.Char
               (let {
                  <lvl_s8e9,F<0,0>>
                  <lvl_s8e9,F<0,0>>
                    = \ <b_a7WK,<0,1>> ->
                        GHC.CString.unpackFoldrCString#
                          @ b_a7WK
                          (let {
                             <lvl_s8e8,F<0,0>>
                             <lvl_s8e8,F<0,0>> = "foo"# } in
                           lvl_s8e8) } in
                lvl_s8e9) } in
       lvl_s8ea)
<Main.testIntegralPower,<0,0>>
<Main.testIntegralPower,<0,0>>
  = GHC.Real.^
      @ GHC.Integer.Type.Integer
      @ GHC.Integer.Type.Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8eb,F<0,0>>
         <lvl_s8eb,F<0,0>> = 3 } in
       lvl_s8eb)
      (let {
         <lvl_s8ec,F<0,0>>
         <lvl_s8ec,F<0,0>> = 1000000 } in
       lvl_s8ec)
<Main.testFractionalPower,<0,0>>
<Main.testFractionalPower,<0,0>>
  = GHC.Real.^^
      @ GHC.Types.Double
      @ GHC.Integer.Type.Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8ed,F<0,0>>
         <lvl_s8ed,F<0,0>> = GHC.Types.D# 5.0## } in
       lvl_s8ed)
      (let {
         <lvl_s8ee,F<0,0>>
         <lvl_s8ee,F<0,0>> = 441 } in
       lvl_s8ee)
<main_s80z,<0,0>>
<main_s80z,<0,0>>
  = \ <s_a7ZN,<0,1>> ->
      case measure_s7Y1
             @ GHC.Base.String
             ((let {
                 <lvl_s8eh,F<0,0>>
                 <lvl_s8eh,F<0,0>>
                   = \ <eta_a801,<1,0>> ->
                       letrec {
                         <go_s8eg,F<0,0>>
                         <go_s8eg,F<0,0>>
                           = \ <ds_a803,<1,0>> ->
                               case ds_a803 of <wild_a804,<1,2>> {
                                 [] -> GHC.Tuple.();
                                 : <x_a807,<1,2>> <xs_a808,<1,2>> ->
                                   case case x_a807 of <ds1_a7ZU,<1,4>>
                                        { GHC.Types.C# <ipv_a7ZW,<1,4>> ->
                                        GHC.Tuple.()
                                        }
                                   of <wild1_a80a,<1,3>>
                                   { () ->
                                   go_s8eg xs_a808
                                   }
                               }; } in
                       go_s8eg eta_a801 } in
               lvl_s8eh)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[GHC.Types.Char]>_N)
                      :: ([GHC.Types.Char] -> ())
                         ~R# Control.DeepSeq.NFData [GHC.Types.Char]))
             (let {
                <lvl_s8ek,F<0,0>>
                <lvl_s8ek,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8ej,F<0,0>>
                         <lvl_s8ej,F<0,0>>
                           = \ <b_a7WK,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7WK
                                 (let {
                                    <lvl_s8ei,F<0,0>>
                                    <lvl_s8ei,F<0,0>> = "stimes : "# } in
                                  lvl_s8ei) } in
                       lvl_s8ej) } in
              lvl_s8ek)
             Main.testStimes
             s_a7ZN
      of <ds1_a7ZO,<0,3>>
      { (# <ipv_a7ZQ,<0,3>>, <ipv1_a7ZR,<0,3>> #) ->
      case measure_s7Y1
             @ GHC.Types.Double
             ((let {
                 <lvl_s8el,F<0,0>>
                 <lvl_s8el,F<0,0>>
                   = \ <ds_a80j,<1,0>> ->
                       case ds_a80j of <ds1_a80k,<1,2>> { GHC.Types.D# <ipv_a80m,<1,2>> ->
                       GHC.Tuple.()
                       } } in
               lvl_s8el)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8eo,F<0,0>>
                <lvl_s8eo,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8en,F<0,0>>
                         <lvl_s8en,F<0,0>>
                           = \ <b_a7WK,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7WK
                                 (let {
                                    <lvl_s8em,F<0,0>>
                                    <lvl_s8em,F<0,0>> = "fractional power 1 : "# } in
                                  lvl_s8em) } in
                       lvl_s8en) } in
              lvl_s8eo)
             Main.testFractionalPower
             ipv_a7ZQ
      of <ds1_X80e,<0,4>>
      { (# <ipv_X80i,<0,4>>, <ipv1_X80k,<0,4>> #) ->
      case measure_s7Y1
             @ GHC.Types.Double
             ((let {
                 <lvl_s8ep,F<0,0>>
                 <lvl_s8ep,F<0,0>>
                   = \ <ds_a80j,<1,0>> ->
                       case ds_a80j of <ds1_a80k,<1,2>> { GHC.Types.D# <ipv_a80m,<1,2>> ->
                       GHC.Tuple.()
                       } } in
               lvl_s8ep)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8es,F<0,0>>
                <lvl_s8es,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8er,F<0,0>>
                         <lvl_s8er,F<0,0>>
                           = \ <b_a7WK,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7WK
                                 (let {
                                    <lvl_s8eq,F<0,0>>
                                    <lvl_s8eq,F<0,0>> = "fractional power 2 : "# } in
                                  lvl_s8eq) } in
                       lvl_s8er) } in
              lvl_s8es)
             Main.testFractionalPower
             ipv_X80i
      of <ds1_X80j,<0,5>>
      { (# <ipv_X80n,<0,5>>, <ipv1_X80p,<0,5>> #) ->
      case measure_s7Y1
             @ GHC.Types.Double
             ((let {
                 <lvl_s8et,F<0,0>>
                 <lvl_s8et,F<0,0>>
                   = \ <ds_a80j,<1,0>> ->
                       case ds_a80j of <ds1_a80k,<1,2>> { GHC.Types.D# <ipv_a80m,<1,2>> ->
                       GHC.Tuple.()
                       } } in
               lvl_s8et)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8ew,F<0,0>>
                <lvl_s8ew,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8ev,F<0,0>>
                         <lvl_s8ev,F<0,0>>
                           = \ <b_a7WK,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7WK
                                 (let {
                                    <lvl_s8eu,F<0,0>>
                                    <lvl_s8eu,F<0,0>> = "fractional power 3 : "# } in
                                  lvl_s8eu) } in
                       lvl_s8ev) } in
              lvl_s8ew)
             Main.testFractionalPower
             ipv_X80n
      of <ds1_X80o,<0,6>>
      { (# <ipv_X80s,<0,6>>, <ipv1_X80u,<0,6>> #) ->
      measure_s7Y1
        @ GHC.Integer.Type.Integer
        ((let {
            <lvl_s8ex,F<0,0>>
            <lvl_s8ex,F<0,0>>
              = \ <ds_a80u,<1,0>> ->
                  case ds_a80u of <ds1_a80v,<1,2>> { __DEFAULT -> GHC.Tuple.() } } in
          lvl_s8ex)
         `cast` (Sym (Control.DeepSeq.N:NFData[0]
                          <GHC.Integer.Type.Integer>_N)
                 :: (GHC.Integer.Type.Integer -> ())
                    ~R# Control.DeepSeq.NFData GHC.Integer.Type.Integer))
        (let {
           <lvl_s8eA,F<0,0>>
           <lvl_s8eA,F<0,0>>
             = GHC.Base.build
                 @ GHC.Types.Char
                 (let {
                    <lvl_s8ez,F<0,0>>
                    <lvl_s8ez,F<0,0>>
                      = \ <b_a7WK,<0,1>> ->
                          GHC.CString.unpackFoldrCString#
                            @ b_a7WK
                            (let {
                               <lvl_s8ey,F<0,0>>
                               <lvl_s8ey,F<0,0>> = "integral power : "# } in
                             lvl_s8ey) } in
                  lvl_s8ez) } in
         lvl_s8eA)
        Main.testIntegralPower
        ipv_X80s
      }
      }
      }
      }
<Main.main,<0,0>>
<Main.main,<0,0>>
  = main_s80z
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())
<main_s8b7,<0,0>>
<main_s8b7,<0,0>>
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# GHC.Types.IO ()))
<:Main.main,<0,0>>
<:Main.main,<0,0>>
  = main_s8b7
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())


==================== Float out(FOS {Lam = Just 0, Consts = True, OverSatApps = False}) ====================
2019-11-05 16:48:07.819077006 UTC

Result size of Float out(FOS {Lam = Just 0,
                              Consts = True,
                              OverSatApps = False})
  = {terms: 738, types: 670, coercions: 84, joins: 0/4}

Rec {
-- RHS size: {terms: 14, types: 10, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 xs_a808 ->
          case case x_a807 of { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW ->
               ghc-prim-0.5.3:GHC.Tuple.()
               }
          of
          { () ->
          go_s8cO xs_a808
          }
      }

-- RHS size: {terms: 3, types: 2, coercions: 4, joins: 0/0}
$dNFData_s8bC :: NFData String
[LclId]
$dNFData_s8bC
  = (\ (eta_a801 :: [Char]) -> go_s8cO eta_a801)
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
            :: ([Char] -> ()) ~R# NFData [Char])

-- RHS size: {terms: 5, types: 3, coercions: 3, joins: 0/0}
$dNFData_s8bw :: NFData Double
[LclId]
$dNFData_s8bw
  = (\ (ds_a80j :: Double) ->
       case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
       ghc-prim-0.5.3:GHC.Tuple.()
       })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
            :: (Double -> ()) ~R# NFData Double)

-- RHS size: {terms: 5, types: 2, coercions: 3, joins: 0/0}
$dNFData_s8bs :: NFData Integer
[LclId]
$dNFData_s8bs
  = (\ (ds_a80u :: Integer) ->
       case ds_a80u of { __DEFAULT -> ghc-prim-0.5.3:GHC.Tuple.() })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
            :: (Integer -> ()) ~R# NFData Integer)

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8bO [Occ=OnceL*] :: Num Double
[LclId]
$dNum1_s8bO
  = GHC.Real.$p1Fractional @ Double GHC.Float.$fFractionalDouble

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8cQ :: Real Integer
[LclId]
$dReal_s8cQ
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum_s8cS :: Num Integer
[LclId]
$dNum_s8cS = GHC.Real.$p1Real @ Integer $dReal_s8cQ

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq_s8cU [Occ=OnceL] :: Ord Integer
[LclId]
$dEq_s8cU = GHC.Real.$p2Real @ Integer $dReal_s8cQ

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq1_s8cW [Occ=OnceL] :: Eq Integer
[LclId]
$dEq1_s8cW = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dEq_s8cU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cX :: Integer
[LclId]
lvl_s8cX = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8cY :: Integer
[LclId]
lvl_s8cY = fromInteger @ Integer $dNum_s8cS lvl_s8cX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cZ :: Integer
[LclId]
lvl_s8cZ = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8d0 :: Integer
[LclId]
lvl_s8d0 = fromInteger @ Integer $dNum_s8cS lvl_s8cZ

-- RHS size: {terms: 8, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId, Arity=1]
$seven_s8cz
  = \ (n_a8cu [Occ=Once] :: Integer) ->
      ==
        @ Integer
        $dEq1_s8cW
        (rem @ Integer GHC.Real.$fIntegralInteger n_a8cu lvl_s8cY)
        lvl_s8d0

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8d2 :: Real Integer
[LclId]
$dReal_s8d2
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8d4 :: Num Integer
[LclId]
$dNum1_s8d4 = GHC.Real.$p1Real @ Integer $dReal_s8d2

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dOrd_s8d6 :: Ord Integer
[LclId]
$dOrd_s8d6 = GHC.Real.$p2Real @ Integer $dReal_s8d2

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq_s8d8 [Occ=OnceL] :: Eq Integer
[LclId]
$dEq_s8d8 = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dOrd_s8d6

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal1_s8de :: Real Integer
[LclId]
$dReal1_s8de
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum2_s8dg :: Num Integer
[LclId]
$dNum2_s8dg = GHC.Real.$p1Real @ Integer $dReal1_s8de

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq1_s8di [Occ=OnceL] :: Ord Integer
[LclId]
$dEq1_s8di = GHC.Real.$p2Real @ Integer $dReal1_s8de

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq2_s8dk [Occ=OnceL] :: Eq Integer
[LclId]
$dEq2_s8dk = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dEq1_s8di

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal2_s8dq :: Real Integer
[LclId]
$dReal2_s8dq
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum3_s8ds :: Num Integer
[LclId]
$dNum3_s8ds = GHC.Real.$p1Real @ Integer $dReal2_s8dq

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq3_s8du [Occ=OnceL] :: Ord Integer
[LclId]
$dEq3_s8du = GHC.Real.$p2Real @ Integer $dReal2_s8dq

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq4_s8dw [Occ=OnceL] :: Eq Integer
[LclId]
$dEq4_s8dw = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dEq3_s8du

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dB :: Integer
[LclId]
lvl_s8dB = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId]
lvl_s8dC = fromInteger @ Integer $dNum3_s8ds lvl_s8dB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dz :: Integer
[LclId]
lvl_s8dz = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId]
lvl_s8dA = fromInteger @ Integer $dNum3_s8ds lvl_s8dz

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dD :: Integer
[LclId]
lvl_s8dD = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8dE :: Integer
[LclId]
lvl_s8dE = fromInteger @ Integer $dNum3_s8ds lvl_s8dD

-- RHS size: {terms: 43, types: 13, coercions: 0, joins: 0/0}
g1_s8dy [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId, Arity=3]
g1_s8dy
  = \ (x1_a7TY :: Double)
      (y1_a7TZ :: Integer)
      (z_a7U0 [Occ=Once*] :: Double) ->
      case even @ Integer GHC.Real.$fIntegralInteger y1_a7TZ of {
        False ->
          case == @ Integer $dEq4_s8dw y1_a7TZ lvl_s8dA of {
            False ->
              g1_s8dy
                (* @ Double $dNum1_s8bO x1_a7TY x1_a7TY)
                (quot @ Integer GHC.Real.$fIntegralInteger y1_a7TZ lvl_s8dC)
                (* @ Double $dNum1_s8bO x1_a7TY z_a7U0);
            True -> * @ Double $dNum1_s8bO x1_a7TY z_a7U0
          };
        True ->
          g1_s8dy
            (* @ Double $dNum1_s8bO x1_a7TY x1_a7TY)
            (quot @ Integer GHC.Real.$fIntegralInteger y1_a7TZ lvl_s8dE)
            z_a7U0
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dF :: Integer
[LclId]
lvl_s8dF = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8dG :: Integer
[LclId]
lvl_s8dG = fromInteger @ Integer $dNum2_s8dg lvl_s8dF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dn :: Integer
[LclId]
lvl_s8dn = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8do :: Integer
[LclId]
lvl_s8do = fromInteger @ Integer $dNum2_s8dg lvl_s8dn

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dH :: Integer
[LclId]
lvl_s8dH = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8dI :: Integer
[LclId]
lvl_s8dI = fromInteger @ Integer $dNum2_s8dg lvl_s8dH

-- RHS size: {terms: 35, types: 10, coercions: 0, joins: 0/0}
f_s8dm [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId, Arity=2]
f_s8dm
  = \ (x_a7TJ :: Double) (y_a7TK :: Integer) ->
      case even @ Integer GHC.Real.$fIntegralInteger y_a7TK of {
        False ->
          case == @ Integer $dEq2_s8dk y_a7TK lvl_s8do of {
            False ->
              g1_s8dy
                (* @ Double $dNum1_s8bO x_a7TJ x_a7TJ)
                (quot @ Integer GHC.Real.$fIntegralInteger y_a7TK lvl_s8dG)
                x_a7TJ;
            True -> x_a7TJ
          };
        True ->
          f_s8dm
            (* @ Double $dNum1_s8bO x_a7TJ x_a7TJ)
            (quot @ Integer GHC.Real.$fIntegralInteger y_a7TK lvl_s8dI)
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dJ :: Integer
[LclId]
lvl_s8dJ = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8dK :: Double
[LclId]
lvl_s8dK = fromInteger @ Double $dNum1_s8bO lvl_s8dJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8db :: Integer
[LclId]
lvl_s8db = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8dc :: Integer
[LclId]
lvl_s8dc = fromInteger @ Integer $dNum1_s8d4 lvl_s8db

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dL :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dL = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId, Str=x]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dL)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d9 :: Integer
[LclId]
lvl_s8d9 = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8da :: Integer
[LclId]
lvl_s8da = fromInteger @ Integer $dNum1_s8d4 lvl_s8d9

-- RHS size: {terms: 21, types: 6, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId, Arity=2]
$s^_s8bV
  = \ (x0_a7Tw [Occ=Once] :: Double) (y0_a7Tx :: Integer) ->
      case < @ Integer $dOrd_s8d6 y0_a7Tx lvl_s8da of {
        False ->
          case == @ Integer $dEq_s8d8 y0_a7Tx lvl_s8dc of {
            False -> f_s8dm x0_a7Tw y0_a7Tx;
            True -> lvl_s8dK
          };
        True -> lvl_s8dM
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8dO :: Real Integer
[LclId]
$dReal_s8dO
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum_s8dQ :: Num Integer
[LclId]
$dNum_s8dQ = GHC.Real.$p1Real @ Integer $dReal_s8dO

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dOrd_s8dS [Occ=OnceL] :: Ord Integer
[LclId]
$dOrd_s8dS = GHC.Real.$p2Real @ Integer $dReal_s8dO

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dT :: Integer
[LclId]
lvl_s8dT = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId]
lvl_s8dU = fromInteger @ Integer $dNum_s8dQ lvl_s8dT

-- RHS size: {terms: 23, types: 10, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId, Arity=2]
$s^^_s8bJ
  = \ (x_a7Tg [Occ=Once*] :: Double) (n_a7Th :: Integer) ->
      case >= @ Integer $dOrd_s8dS n_a7Th lvl_s8dU of {
        False ->
          recip
            @ Double
            GHC.Float.$fFractionalDouble
            (^ @ Double
               @ Integer
               $dNum1_s8bO
               GHC.Real.$fIntegralInteger
               x_a7Tg
               (negate @ Integer $dNum_s8dQ n_a7Th));
        True ->
          ^ @ Double
            @ Integer
            $dNum1_s8bO
            GHC.Real.$fIntegralInteger
            x_a7Tg
            n_a7Th
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId]
lvl_s8dX = 1000000000

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Vs
      of
      { (# ipv_a7Vv, ipv1_a7Vw #) ->
      case ((case ($dNFData_s8bC
                   `cast` (Control.DeepSeq.N:NFData[0] <String>_N
                           :: NFData String ~R# (String -> ())))
                    f_a1VF
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Vv
      of
      { (# ipv_X7VW, ipv1_X7VY #) ->
      let {
        duration_s8bF :: Integer
        [LclId]
        duration_s8bF
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              lvl_s8dV
                              c_a7X5
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 lvl_s8dW c_a7X5 n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8bF
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8bF lvl_s8dX)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7VW
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dY = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dZ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dZ = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e0 :: Integer
[LclId]
lvl_s8e0 = 1000000000

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Vs
      of
      { (# ipv_a7Vv, ipv1_a7Vw #) ->
      case ((case ($dNFData_s8bw
                   `cast` (Control.DeepSeq.N:NFData[0] <Double>_N
                           :: NFData Double ~R# (Double -> ())))
                    f_a1VF
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Vv
      of
      { (# ipv_X7VW, ipv1_X7VY #) ->
      let {
        duration_s8bz :: Integer
        [LclId]
        duration_s8bz
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              lvl_s8dY
                              c_a7X5
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 lvl_s8dZ c_a7X5 n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8bz
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8bz lvl_s8e0)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7VW
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e1 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e2 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e3 :: Integer
[LclId]
lvl_s8e3 = 1000000000

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Vs
      of
      { (# ipv_a7Vv, ipv1_a7Vw #) ->
      case ((case ($dNFData_s8bs
                   `cast` (Control.DeepSeq.N:NFData[0] <Integer>_N
                           :: NFData Integer ~R# (Integer -> ())))
                    f_a1VF
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Vv
      of
      { (# ipv_X7VW, ipv1_X7VY #) ->
      let {
        duration_s8bv :: Integer
        [LclId]
        duration_s8bv
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              lvl_s8e1
                              c_a7X5
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 lvl_s8e2 c_a7X5 n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8bv
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8bv lvl_s8e3)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7VW
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e4 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e5 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e6 :: Integer
[LclId]
lvl_s8e6 = 1000000000

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Vs
      of
      { (# ipv_a7Vv, ipv1_a7Vw #) ->
      case ((case ($dNFData_a5LK
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                           :: NFData a_a5LI ~R# (a_a5LI -> ())))
                    f_a1VF
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Vv
      of
      { (# ipv_X7VW, ipv1_X7VY #) ->
      let {
        duration_s8br :: Integer
        [LclId]
        duration_s8br
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7VY ipv1_a7Vw } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              lvl_s8e4
                              c_a7X5
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 lvl_s8e5 c_a7X5 n_a7X6)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8br
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8br lvl_s8e6)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7VW
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX, Arity=4]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e7 :: Integer
[LclId]
lvl_s8e7 = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e8 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e8 = "foo"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8e9 :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8e9
  = \ (@ b_a7WK) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7WK lvl_s8e8

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8ea :: [Char]
[LclId]
lvl_s8ea = GHC.Base.build @ Char lvl_s8e9

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8e7
      lvl_s8ea

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eb :: Integer
[LclId]
lvl_s8eb = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ec :: Integer
[LclId]
lvl_s8ec = 1000000

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      lvl_s8eb
      lvl_s8ec

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8ed :: Double
[LclId]
lvl_s8ed = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ee :: Integer
[LclId]
lvl_s8ee = 441

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      lvl_s8ed
      lvl_s8ee

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
lvl_s8ex :: Integer -> ()
[LclId]
lvl_s8ex
  = \ (ds_a80u :: Integer) ->
      case ds_a80u of { __DEFAULT -> ghc-prim-0.5.3:GHC.Tuple.() }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ey :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8ey = "integral power : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8ez :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8ez
  = \ (@ b_a7WK) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7WK lvl_s8ey

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8eA :: [Char]
[LclId]
lvl_s8eA = GHC.Base.build @ Char lvl_s8ez

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl_s8et :: Double -> ()
[LclId]
lvl_s8et
  = \ (ds_a80j :: Double) ->
      case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
      ghc-prim-0.5.3:GHC.Tuple.()
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8eu = "fractional power 3 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8ev :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8ev
  = \ (@ b_a7WK) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7WK lvl_s8eu

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8ew :: [Char]
[LclId]
lvl_s8ew = GHC.Base.build @ Char lvl_s8ev

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl_s8ep :: Double -> ()
[LclId]
lvl_s8ep
  = \ (ds_a80j :: Double) ->
      case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
      ghc-prim-0.5.3:GHC.Tuple.()
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eq :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8eq = "fractional power 2 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8er :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8er
  = \ (@ b_a7WK) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7WK lvl_s8eq

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8es :: [Char]
[LclId]
lvl_s8es = GHC.Base.build @ Char lvl_s8er

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl_s8el :: Double -> ()
[LclId]
lvl_s8el
  = \ (ds_a80j :: Double) ->
      case ds_a80j of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
      ghc-prim-0.5.3:GHC.Tuple.()
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8em :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8em = "fractional power 1 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8en :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8en
  = \ (@ b_a7WK) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7WK lvl_s8em

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8eo :: [Char]
[LclId]
lvl_s8eo = GHC.Base.build @ Char lvl_s8en

Rec {
-- RHS size: {terms: 14, types: 10, coercions: 0, joins: 0/0}
go_s8eg [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1]
go_s8eg
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 xs_a808 ->
          case case x_a807 of { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW ->
               ghc-prim-0.5.3:GHC.Tuple.()
               }
          of
          { () ->
          go_s8eg xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8eh :: [Char] -> ()
[LclId]
lvl_s8eh = \ (eta_a801 :: [Char]) -> go_s8eg eta_a801

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ei :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8ei = "stimes : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8ej :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8ej
  = \ (@ b_a7WK) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7WK lvl_s8ei

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8ek :: [Char]
[LclId]
lvl_s8ek = GHC.Base.build @ Char lvl_s8ej

-- RHS size: {terms: 34, types: 51, coercions: 16, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case measure_s7Y1
             @ String
             (lvl_s8eh
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             lvl_s8ek
             testStimes
             s_a7ZN
      of
      { (# ipv_a7ZQ, ipv1_a7ZR #) ->
      case measure_s7Y1
             @ Double
             (lvl_s8el
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8eo
             testFractionalPower
             ipv_a7ZQ
      of
      { (# ipv_X80i, ipv1_X80k #) ->
      case measure_s7Y1
             @ Double
             (lvl_s8ep
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8es
             testFractionalPower
             ipv_X80i
      of
      { (# ipv_X80n, ipv1_X80p #) ->
      case measure_s7Y1
             @ Double
             (lvl_s8et
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8ew
             testFractionalPower
             ipv_X80n
      of
      { (# ipv_X80s, ipv1_X80u #) ->
      measure_s7Y1
        @ Integer
        (lvl_s8ex
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        lvl_s8eA
        testIntegralPower
        ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX, Arity=1]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX, Arity=1]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Simplifier ====================
2019-11-05 16:48:07.873708715 UTC
  Max iterations = 4
  SimplMode {Phase = 2 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 585, types: 613, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dU = 0

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (GHC.Base.build
         @ Char
         (\ (@ b_a7WK) ->
            ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
              @ b_a7WK "Negative exponent"#))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dA = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dE :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dE = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dG :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dG = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8do :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8do = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dI :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dI = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dc :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dc = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8da :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8da = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cY = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8d0 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8cY)
             lvl_s8d0
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8dy [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8dy
  = \ (x1_a7TY :: Double) (y1_a7TZ :: Integer) (z_a7U0 :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7TZ lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7TZ lvl_s8dA
          of {
            __DEFAULT ->
              g1_s8dy
                (GHC.Float.timesDouble x1_a7TY x1_a7TY)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7TZ lvl_s8dC)
                (GHC.Float.timesDouble x1_a7TY z_a7U0);
            1# -> GHC.Float.timesDouble x1_a7TY z_a7U0
          };
        1# ->
          g1_s8dy
            (GHC.Float.timesDouble x1_a7TY x1_a7TY)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7TZ lvl_s8dE)
            z_a7U0
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8dm [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8dm
  = \ (x_a7TJ :: Double) (y_a7TK :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7TK lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7TK lvl_s8do
          of {
            __DEFAULT ->
              g1_s8dy
                (GHC.Float.timesDouble x_a7TJ x_a7TJ)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7TK lvl_s8dG)
                x_a7TJ;
            1# -> x_a7TJ
          };
        1# ->
          f_s8dm
            (GHC.Float.timesDouble x_a7TJ x_a7TJ)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7TK lvl_s8dI)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8dK :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8dK = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8bV
  = \ (x0_a7Tw :: Double) (y0_a7Tx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Tx lvl_s8da
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Tx lvl_s8dc
          of {
            __DEFAULT -> f_s8dm x0_a7Tw y0_a7Tx;
            1# -> lvl_s8dK
          };
        1# -> lvl_s8dM
      }

-- RHS size: {terms: 28, types: 10, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 191 20}]
$s^^_s8bJ
  = \ (x_a7Tg :: Double) (n_a7Th :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7Th lvl_s8dU
      of {
        __DEFAULT ->
          case ^ @ Double
                 @ Integer
                 GHC.Float.$fNumDouble
                 GHC.Real.$fIntegralInteger
                 x_a7Tg
                 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7Th)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8fK ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8fK of wild1_a8fM
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8fM
          }
          };
        1# ->
          ^ @ Double
            @ Integer
            GHC.Float.$fNumDouble
            GHC.Real.$fIntegralInteger
            x_a7Tg
            n_a7Th
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 xs_a808 ->
          case x_a807 of { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dX = 1000000000

-- RHS size: {terms: 73, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 600 0}]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case go_s8cO f_a1VF of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YD, ipv1_X7YF #) ->
      let {
        duration_s8bF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bF
          = case ipv1_X7YF of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7YW, y_X7YY) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8bF lvl_s8dX)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Ws, ww4_a7Wt #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              lvl_s8dV
                              c_a7X5
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X7Y8, ww4_X7Ya #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 lvl_s8dW c_a7X5 n_a7X6)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_X7Y8 ww4_X7Ya)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Ws ww4_a7Wt)
                         })
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dY = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dZ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dZ = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e0 = 1000000000

-- RHS size: {terms: 72, types: 87, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case f_a1VF of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YJ, ipv1_X7YL #) ->
      let {
        duration_s8bz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bz
          = case ipv1_X7YL of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Z2, y_X7Z4) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8bz lvl_s8e0)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Ws, ww4_a7Wt #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              lvl_s8dY
                              c_a7X5
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X7Ye, ww4_X7Yg #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 lvl_s8dZ c_a7X5 n_a7X6)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_X7Ye ww4_X7Yg)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Ws ww4_a7Wt)
                         })
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e1 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e2 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e3 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e3 = 1000000000

-- RHS size: {terms: 72, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case f_a1VF of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YL, ipv1_X7YN #) ->
      let {
        duration_s8bv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bv
          = case ipv1_X7YN of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Z4, y_X7Z6) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8bv lvl_s8e3)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Ws, ww4_a7Wt #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              lvl_s8e1
                              c_a7X5
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X7Yg, ww4_X7Yi #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 lvl_s8e2 c_a7X5 n_a7X6)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_X7Yg ww4_X7Yi)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Ws ww4_a7Wt)
                         })
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e4 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e5 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e6 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e6 = 1000000000

-- RHS size: {terms: 75, types: 90, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 600 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YS, ipv1_X7YU #) ->
      let {
        duration_s8br :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8br
          = case ipv1_X7YU of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Zb, y_X7Zd) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7X4)
                      (c_a7X5 [OS=OneShot] :: Char -> b_a7X4 -> b_a7X4)
                      (n_a7X6 [OS=OneShot] :: b_a7X4) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7X4
                        c_a7X5
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8br lvl_s8e6)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Ws, ww4_a7Wt #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7X4
                           c_a7X5
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7X4
                              lvl_s8e4
                              c_a7X5
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X7Yn, ww4_X7Yp #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7X4
                                 c_a7X5
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7X4 lvl_s8e5 c_a7X5 n_a7X6)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_X7Yn ww4_X7Yp)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Ws ww4_a7Wt)
                         })
                        description_a1VE))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (GHC.Base.build
         @ Char
         (\ (@ b_a7WK) ->
            ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7WK "foo"#))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.5.3:GHC.Types.D# 5.0##)
      441

-- RHS size: {terms: 44, types: 66, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "stimes : "#))
             testStimes
             s_a7ZN
      of
      { (# ipv_a7ZQ, ipv1_a7ZR #) ->
      case $smeasure_s8bx
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "fractional power 1 : "#))
             testFractionalPower
             ipv_a7ZQ
      of
      { (# ipv_X80i, ipv1_X80k #) ->
      case $smeasure_s8bx
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "fractional power 2 : "#))
             testFractionalPower
             ipv_X80i
      of
      { (# ipv_X80n, ipv1_X80p #) ->
      case $smeasure_s8bx
             (GHC.Base.build
                @ Char
                (\ (@ b_a7WK) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7WK "fractional power 3 : "#))
             testFractionalPower
             ipv_X80n
      of
      { (# ipv_X80s, ipv1_X80u #) ->
      $smeasure_s8bt
        (GHC.Base.build
           @ Char
           (\ (@ b_a7WK) ->
              ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                @ b_a7WK "integral power : "#))
        testIntegralPower
        ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Simplifier ====================
2019-11-05 16:48:07.91868786 UTC
  Max iterations = 4
  SimplMode {Phase = 1 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dU = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dA = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dE :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dE = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dG :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dG = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8do :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8do = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dI :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dI = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dc :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dc = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8da :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8da = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cY = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8d0 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8cY)
             lvl_s8d0
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8dy [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8dy
  = \ (x1_a7TY :: Double) (y1_a7TZ :: Integer) (z_a7U0 :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7TZ lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7TZ lvl_s8dA
          of {
            __DEFAULT ->
              g1_s8dy
                (GHC.Float.timesDouble x1_a7TY x1_a7TY)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7TZ lvl_s8dC)
                (GHC.Float.timesDouble x1_a7TY z_a7U0);
            1# -> GHC.Float.timesDouble x1_a7TY z_a7U0
          };
        1# ->
          g1_s8dy
            (GHC.Float.timesDouble x1_a7TY x1_a7TY)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7TZ lvl_s8dE)
            z_a7U0
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8dm [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8dm
  = \ (x_a7TJ :: Double) (y_a7TK :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7TK lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7TK lvl_s8do
          of {
            __DEFAULT ->
              g1_s8dy
                (GHC.Float.timesDouble x_a7TJ x_a7TJ)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7TK lvl_s8dG)
                x_a7TJ;
            1# -> x_a7TJ
          };
        1# ->
          f_s8dm
            (GHC.Float.timesDouble x_a7TJ x_a7TJ)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7TK lvl_s8dI)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8dK :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8dK = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8bV
  = \ (x0_a7Tw :: Double) (y0_a7Tx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Tx lvl_s8da
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Tx lvl_s8dc
          of {
            __DEFAULT -> f_s8dm x0_a7Tw y0_a7Tx;
            1# -> lvl_s8dK
          };
        1# -> lvl_s8dM
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8bJ
  = \ (x_a7Tg :: Double) (n_a7Th :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7Th lvl_s8dU
      of {
        __DEFAULT ->
          case $s^_s8bV
                 x_a7Tg (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7Th)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8fK ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8fK of wild1_a8fM
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8fM
          }
          };
        1# -> $s^_s8bV x_a7Tg n_a7Th
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 xs_a808 ->
          case x_a807 of { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dX = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case go_s8cO f_a1VF of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YD, ipv1_X7YF #) ->
      let {
        duration_s8bF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bF
          = case ipv1_X7YF of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7YW, y_X7YY) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW)
                            ww3_X7Y8
                            ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dY = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dZ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dZ = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e0 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case f_a1VF of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YJ, ipv1_X7YL #) ->
      let {
        duration_s8bz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bz
          = case ipv1_X7YL of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Z2, y_X7Z4) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8e0)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dY
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dZ)
                            ww3_X7Ye
                            ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e1 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e2 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e3 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e3 = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case f_a1VF of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YL, ipv1_X7YN #) ->
      let {
        duration_s8bv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bv
          = case ipv1_X7YN of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Z4, y_X7Z6) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8e3)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e1
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e2)
                            ww3_X7Yg
                            ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e4 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e5 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e6 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e6 = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YS, ipv1_X7YU #) ->
      let {
        duration_s8br :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8br
          = case ipv1_X7YU of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Zb, y_X7Zd) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8e6)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e4
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e5)
                            ww3_X7Yn
                            ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8bJ (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7ZN
      of
      { (# ipv_a7ZQ, ipv1_a7ZR #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7ZQ
      of
      { (# ipv_X80i, ipv1_X80k #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X80i
      of
      { (# ipv_X80n, ipv1_X80p #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X80n
      of
      { (# ipv_X80s, ipv1_X80u #) ->
      $smeasure_s8bt
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Simplifier ====================
2019-11-05 16:48:07.940570883 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dU = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dA = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dE :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dE = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dG :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dG = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8do :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8do = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dI :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dI = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dc :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dc = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8da :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8da = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cY = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8d0 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8cY)
             lvl_s8d0
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8dy [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8dy
  = \ (x1_a7TY :: Double) (y1_a7TZ :: Integer) (z_a7U0 :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7TZ lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7TZ lvl_s8dA
          of {
            __DEFAULT ->
              g1_s8dy
                (GHC.Float.timesDouble x1_a7TY x1_a7TY)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7TZ lvl_s8dC)
                (GHC.Float.timesDouble x1_a7TY z_a7U0);
            1# -> GHC.Float.timesDouble x1_a7TY z_a7U0
          };
        1# ->
          g1_s8dy
            (GHC.Float.timesDouble x1_a7TY x1_a7TY)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7TZ lvl_s8dE)
            z_a7U0
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8dm [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8dm
  = \ (x_a7TJ :: Double) (y_a7TK :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7TK lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7TK lvl_s8do
          of {
            __DEFAULT ->
              g1_s8dy
                (GHC.Float.timesDouble x_a7TJ x_a7TJ)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7TK lvl_s8dG)
                x_a7TJ;
            1# -> x_a7TJ
          };
        1# ->
          f_s8dm
            (GHC.Float.timesDouble x_a7TJ x_a7TJ)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7TK lvl_s8dI)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8dK :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8dK = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8bV
  = \ (x0_a7Tw :: Double) (y0_a7Tx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Tx lvl_s8da
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Tx lvl_s8dc
          of {
            __DEFAULT -> f_s8dm x0_a7Tw y0_a7Tx;
            1# -> lvl_s8dK
          };
        1# -> lvl_s8dM
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8bJ
  = \ (x_a7Tg :: Double) (n_a7Th :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7Th lvl_s8dU
      of {
        __DEFAULT ->
          case $s^_s8bV
                 x_a7Tg (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7Th)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8fK ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8fK of wild1_a8fM
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8fM
          }
          };
        1# -> $s^_s8bV x_a7Tg n_a7Th
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 xs_a808 ->
          case x_a807 of { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dX = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case go_s8cO f_a1VF of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YD, ipv1_X7YF #) ->
      let {
        duration_s8bF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bF
          = case ipv1_X7YF of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7YW, y_X7YY) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW)
                            ww3_X7Y8
                            ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dY = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dZ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dZ = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e0 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case f_a1VF of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YJ, ipv1_X7YL #) ->
      let {
        duration_s8bz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bz
          = case ipv1_X7YL of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Z2, y_X7Z4) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8e0)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dY
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dZ)
                            ww3_X7Ye
                            ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e1 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e2 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e3 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e3 = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case f_a1VF of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YL, ipv1_X7YN #) ->
      let {
        duration_s8bv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bv
          = case ipv1_X7YN of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Z4, y_X7Z6) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8e3)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e1
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e2)
                            ww3_X7Yg
                            ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e4 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e5 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e6 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e6 = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YS, ipv1_X7YU #) ->
      let {
        duration_s8br :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8br
          = case ipv1_X7YU of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Zb, y_X7Zd) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8e6)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e4
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e5)
                            ww3_X7Yn
                            ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8bJ (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7ZN
      of
      { (# ipv_a7ZQ, ipv1_a7ZR #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7ZQ
      of
      { (# ipv_X80i, ipv1_X80k #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X80i
      of
      { (# ipv_X80n, ipv1_X80p #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X80n
      of
      { (# ipv_X80s, ipv1_X80u #) ->
      $smeasure_s8bt
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Float inwards ====================
2019-11-05 16:48:07.955185152 UTC

Result size of Float inwards
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dU = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dA = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dE :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dE = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dG :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dG = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8do :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8do = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dI :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dI = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dc :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dc = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8da :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8da = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cY = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8d0 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8cY)
             lvl_s8d0
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8dy [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8dy
  = \ (x1_a7TY :: Double) (y1_a7TZ :: Integer) (z_a7U0 :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7TZ lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7TZ lvl_s8dA
          of {
            __DEFAULT ->
              g1_s8dy
                (GHC.Float.timesDouble x1_a7TY x1_a7TY)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7TZ lvl_s8dC)
                (GHC.Float.timesDouble x1_a7TY z_a7U0);
            1# -> GHC.Float.timesDouble x1_a7TY z_a7U0
          };
        1# ->
          g1_s8dy
            (GHC.Float.timesDouble x1_a7TY x1_a7TY)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7TZ lvl_s8dE)
            z_a7U0
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8dm [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8dm
  = \ (x_a7TJ :: Double) (y_a7TK :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7TK lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7TK lvl_s8do
          of {
            __DEFAULT ->
              g1_s8dy
                (GHC.Float.timesDouble x_a7TJ x_a7TJ)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7TK lvl_s8dG)
                x_a7TJ;
            1# -> x_a7TJ
          };
        1# ->
          f_s8dm
            (GHC.Float.timesDouble x_a7TJ x_a7TJ)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7TK lvl_s8dI)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8dK :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8dK = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8bV
  = \ (x0_a7Tw :: Double) (y0_a7Tx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Tx lvl_s8da
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Tx lvl_s8dc
          of {
            __DEFAULT -> f_s8dm x0_a7Tw y0_a7Tx;
            1# -> lvl_s8dK
          };
        1# -> lvl_s8dM
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8bJ
  = \ (x_a7Tg :: Double) (n_a7Th :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7Th lvl_s8dU
      of {
        __DEFAULT ->
          case $s^_s8bV
                 x_a7Tg (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7Th)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8fK ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8fK of wild1_a8fM
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8fM
          }
          };
        1# -> $s^_s8bV x_a7Tg n_a7Th
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 xs_a808 ->
          case x_a807 of { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dX = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case go_s8cO f_a1VF of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YD, ipv1_X7YF #) ->
      ((let {
          duration_s8bF :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8bF
            = case ipv1_X7YF of { (ds1_a7VJ, y_a7VK) ->
              case ipv1_a7VF of { (ds1_X7YW, y_X7YY) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW)
                            ww3_X7Y8
                            ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dY = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dZ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dZ = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e0 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case f_a1VF of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YJ, ipv1_X7YL #) ->
      ((let {
          duration_s8bz :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8bz
            = case ipv1_X7YL of { (ds1_a7VJ, y_a7VK) ->
              case ipv1_a7VF of { (ds1_X7Z2, y_X7Z4) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8e0)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dY
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dZ)
                            ww3_X7Ye
                            ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e1 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e2 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e3 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e3 = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case f_a1VF of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YL, ipv1_X7YN #) ->
      ((let {
          duration_s8bv :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8bv
            = case ipv1_X7YN of { (ds1_a7VJ, y_a7VK) ->
              case ipv1_a7VF of { (ds1_X7Z4, y_X7Z6) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8e3)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e1
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e2)
                            ww3_X7Yg
                            ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e4 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e5 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e6 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e6 = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YS, ipv1_X7YU #) ->
      ((let {
          duration_s8br :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8br
            = case ipv1_X7YU of { (ds1_a7VJ, y_a7VK) ->
              case ipv1_a7VF of { (ds1_X7Zb, y_X7Zd) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8e6)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e4
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e5)
                            ww3_X7Yn
                            ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8bJ (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7ZN
      of
      { (# ipv_a7ZQ, ipv1_a7ZR #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7ZQ
      of
      { (# ipv_X80i, ipv1_X80k #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X80i
      of
      { (# ipv_X80n, ipv1_X80p #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X80n
      of
      { (# ipv_X80s, ipv1_X80u #) ->
      $smeasure_s8bt
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Simplifier ====================
2019-11-05 16:48:08.015133646 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-call-arity],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dU = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dA = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dE :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dE = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dG :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dG = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8do :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8do = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dI :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dI = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dc :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dc = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8da :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8da = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cY = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8d0 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8cY)
             lvl_s8d0
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8dy [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8dy
  = \ (x1_a7TY :: Double) (y1_a7TZ :: Integer) (z_a7U0 :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7TZ lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7TZ lvl_s8dA
          of {
            __DEFAULT ->
              g1_s8dy
                (GHC.Float.timesDouble x1_a7TY x1_a7TY)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7TZ lvl_s8dC)
                (GHC.Float.timesDouble x1_a7TY z_a7U0);
            1# -> GHC.Float.timesDouble x1_a7TY z_a7U0
          };
        1# ->
          g1_s8dy
            (GHC.Float.timesDouble x1_a7TY x1_a7TY)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7TZ lvl_s8dE)
            z_a7U0
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8dm [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8dm
  = \ (x_a7TJ :: Double) (y_a7TK :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7TK lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7TK lvl_s8do
          of {
            __DEFAULT ->
              g1_s8dy
                (GHC.Float.timesDouble x_a7TJ x_a7TJ)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7TK lvl_s8dG)
                x_a7TJ;
            1# -> x_a7TJ
          };
        1# ->
          f_s8dm
            (GHC.Float.timesDouble x_a7TJ x_a7TJ)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7TK lvl_s8dI)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8dK :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8dK = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8bV
  = \ (x0_a7Tw :: Double) (y0_a7Tx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Tx lvl_s8da
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Tx lvl_s8dc
          of {
            __DEFAULT -> f_s8dm x0_a7Tw y0_a7Tx;
            1# -> lvl_s8dK
          };
        1# -> lvl_s8dM
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8bJ
  = \ (x_a7Tg :: Double) (n_a7Th :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7Th lvl_s8dU
      of {
        __DEFAULT ->
          case $s^_s8bV
                 x_a7Tg (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7Th)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8fK ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8fK of wild1_a8fM
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8fM
          }
          };
        1# -> $s^_s8bV x_a7Tg n_a7Th
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 xs_a808 ->
          case x_a807 of { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dX = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case go_s8cO f_a1VF of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YD, ipv1_X7YF #) ->
      let {
        duration_s8bF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bF
          = case ipv1_X7YF of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7YW, y_X7YY) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW)
                            ww3_X7Y8
                            ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dY = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dZ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dZ = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e0 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case f_a1VF of { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YJ, ipv1_X7YL #) ->
      let {
        duration_s8bz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bz
          = case ipv1_X7YL of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Z2, y_X7Z4) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8e0)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dY
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dZ)
                            ww3_X7Ye
                            ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e1 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e2 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e3 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e3 = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case f_a1VF of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YL, ipv1_X7YN #) ->
      let {
        duration_s8bv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bv
          = case ipv1_X7YN of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Z4, y_X7Z6) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8e3)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e1
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e2)
                            ww3_X7Yg
                            ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e4 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e5 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e6 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e6 = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YS, ipv1_X7YU #) ->
      let {
        duration_s8br :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8br
          = case ipv1_X7YU of { (ds1_a7VJ, y_a7VK) ->
            case ipv1_a7VF of { (ds1_X7Zb, y_X7Zd) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8e6)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e4
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e5)
                            ww3_X7Yn
                            ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8bJ (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7ZN
      of
      { (# ipv_a7ZQ, ipv1_a7ZR #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7ZQ
      of
      { (# ipv_X80i, ipv1_X80k #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X80i
      of
      { (# ipv_X80n, ipv1_X80p #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X80n
      of
      { (# ipv_X80s, ipv1_X80u #) ->
      $smeasure_s8bt
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Simplifier ====================
2019-11-05 16:48:08.117940132 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-worker-wrapper],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 536, types: 534, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dU = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dA = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dE :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dE = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dG :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dG = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8do :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8do = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dI :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dI = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dc :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dc = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8da :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8da = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cY = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8d0 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8cu [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8cY)
                        lvl_s8d0
                 of wild_a8eO [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
                 }}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8cY)
             lvl_s8d0
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8nl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8nl
  = \ (ww_s8nc :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8n8 :: Integer)
      (ww_s8ng :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8n8 lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8n8 lvl_s8dA
          of {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng
          };
        1# ->
          $wg1_s8nl
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dE)
            ww_s8ng
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8nv [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8nv
  = \ (ww_s8nq :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8nn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8nn lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nn lvl_s8do
          of {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dG)
                ww_s8nq;
            1# -> ww_s8nq
          };
        1# ->
          $wf_s8nv
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dI)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8nB [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8nB
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8nx lvl_s8da
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nx lvl_s8dc
          of {
            __DEFAULT ->
              case w_s8nw of { ghc-prim-0.5.3:GHC.Types.D# ww_s8nq ->
              $wf_s8nv ww_s8nq w_s8nx
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8dM of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nw [Occ=Once] :: Double)
                 (w_s8nx [Occ=Once] :: Integer) ->
                 case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
                 }}]
$s^_s8bV
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8nH [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8nH
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8nD lvl_s8dU
      of {
        __DEFAULT ->
          case $w$s^_s8nB
                 w_s8nC (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8nD)
          of ww_s8nA
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8nA
          };
        1# -> $w$s^_s8nB w_s8nC w_s8nD
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nC [Occ=Once] :: Double)
                 (w_s8nD [Occ=Once] :: Integer) ->
                 case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
                 }}]
$s^^_s8bJ
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 [Dmd=<S,H>] xs_a808 [Dmd=<S,U>] ->
          case x_a807 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW [Dmd=<L,A>] ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dX = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case go_s8cO f_a1VF of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YD, ipv1_X7YF [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bF
          = case ipv1_X7YF of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7YW [Dmd=<L,A>], y_X7YY [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW)
                            ww3_X7Y8
                            ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dY = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dZ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dZ = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e0 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e0 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YJ, ipv1_X7YL [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bz
          = case ipv1_X7YL of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Z2 [Dmd=<L,A>], y_X7Z4 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8e0)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dY
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dZ)
                            ww3_X7Ye
                            ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e1 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e2 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e3 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e3 = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YL, ipv1_X7YN [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bv
          = case ipv1_X7YN of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Z4 [Dmd=<L,A>], y_X7Z6 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8e3)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e1
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e2)
                            ww3_X7Yg
                            ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8e4 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8e5 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e6 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8e6 = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YS, ipv1_X7YU [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8br :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8br
          = case ipv1_X7YU of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Zb [Dmd=<L,A>], y_X7Zd [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8e6)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e4
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e5)
                            ww3_X7Yn
                            ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7Y1
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 20}]
testFractionalPower
  = case $w$s^^_s8nH (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441
    of ww_s8nG
    { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
    }

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7ZN
      of
      { (# ipv_a7ZQ, ipv1_a7ZR [Dmd=<L,A>] #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7ZQ
      of
      { (# ipv_X80i, ipv1_X80k [Dmd=<L,A>] #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X80i
      of
      { (# ipv_X80n, ipv1_X80p [Dmd=<L,A>] #) ->
      case $smeasure_s8bx
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X80n
      of
      { (# ipv_X80s, ipv1_X80u [Dmd=<L,A>] #) ->
      $smeasure_s8bt
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s80z
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8b7
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Levels added: ====================
2019-11-05 16:48:08.139040014 UTC

<lvl_s8dU,<0,0>>
<lvl_s8dU,<0,0>> = 0
<lvl_s8dM,<0,0>>
<lvl_s8dM,<0,0>>
  = GHC.Err.errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep
      @ GHC.Types.Double
      (GHC.CString.unpackCString#
         (let {
            <lvl_s8qK,F<0,0>>
            <lvl_s8qK,F<0,0>> = "Negative exponent"# } in
          lvl_s8qK))
<lvl_s8dC,<0,0>>
<lvl_s8dC,<0,0>> = 2
<lvl_s8dA,<0,0>>
<lvl_s8dA,<0,0>> = 1
<lvl_s8dE,<0,0>>
<lvl_s8dE,<0,0>> = 2
<lvl_s8dG,<0,0>>
<lvl_s8dG,<0,0>> = 2
<lvl_s8do,<0,0>>
<lvl_s8do,<0,0>> = 1
<lvl_s8dI,<0,0>>
<lvl_s8dI,<0,0>> = 2
<lvl_s8dc,<0,0>>
<lvl_s8dc,<0,0>> = 0
<lvl_s8da,<0,0>>
<lvl_s8da,<0,0>> = 0
<lvl_s8cY,<0,0>>
<lvl_s8cY,<0,0>> = 2
<lvl_s8d0,<0,0>>
<lvl_s8d0,<0,0>> = 0
<$seven_s8cz,<0,0>>
<$seven_s8cz,<0,0>>
  = \ <n_a8cu,<1,0>> ->
      case GHC.Integer.Type.eqInteger#
             (GHC.Integer.Type.remInteger n_a8cu lvl_s8cY) lvl_s8d0
      of <wild_a8eO,<1,2>>
      { __DEFAULT ->
      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild_a8eO
      }
<$wg1_s8nl,<0,0>>
<$wg1_s8nl,<0,0>>
  = \ <ww_s8nc,<1,0>> <w_s8n8,<1,0>> <ww_s8ng,<1,0>> ->
      case GHC.Integer.Type.eqInteger#
             (GHC.Integer.Type.remInteger w_s8n8 lvl_s8cY) lvl_s8d0
      of <wild_a8eO,<1,2>> {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8n8 lvl_s8dA
          of <wild_X8hk,<1,3>> {
            __DEFAULT ->
              $wg1_s8nl
                (GHC.Prim.*## ww_s8nc ww_s8nc)
                (GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
                (GHC.Prim.*## ww_s8nc ww_s8ng);
            1# -> GHC.Prim.*## ww_s8nc ww_s8ng
          };
        1# ->
          $wg1_s8nl
            (GHC.Prim.*## ww_s8nc ww_s8nc)
            (GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dE)
            ww_s8ng
      };
<$wf_s8nv,<0,0>>
<$wf_s8nv,<0,0>>
  = \ <ww_s8nq,<1,0>> <w_s8nn,<1,0>> ->
      case GHC.Integer.Type.eqInteger#
             (GHC.Integer.Type.remInteger w_s8nn lvl_s8cY) lvl_s8d0
      of <wild_a8eO,<1,2>> {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8nn lvl_s8do
          of <wild_X8hk,<1,3>> {
            __DEFAULT ->
              $wg1_s8nl
                (GHC.Prim.*## ww_s8nq ww_s8nq)
                (GHC.Integer.Type.quotInteger w_s8nn lvl_s8dG)
                ww_s8nq;
            1# -> ww_s8nq
          };
        1# ->
          $wf_s8nv
            (GHC.Prim.*## ww_s8nq ww_s8nq)
            (GHC.Integer.Type.quotInteger w_s8nn lvl_s8dI)
      };
<$w$s^_s8nB,<0,0>>
<$w$s^_s8nB,<0,0>>
  = \ <w_s8nw,<1,0>> <w_s8nx,<1,0>> ->
      case GHC.Integer.Type.ltInteger# w_s8nx lvl_s8da
      of <wild_a8fv,<1,2>> {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8nx lvl_s8dc
          of <wild_a8eO,<1,3>> {
            __DEFAULT ->
              case w_s8nw of <ww_s8np,<1,4>> { GHC.Types.D# <ww_s8nq,<1,4>> ->
              $wf_s8nv ww_s8nq w_s8nx
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8dM of <wild_00,<1,3>> { }
      }
<$s^_s8bV,<0,0>>
<$s^_s8bV,<0,0>>
  = \ <w_s8nw,<1,0>> <w_s8nx,<1,0>> ->
      case $w$s^_s8nB w_s8nw w_s8nx of <ww_s8nA,<1,2>> { __DEFAULT ->
      GHC.Types.D# ww_s8nA
      }
<$w$s^^_s8nH,<0,0>>
<$w$s^^_s8nH,<0,0>>
  = \ <w_s8nC,<1,0>> <w_s8nD,<1,0>> ->
      case GHC.Integer.Type.geInteger# w_s8nD lvl_s8dU
      of <wild_a8fE,<1,2>> {
        __DEFAULT ->
          case $w$s^_s8nB w_s8nC (GHC.Integer.Type.negateInteger w_s8nD)
          of <ww_s8nA,<1,3>>
          { __DEFAULT ->
          GHC.Prim./## 1.0## ww_s8nA
          };
        1# -> $w$s^_s8nB w_s8nC w_s8nD
      }
<$s^^_s8bJ,<0,0>>
<$s^^_s8bJ,<0,0>>
  = \ <w_s8nC,<1,0>> <w_s8nD,<1,0>> ->
      case $w$s^^_s8nH w_s8nC w_s8nD of <ww_s8nG,<1,2>> { __DEFAULT ->
      GHC.Types.D# ww_s8nG
      }
<go_s8cO,<0,0>>
<go_s8cO,<0,0>>
  = \ <ds_a803,<1,0>> ->
      case ds_a803 of <wild_a804,<1,2>> {
        [] -> GHC.Tuple.();
        : <x_a807,<1,2>> <xs_a808,<1,2>> ->
          case x_a807 of <ds1_a7ZU,<1,3>> { GHC.Types.C# <ipv_a7ZW,<1,3>> ->
          go_s8cO xs_a808
          }
      };
<$trModule_s7UU,<0,0>>
<$trModule_s7UU,<0,0>> = "main"#
<$trModule_s7UV,<0,0>>
<$trModule_s7UV,<0,0>> = GHC.Types.TrNameS $trModule_s7UU
<$trModule_s7UW,<0,0>>
<$trModule_s7UW,<0,0>> = "Main"#
<$trModule_s7UX,<0,0>>
<$trModule_s7UX,<0,0>> = GHC.Types.TrNameS $trModule_s7UW
<Main.$trModule,<0,0>>
<Main.$trModule,<0,0>>
  = GHC.Types.Module $trModule_s7UV $trModule_s7UX
<lvl_s8dV,<0,0>>
<lvl_s8dV,<0,0>> = " milli seconds -- "#
<lvl_s8dW,<0,0>>
<lvl_s8dW,<0,0>> = " pico seconds"#
<lvl_s8dX,<0,0>>
<lvl_s8dX,<0,0>> = 1000000000
<$smeasure_s8bD,<0,0>>
<$smeasure_s8bD,<0,0>>
  = \ <description_a1VE,<1,0>> <f_a1VF,<1,0>> <s_a7Vs,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Vs
      of <ds_a7VC,<1,2>>
      { (# <ipv_a7VE,<1,2>>, <ipv1_a7VF,<1,2>> #) ->
      case go_s8cO f_a1VF of <wild_a7Si,<1,3>> { () ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7VE
      of <ds_X7Yz,<1,4>>
      { (# <ipv_X7YD,<1,4>>, <ipv1_X7YF,<1,4>> #) ->
      let {
        <duration_s8bF,<1,5>>
        <duration_s8bF,<1,5>>
          = case ipv1_X7YF of <wild_a7VH,<1,7>>
            { (<ds1_a7VJ,<1,7>>, <y_a7VK,<1,7>>) ->
            case ipv1_a7VF of <wild_X7YS,<1,8>>
            { (<ds1_X7YW,<1,8>>, <y_X7YY,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7VK y_X7YY
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8bF lvl_s8dX)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Wq,<1,8>>
                    { (# <ww3_a7Ws,<1,8>>, <ww4_a7Wt,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X7Y4,<1,9>>
                          { (# <ww3_X7Y8,<1,9>>, <ww4_X7Ya,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8qL,F<0,0>>
                               <lvl_s8qL,F<0,0>> = GHC.CString.unpackCString# lvl_s8dW } in
                             lvl_s8qL)
                            ww3_X7Y8
                            ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7YD
      }
      }
      }
<lvl_s8dY,<0,0>>
<lvl_s8dY,<0,0>> = " milli seconds -- "#
<lvl_s8dZ,<0,0>>
<lvl_s8dZ,<0,0>> = " pico seconds"#
<lvl_s8e0,<0,0>>
<lvl_s8e0,<0,0>> = 1000000000
<$smeasure_s8bx,<0,0>>
<$smeasure_s8bx,<0,0>>
  = \ <description_a1VE,<1,0>> <f_a1VF,<1,0>> <s_a7Vs,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Vs
      of <ds_a7VC,<1,2>>
      { (# <ipv_a7VE,<1,2>>, <ipv1_a7VF,<1,2>> #) ->
      case f_a1VF of <ds1_a80k,<1,3>> { GHC.Types.D# <ipv_a80m,<1,3>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7VE
      of <ds_X7YF,<1,4>>
      { (# <ipv_X7YJ,<1,4>>, <ipv1_X7YL,<1,4>> #) ->
      let {
        <duration_s8bz,<1,5>>
        <duration_s8bz,<1,5>>
          = case ipv1_X7YL of <wild_a7VH,<1,7>>
            { (<ds1_a7VJ,<1,7>>, <y_a7VK,<1,7>>) ->
            case ipv1_a7VF of <wild_X7YY,<1,8>>
            { (<ds1_X7Z2,<1,8>>, <y_X7Z4,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8bz lvl_s8e0)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Wq,<1,8>>
                    { (# <ww3_a7Ws,<1,8>>, <ww4_a7Wt,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8dY
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X7Ya,<1,9>>
                          { (# <ww3_X7Ye,<1,9>>, <ww4_X7Yg,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8qM,F<0,0>>
                               <lvl_s8qM,F<0,0>> = GHC.CString.unpackCString# lvl_s8dZ } in
                             lvl_s8qM)
                            ww3_X7Ye
                            ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7YJ
      }
      }
      }
<lvl_s8e1,<0,0>>
<lvl_s8e1,<0,0>> = " milli seconds -- "#
<lvl_s8e2,<0,0>>
<lvl_s8e2,<0,0>> = " pico seconds"#
<lvl_s8e3,<0,0>>
<lvl_s8e3,<0,0>> = 1000000000
<$smeasure_s8bt,<0,0>>
<$smeasure_s8bt,<0,0>>
  = \ <description_a1VE,<1,0>> <f_a1VF,<1,0>> <s_a7Vs,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Vs
      of <ds_a7VC,<1,2>>
      { (# <ipv_a7VE,<1,2>>, <ipv1_a7VF,<1,2>> #) ->
      case f_a1VF of <ds1_a80v,<1,3>> { __DEFAULT ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7VE
      of <ds_X7YH,<1,4>>
      { (# <ipv_X7YL,<1,4>>, <ipv1_X7YN,<1,4>> #) ->
      let {
        <duration_s8bv,<1,5>>
        <duration_s8bv,<1,5>>
          = case ipv1_X7YN of <wild_a7VH,<1,7>>
            { (<ds1_a7VJ,<1,7>>, <y_a7VK,<1,7>>) ->
            case ipv1_a7VF of <wild_X7Z0,<1,8>>
            { (<ds1_X7Z4,<1,8>>, <y_X7Z6,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8bv lvl_s8e3)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Wq,<1,8>>
                    { (# <ww3_a7Ws,<1,8>>, <ww4_a7Wt,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8e1
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X7Yc,<1,9>>
                          { (# <ww3_X7Yg,<1,9>>, <ww4_X7Yi,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8qN,F<0,0>>
                               <lvl_s8qN,F<0,0>> = GHC.CString.unpackCString# lvl_s8e2 } in
                             lvl_s8qN)
                            ww3_X7Yg
                            ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7YL
      }
      }
      }
<lvl_s8e4,<0,0>>
<lvl_s8e4,<0,0>> = " milli seconds -- "#
<lvl_s8e5,<0,0>>
<lvl_s8e5,<0,0>> = " pico seconds"#
<lvl_s8e6,<0,0>>
<lvl_s8e6,<0,0>> = 1000000000
<measure_s7Y1,<0,0>>
<measure_s7Y1,<0,0>>
  = \ <a_a5LI,<1,0>>
      <$dNFData_a5LK,<1,0>>
      <description_a1VE,<1,0>>
      <f_a1VF,<1,0>>
      <s_a7Vs,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Vs
      of <ds_a7VC,<1,2>>
      { (# <ipv_a7VE,<1,2>>, <ipv1_a7VF,<1,2>> #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: Control.DeepSeq.NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of <wild_a7Si,<1,3>>
      { () ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7VE
      of <ds_X7YO,<1,4>>
      { (# <ipv_X7YS,<1,4>>, <ipv1_X7YU,<1,4>> #) ->
      let {
        <duration_s8br,<1,5>>
        <duration_s8br,<1,5>>
          = case ipv1_X7YU of <wild_a7VH,<1,7>>
            { (<ds1_a7VJ,<1,7>>, <y_a7VK,<1,7>>) ->
            case ipv1_a7VF of <wild_X7Z7,<1,8>>
            { (<ds1_X7Zb,<1,8>>, <y_X7Zd,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8br lvl_s8e6)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Wq,<1,8>>
                    { (# <ww3_a7Ws,<1,8>>, <ww4_a7Wt,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8e4
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X7Yj,<1,9>>
                          { (# <ww3_X7Yn,<1,9>>, <ww4_X7Yp,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8qO,F<0,0>>
                               <lvl_s8qO,F<0,0>> = GHC.CString.unpackCString# lvl_s8e5 } in
                             lvl_s8qO)
                            ww3_X7Yn
                            ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7YS
      }
      }
      }
<Main.measure,<0,0>>
<Main.measure,<0,0>>
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <Control.DeepSeq.NFData a>_R
            ->_R <GHC.Base.String>_R
            ->_R <a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Control.DeepSeq.NFData a =>
                GHC.Base.String
                -> a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# (forall a.
                    Control.DeepSeq.NFData a =>
                    GHC.Base.String -> a -> GHC.Types.IO ()))
<Main.testStimes,<0,0>>
<Main.testStimes,<0,0>>
  = GHC.Magic.noinline
      @ (forall b a. GHC.Real.Integral b => b -> [a] -> [a])
      Data.Semigroup.Internal.stimesList
      @ GHC.Integer.Type.Integer
      @ GHC.Types.Char
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8qP,F<0,0>>
         <lvl_s8qP,F<0,0>> = 1000000 } in
       lvl_s8qP)
      (let {
         <lvl_s8qR,F<0,0>>
         <lvl_s8qR,F<0,0>>
           = GHC.CString.unpackCString#
               (let {
                  <lvl_s8qQ,F<0,0>>
                  <lvl_s8qQ,F<0,0>> = "foo"# } in
                lvl_s8qQ) } in
       lvl_s8qR)
<Main.testIntegralPower,<0,0>>
<Main.testIntegralPower,<0,0>>
  = GHC.Real.^_$s^
      (let {
         <lvl_s8qS,F<0,0>>
         <lvl_s8qS,F<0,0>> = 3 } in
       lvl_s8qS)
      (let {
         <lvl_s8qT,F<0,0>>
         <lvl_s8qT,F<0,0>> = 1000000 } in
       lvl_s8qT)
<Main.testFractionalPower,<0,0>>
<Main.testFractionalPower,<0,0>>
  = case $w$s^^_s8nH
           (let {
              <lvl_s8qU,F<0,0>>
              <lvl_s8qU,F<0,0>> = GHC.Types.D# 5.0## } in
            lvl_s8qU)
           (let {
              <lvl_s8qV,F<0,0>>
              <lvl_s8qV,F<0,0>> = 441 } in
            lvl_s8qV)
    of <ww_s8nG,<0,3>>
    { __DEFAULT ->
    GHC.Types.D# ww_s8nG
    }
<main_s80z,<0,0>>
<main_s80z,<0,0>>
  = \ <s_a7ZN,<0,1>> ->
      case $smeasure_s8bD
             (let {
                <lvl_s8qX,F<0,0>>
                <lvl_s8qX,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8qW,F<0,0>>
                         <lvl_s8qW,F<0,0>> = "stimes : "# } in
                       lvl_s8qW) } in
              lvl_s8qX)
             Main.testStimes
             s_a7ZN
      of <ds1_a7ZO,<0,3>>
      { (# <ipv_a7ZQ,<0,3>>, <ipv1_a7ZR,<0,3>> #) ->
      case $smeasure_s8bx
             (let {
                <lvl_s8qZ,F<0,0>>
                <lvl_s8qZ,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8qY,F<0,0>>
                         <lvl_s8qY,F<0,0>> = "fractional power 1 : "# } in
                       lvl_s8qY) } in
              lvl_s8qZ)
             Main.testFractionalPower
             ipv_a7ZQ
      of <ds1_X80e,<0,4>>
      { (# <ipv_X80i,<0,4>>, <ipv1_X80k,<0,4>> #) ->
      case $smeasure_s8bx
             (let {
                <lvl_s8r1,F<0,0>>
                <lvl_s8r1,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8r0,F<0,0>>
                         <lvl_s8r0,F<0,0>> = "fractional power 2 : "# } in
                       lvl_s8r0) } in
              lvl_s8r1)
             Main.testFractionalPower
             ipv_X80i
      of <ds1_X80j,<0,5>>
      { (# <ipv_X80n,<0,5>>, <ipv1_X80p,<0,5>> #) ->
      case $smeasure_s8bx
             (let {
                <lvl_s8r3,F<0,0>>
                <lvl_s8r3,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8r2,F<0,0>>
                         <lvl_s8r2,F<0,0>> = "fractional power 3 : "# } in
                       lvl_s8r2) } in
              lvl_s8r3)
             Main.testFractionalPower
             ipv_X80n
      of <ds1_X80o,<0,6>>
      { (# <ipv_X80s,<0,6>>, <ipv1_X80u,<0,6>> #) ->
      $smeasure_s8bt
        (let {
           <lvl_s8r5,F<0,0>>
           <lvl_s8r5,F<0,0>>
             = GHC.CString.unpackCString#
                 (let {
                    <lvl_s8r4,F<0,0>>
                    <lvl_s8r4,F<0,0>> = "integral power : "# } in
                  lvl_s8r4) } in
         lvl_s8r5)
        Main.testIntegralPower
        ipv_X80s
      }
      }
      }
      }
<Main.main,<0,0>>
<Main.main,<0,0>>
  = main_s80z
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())
<main_s8b7,<0,0>>
<main_s8b7,<0,0>>
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# GHC.Types.IO ()))
<:Main.main,<0,0>>
<:Main.main,<0,0>>
  = main_s8b7
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())


==================== Float out(FOS {Lam = Just 0, Consts = True, OverSatApps = True}) ====================
2019-11-05 16:48:08.148220138 UTC

Result size of Float out(FOS {Lam = Just 0,
                              Consts = True,
                              OverSatApps = True})
  = {terms: 580, types: 566, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId]
lvl_s8dU = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qK :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qK = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId, Str=x]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qK)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId]
lvl_s8dA = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dE :: Integer
[LclId]
lvl_s8dE = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dG :: Integer
[LclId]
lvl_s8dG = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8do :: Integer
[LclId]
lvl_s8do = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dI :: Integer
[LclId]
lvl_s8dI = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dc :: Integer
[LclId]
lvl_s8dc = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8da :: Integer
[LclId]
lvl_s8da = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cY :: Integer
[LclId]
lvl_s8cY = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d0 :: Integer
[LclId]
lvl_s8d0 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8cu [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8cY)
                        lvl_s8d0
                 of wild_a8eO [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
                 }}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8cY)
             lvl_s8d0
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8nl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><S,U><L,U>]
$wg1_s8nl
  = \ (ww_s8nc :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8n8 :: Integer)
      (ww_s8ng :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8n8 lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8n8 lvl_s8dA
          of {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng
          };
        1# ->
          $wg1_s8nl
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dE)
            ww_s8ng
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8nv [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8nv
  = \ (ww_s8nq :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8nn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8nn lvl_s8cY)
             lvl_s8d0
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nn lvl_s8do
          of {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dG)
                ww_s8nq;
            1# -> ww_s8nq
          };
        1# ->
          $wf_s8nv
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dI)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8nB [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8nB
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8nx lvl_s8da
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nx lvl_s8dc
          of {
            __DEFAULT ->
              case w_s8nw of { ghc-prim-0.5.3:GHC.Types.D# ww_s8nq ->
              $wf_s8nv ww_s8nq w_s8nx
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8dM of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nw [Occ=Once] :: Double)
                 (w_s8nx [Occ=Once] :: Integer) ->
                 case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
                 }}]
$s^_s8bV
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8nH [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8nH
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8nD lvl_s8dU
      of {
        __DEFAULT ->
          case $w$s^_s8nB
                 w_s8nC (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8nD)
          of ww_s8nA
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8nA
          };
        1# -> $w$s^_s8nB w_s8nC w_s8nD
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nC [Occ=Once] :: Double)
                 (w_s8nD [Occ=Once] :: Integer) ->
                 case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
                 }}]
$s^^_s8bJ
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 [Dmd=<S,H>] xs_a808 [Dmd=<S,U>] ->
          case x_a807 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW [Dmd=<L,A>] ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId]
lvl_s8dX = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qL :: [Char]
[LclId]
lvl_s8qL = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case go_s8cO f_a1VF of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YD, ipv1_X7YF [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bF :: Integer
        [LclId]
        duration_s8bF
          = case ipv1_X7YF of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7YW [Dmd=<L,A>], y_X7YY [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Y8 ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dY = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dZ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dZ = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e0 :: Integer
[LclId]
lvl_s8e0 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qM :: [Char]
[LclId]
lvl_s8qM = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dZ

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YJ, ipv1_X7YL [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bz :: Integer
        [LclId]
        duration_s8bz
          = case ipv1_X7YL of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Z2 [Dmd=<L,A>], y_X7Z4 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8e0)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dY
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qM ww3_X7Ye ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e1 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e2 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e3 :: Integer
[LclId]
lvl_s8e3 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qN :: [Char]
[LclId]
lvl_s8qN = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e2

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YL, ipv1_X7YN [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bv :: Integer
        [LclId]
        duration_s8bv
          = case ipv1_X7YN of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Z4 [Dmd=<L,A>], y_X7Z6 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8e3)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e1
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qN ww3_X7Yg ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e4 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e5 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e6 :: Integer
[LclId]
lvl_s8e6 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qO :: [Char]
[LclId]
lvl_s8qO = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8e5

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YS, ipv1_X7YU [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8br :: Integer
        [LclId]
        duration_s8br
          = case ipv1_X7YU of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Zb [Dmd=<L,A>], y_X7Zd [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8e6)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8e4
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qO ww3_X7Yn ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7Y1
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qP :: Integer
[LclId]
lvl_s8qP = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qQ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qQ = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qR :: [Char]
[LclId]
lvl_s8qR = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qQ

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8qP
      lvl_s8qR

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qS :: Integer
[LclId]
lvl_s8qS = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qT :: Integer
[LclId]
lvl_s8qT = 1000000

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8qS lvl_s8qT

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qU :: Double
[LclId]
lvl_s8qU = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qV :: Integer
[LclId]
lvl_s8qV = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8nH lvl_s8qU lvl_s8qV of ww_s8nG { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r4 = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r5 :: [Char]
[LclId]
lvl_s8r5 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r2 = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r3 :: [Char]
[LclId]
lvl_s8r3 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r0 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r0 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r1 :: [Char]
[LclId]
lvl_s8r1 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qY = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qZ :: [Char]
[LclId]
lvl_s8qZ = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qW = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qX :: [Char]
[LclId]
lvl_s8qX = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qW

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD lvl_s8qX testStimes s_a7ZN of
      { (# ipv_a7ZQ, ipv1_a7ZR [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8qZ testFractionalPower ipv_a7ZQ of
      { (# ipv_X80i, ipv1_X80k [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r1 testFractionalPower ipv_X80i of
      { (# ipv_X80n, ipv1_X80p [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r3 testFractionalPower ipv_X80n of
      { (# ipv_X80s, ipv1_X80u [Dmd=<L,A>] #) ->
      $smeasure_s8bt lvl_s8r5 testIntegralPower ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s80z
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8b7
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Float inwards ====================
2019-11-05 16:48:08.170124201 UTC

Result size of Float inwards
  = {terms: 577, types: 566, coercions: 77, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId]
lvl_s8dU = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qK :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qK = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId, Str=x]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qK)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId]
lvl_s8dA = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dE [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8dE = lvl_s8dC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dG [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8dG = lvl_s8dC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8do [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8do = lvl_s8dA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dI [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8dI = lvl_s8dC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dc [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8dc = lvl_s8dU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8da [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8da = lvl_s8dU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cY [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8cY = lvl_s8dC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d0 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8d0 = lvl_s8dU

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8cu [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8dC)
                        lvl_s8dU
                 of wild_a8eO [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
                 }}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8dC)
             lvl_s8dU
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8nl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><S,U><L,U>]
$wg1_s8nl
  = \ (ww_s8nc :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8n8 :: Integer)
      (ww_s8ng :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8n8 lvl_s8dC)
             lvl_s8dU
      of wild_a8eO {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8n8 lvl_s8dA
          of wild_X8hk {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng
          };
        1# ->
          $wg1_s8nl
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
            ww_s8ng
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8nv [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8nv
  = \ (ww_s8nq :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8nn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8nn lvl_s8dC)
             lvl_s8dU
      of wild_a8eO {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nn lvl_s8dA
          of wild_X8hk {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dC)
                ww_s8nq;
            1# -> ww_s8nq
          };
        1# ->
          $wf_s8nv
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dC)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8nB [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8nB
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8nx lvl_s8dU
      of wild_a8fv {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nx lvl_s8dU
          of wild_a8eO {
            __DEFAULT ->
              case w_s8nw of ww_s8np { ghc-prim-0.5.3:GHC.Types.D# ww_s8nq ->
              $wf_s8nv ww_s8nq w_s8nx
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8dM of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nw [Occ=Once] :: Double)
                 (w_s8nx [Occ=Once] :: Integer) ->
                 case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
                 }}]
$s^_s8bV
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8nH [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8nH
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8nD lvl_s8dU
      of wild_a8fE {
        __DEFAULT ->
          case $w$s^_s8nB
                 w_s8nC (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8nD)
          of ww_s8nA
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8nA
          };
        1# -> $w$s^_s8nB w_s8nC w_s8nD
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nC [Occ=Once] :: Double)
                 (w_s8nD [Occ=Once] :: Integer) ->
                 case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
                 }}]
$s^^_s8bJ
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of wild_a804 [Dmd=<L,A>] {
        __DEFAULT -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 [Dmd=<S,H>] xs_a808 [Dmd=<S,U>] ->
          case x_a807 of ds1_a7ZU [Dmd=<L,A>]
          { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW [Dmd=<L,A>] ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId]
lvl_s8dX = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qL :: [Char]
[LclId]
lvl_s8qL = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of ds_a7VC
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case go_s8cO f_a1VF of wild_a7Si { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of ds_X7Yz
      { (# ipv_X7YD, ipv1_X7YF [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8bF :: Integer
          [LclId]
          duration_s8bF
            = case ipv1_X7YF of wild_a7VH [Dmd=<L,A>]
              { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
              case ipv1_a7VF of wild_X7YS [Dmd=<L,A>]
              { (ds1_X7YW [Dmd=<L,A>], y_X7YY [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Wq
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7Y4
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Y8 ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dY = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dZ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dZ = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e0 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8e0 = lvl_s8dX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qM [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8qM = lvl_s8qL

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of ds_a7VC
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of ds1_a80k [Dmd=<L,A>]
      { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of ds_X7YF
      { (# ipv_X7YJ, ipv1_X7YL [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8bz :: Integer
          [LclId]
          duration_s8bz
            = case ipv1_X7YL of wild_a7VH [Dmd=<L,A>]
              { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
              case ipv1_a7VF of wild_X7YY [Dmd=<L,A>]
              { (ds1_X7Z2 [Dmd=<L,A>], y_X7Z4 [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Wq
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7Ya
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Ye ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e1 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e2 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e3 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8e3 = lvl_s8dX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qN [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8qN = lvl_s8qL

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of ds_a7VC
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of ds1_a80v [Dmd=<L,A>] { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of ds_X7YH
      { (# ipv_X7YL, ipv1_X7YN [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8bv :: Integer
          [LclId]
          duration_s8bv
            = case ipv1_X7YN of wild_a7VH [Dmd=<L,A>]
              { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
              case ipv1_a7VF of wild_X7Z0 [Dmd=<L,A>]
              { (ds1_X7Z4 [Dmd=<L,A>], y_X7Z6 [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Wq
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7Yc
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Yg ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e4 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e5 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e6 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8e6 = lvl_s8dX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qO [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8qO = lvl_s8qL

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of ds_a7VC
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of wild_a7Si
      { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of ds_X7YO
      { (# ipv_X7YS, ipv1_X7YU [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8br :: Integer
          [LclId]
          duration_s8br
            = case ipv1_X7YU of wild_a7VH [Dmd=<L,A>]
              { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
              case ipv1_a7VF of wild_X7Z7 [Dmd=<L,A>]
              { (ds1_X7Zb [Dmd=<L,A>], y_X7Zd [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Wq
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7Yj
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Yn ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7Y1
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qP :: Integer
[LclId]
lvl_s8qP = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qQ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qQ = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qR :: [Char]
[LclId]
lvl_s8qR = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qQ

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8qP
      lvl_s8qR

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qS :: Integer
[LclId]
lvl_s8qS = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qT [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8qT = lvl_s8qP

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8qS lvl_s8qP

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qU :: Double
[LclId]
lvl_s8qU = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qV :: Integer
[LclId]
lvl_s8qV = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8nH lvl_s8qU lvl_s8qV of ww_s8nG { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r4 = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r5 :: [Char]
[LclId]
lvl_s8r5 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r2 = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r3 :: [Char]
[LclId]
lvl_s8r3 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r0 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r0 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r1 :: [Char]
[LclId]
lvl_s8r1 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qY = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qZ :: [Char]
[LclId]
lvl_s8qZ = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qW = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qX :: [Char]
[LclId]
lvl_s8qX = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qW

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD lvl_s8qX testStimes s_a7ZN of ds1_a7ZO
      { (# ipv_a7ZQ, ipv1_a7ZR [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8qZ testFractionalPower ipv_a7ZQ
      of ds1_X80e
      { (# ipv_X80i, ipv1_X80k [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r1 testFractionalPower ipv_X80i
      of ds1_X80j
      { (# ipv_X80n, ipv1_X80p [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r3 testFractionalPower ipv_X80n
      of ds1_X80o
      { (# ipv_X80s, ipv1_X80u [Dmd=<L,A>] #) ->
      $smeasure_s8bt lvl_s8r5 testIntegralPower ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s80z
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s8b7 = GHC.TopHandler.runMainIO1 @ () main

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8b7
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Liberate case ====================
2019-11-05 16:48:08.182722159 UTC

Result size of Liberate case
  = {terms: 577, types: 566, coercions: 77, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId]
lvl_s8dU = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qK :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qK = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId, Str=x]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qK)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId]
lvl_s8dA = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dE [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8dE = lvl_s8dC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dG [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8dG = lvl_s8dC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8do [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8do = lvl_s8dA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dI [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8dI = lvl_s8dC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dc [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8dc = lvl_s8dU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8da [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8da = lvl_s8dU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cY [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8cY = lvl_s8dC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d0 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8d0 = lvl_s8dU

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8cu [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8dC)
                        lvl_s8dU
                 of wild_a8eO [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
                 }}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8dC)
             lvl_s8dU
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8nl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><S,U><L,U>]
$wg1_s8nl
  = \ (ww_s8nc :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8n8 :: Integer)
      (ww_s8ng :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8n8 lvl_s8dC)
             lvl_s8dU
      of wild_a8eO {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8n8 lvl_s8dA
          of wild_X8hk {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng
          };
        1# ->
          $wg1_s8nl
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
            ww_s8ng
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8nv [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8nv
  = \ (ww_s8nq :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8nn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8nn lvl_s8dC)
             lvl_s8dU
      of wild_a8eO {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nn lvl_s8dA
          of wild_X8hk {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dC)
                ww_s8nq;
            1# -> ww_s8nq
          };
        1# ->
          $wf_s8nv
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dC)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8nB [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8nB
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8nx lvl_s8dU
      of wild_a8fv {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nx lvl_s8dU
          of wild_a8eO {
            __DEFAULT ->
              case w_s8nw of ww_s8np { ghc-prim-0.5.3:GHC.Types.D# ww_s8nq ->
              $wf_s8nv ww_s8nq w_s8nx
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8dM of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nw [Occ=Once] :: Double)
                 (w_s8nx [Occ=Once] :: Integer) ->
                 case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
                 }}]
$s^_s8bV
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8nH [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8nH
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8nD lvl_s8dU
      of wild_a8fE {
        __DEFAULT ->
          case $w$s^_s8nB
                 w_s8nC (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8nD)
          of ww_s8nA
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8nA
          };
        1# -> $w$s^_s8nB w_s8nC w_s8nD
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nC [Occ=Once] :: Double)
                 (w_s8nD [Occ=Once] :: Integer) ->
                 case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
                 }}]
$s^^_s8bJ
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of wild_a804 [Dmd=<L,A>] {
        __DEFAULT -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 [Dmd=<S,H>] xs_a808 [Dmd=<S,U>] ->
          case x_a807 of ds1_a7ZU [Dmd=<L,A>]
          { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW [Dmd=<L,A>] ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId]
lvl_s8dX = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qL :: [Char]
[LclId]
lvl_s8qL = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of ds_a7VC
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case go_s8cO f_a1VF of wild_a7Si { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of ds_X7Yz
      { (# ipv_X7YD, ipv1_X7YF [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8bF :: Integer
          [LclId]
          duration_s8bF
            = case ipv1_X7YF of wild_a7VH [Dmd=<L,A>]
              { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
              case ipv1_a7VF of wild_X7YS [Dmd=<L,A>]
              { (ds1_X7YW [Dmd=<L,A>], y_X7YY [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Wq
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7Y4
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Y8 ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dY = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dZ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8dZ = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e0 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8e0 = lvl_s8dX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qM [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8qM = lvl_s8qL

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of ds_a7VC
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of ds1_a80k [Dmd=<L,A>]
      { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of ds_X7YF
      { (# ipv_X7YJ, ipv1_X7YL [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8bz :: Integer
          [LclId]
          duration_s8bz
            = case ipv1_X7YL of wild_a7VH [Dmd=<L,A>]
              { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
              case ipv1_a7VF of wild_X7YY [Dmd=<L,A>]
              { (ds1_X7Z2 [Dmd=<L,A>], y_X7Z4 [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Wq
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7Ya
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Ye ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e1 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e1 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e2 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e3 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8e3 = lvl_s8dX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qN [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8qN = lvl_s8qL

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of ds_a7VC
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of ds1_a80v [Dmd=<L,A>] { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of ds_X7YH
      { (# ipv_X7YL, ipv1_X7YN [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8bv :: Integer
          [LclId]
          duration_s8bv
            = case ipv1_X7YN of wild_a7VH [Dmd=<L,A>]
              { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
              case ipv1_a7VF of wild_X7Z0 [Dmd=<L,A>]
              { (ds1_X7Z4 [Dmd=<L,A>], y_X7Z6 [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Wq
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7Yc
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Yg ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e4 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8e5 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8e6 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8e6 = lvl_s8dX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qO [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8qO = lvl_s8qL

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of ds_a7VC
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of wild_a7Si
      { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of ds_X7YO
      { (# ipv_X7YS, ipv1_X7YU [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8br :: Integer
          [LclId]
          duration_s8br
            = case ipv1_X7YU of wild_a7VH [Dmd=<L,A>]
              { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
              case ipv1_a7VF of wild_X7Z7 [Dmd=<L,A>]
              { (ds1_X7Zb [Dmd=<L,A>], y_X7Zd [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Wq
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7Yj
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Yn ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7Y1
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qP :: Integer
[LclId]
lvl_s8qP = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qQ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qQ = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qR :: [Char]
[LclId]
lvl_s8qR = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qQ

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8qP
      lvl_s8qR

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qS :: Integer
[LclId]
lvl_s8qS = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qT [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8qT = lvl_s8qP

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8qS lvl_s8qP

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qU :: Double
[LclId]
lvl_s8qU = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qV :: Integer
[LclId]
lvl_s8qV = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8nH lvl_s8qU lvl_s8qV of ww_s8nG { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r4 = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r5 :: [Char]
[LclId]
lvl_s8r5 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r2 = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r3 :: [Char]
[LclId]
lvl_s8r3 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r0 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8r0 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r1 :: [Char]
[LclId]
lvl_s8r1 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qY = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qZ :: [Char]
[LclId]
lvl_s8qZ = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8qW = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qX :: [Char]
[LclId]
lvl_s8qX = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qW

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD lvl_s8qX testStimes s_a7ZN of ds1_a7ZO
      { (# ipv_a7ZQ, ipv1_a7ZR [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8qZ testFractionalPower ipv_a7ZQ
      of ds1_X80e
      { (# ipv_X80i, ipv1_X80k [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r1 testFractionalPower ipv_X80i
      of ds1_X80j
      { (# ipv_X80n, ipv1_X80p [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r3 testFractionalPower ipv_X80n
      of ds1_X80o
      { (# ipv_X80s, ipv1_X80u [Dmd=<L,A>] #) ->
      $smeasure_s8bt lvl_s8r5 testIntegralPower ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s80z
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s8b7 = GHC.TopHandler.runMainIO1 @ () main

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8b7
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Simplifier ====================
2019-11-05 16:48:08.216927745 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-liberate-case],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 535, types: 542, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dU = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qK :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8qK = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qK)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dA = 1

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8cu [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8dC)
                        lvl_s8dU
                 of wild_a8eO [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
                 }}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8dC)
             lvl_s8dU
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8nl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8nl
  = \ (ww_s8nc :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8n8 :: Integer)
      (ww_s8ng :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8n8 lvl_s8dC)
             lvl_s8dU
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8n8 lvl_s8dA
          of {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng
          };
        1# ->
          $wg1_s8nl
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
            ww_s8ng
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8nv [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8nv
  = \ (ww_s8nq :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8nn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8nn lvl_s8dC)
             lvl_s8dU
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nn lvl_s8dA
          of {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dC)
                ww_s8nq;
            1# -> ww_s8nq
          };
        1# ->
          $wf_s8nv
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dC)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8nB [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8nB
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8nx lvl_s8dU
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nx lvl_s8dU
          of {
            __DEFAULT ->
              case w_s8nw of { ghc-prim-0.5.3:GHC.Types.D# ww_s8nq ->
              $wf_s8nv ww_s8nq w_s8nx
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8dM of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nw [Occ=Once] :: Double)
                 (w_s8nx [Occ=Once] :: Integer) ->
                 case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
                 }}]
$s^_s8bV
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8nH [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8nH
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8nD lvl_s8dU
      of {
        __DEFAULT ->
          case $w$s^_s8nB
                 w_s8nC (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8nD)
          of ww_s8nA
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8nA
          };
        1# -> $w$s^_s8nB w_s8nC w_s8nD
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nC [Occ=Once] :: Double)
                 (w_s8nD [Occ=Once] :: Integer) ->
                 case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
                 }}]
$s^^_s8bJ
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 [Dmd=<S,H>] xs_a808 [Dmd=<S,U>] ->
          case x_a807 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW [Dmd=<L,A>] ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dX = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qL :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8qL = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case go_s8cO f_a1VF of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YD, ipv1_X7YF [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bF
          = case ipv1_X7YF of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7YW [Dmd=<L,A>], y_X7YY [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Y8 ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YJ, ipv1_X7YL [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bz
          = case ipv1_X7YL of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Z2 [Dmd=<L,A>], y_X7Z4 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Ye ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YL, ipv1_X7YN [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bv
          = case ipv1_X7YN of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Z4 [Dmd=<L,A>], y_X7Z6 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Yg ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YS, ipv1_X7YU [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8br :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8br
          = case ipv1_X7YU of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Zb [Dmd=<L,A>], y_X7Zd [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Yn ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7Y1
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qP :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8qP = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qQ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8qQ = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8qR = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qQ

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8qP
      lvl_s8qR

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qS :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8qS = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = GHC.Real.^_$s^ lvl_s8qS lvl_s8qP

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qU :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8qU = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qV :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8qV = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $w$s^^_s8nH lvl_s8qU lvl_s8qV of ww_s8nG { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8r4 = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r5 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8r5 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8r2 = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r3 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8r3 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r0 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8r0 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r1 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8r1 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8qY = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8qZ = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8qW = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qX :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8qX = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qW

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD lvl_s8qX testStimes s_a7ZN of
      { (# ipv_a7ZQ, ipv1_a7ZR [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8qZ testFractionalPower ipv_a7ZQ of
      { (# ipv_X80i, ipv1_X80k [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r1 testFractionalPower ipv_X80i of
      { (# ipv_X80n, ipv1_X80p [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r3 testFractionalPower ipv_X80n of
      { (# ipv_X80s, ipv1_X80u [Dmd=<L,A>] #) ->
      $smeasure_s8bt lvl_s8r5 testIntegralPower ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s80z
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8b7
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ


==================== Simplifier ====================
2019-11-05 16:48:08.273887373 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [final],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 535, types: 542, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dU :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dU = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qK :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8qK = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8dM :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8dM
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qK)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dC = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dA :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dA = 1

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8cz :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8cu [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8dC)
                        lvl_s8dU
                 of wild_a8eO [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
                 }}]
$seven_s8cz
  = \ (n_a8cu :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8cu lvl_s8dC)
             lvl_s8dU
      of wild_a8eO
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8eO
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8nl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8nl
  = \ (ww_s8nc :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8n8 :: Integer)
      (ww_s8ng :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8n8 lvl_s8dC)
             lvl_s8dU
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8n8 lvl_s8dA
          of {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8ng
          };
        1# ->
          $wg1_s8nl
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nc ww_s8nc)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8n8 lvl_s8dC)
            ww_s8ng
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8nv [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8nv
  = \ (ww_s8nq :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8nn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8nn lvl_s8dC)
             lvl_s8dU
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nn lvl_s8dA
          of {
            __DEFAULT ->
              $wg1_s8nl
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dC)
                ww_s8nq;
            1# -> ww_s8nq
          };
        1# ->
          $wf_s8nv
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8nq ww_s8nq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8nn lvl_s8dC)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8nB [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8nB
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8nx lvl_s8dU
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8nx lvl_s8dU
          of {
            __DEFAULT ->
              case w_s8nw of { ghc-prim-0.5.3:GHC.Types.D# ww_s8nq ->
              $wf_s8nv ww_s8nq w_s8nx
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8dM of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8bV [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nw [Occ=Once] :: Double)
                 (w_s8nx [Occ=Once] :: Integer) ->
                 case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
                 }}]
$s^_s8bV
  = \ (w_s8nw :: Double) (w_s8nx :: Integer) ->
      case $w$s^_s8nB w_s8nw w_s8nx of ww_s8nA { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nA
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8nH [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8nH
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8nD lvl_s8dU
      of {
        __DEFAULT ->
          case $w$s^_s8nB
                 w_s8nC (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8nD)
          of ww_s8nA
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8nA
          };
        1# -> $w$s^_s8nB w_s8nC w_s8nD
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8bJ [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8nC [Occ=Once] :: Double)
                 (w_s8nD [Occ=Once] :: Integer) ->
                 case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
                 }}]
$s^^_s8bJ
  = \ (w_s8nC :: Double) (w_s8nD :: Integer) ->
      case $w$s^^_s8nH w_s8nC w_s8nD of ww_s8nG { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cO [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8cO
  = \ (ds_a803 :: [Char]) ->
      case ds_a803 of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a807 [Dmd=<S,H>] xs_a808 [Dmd=<S,U>] ->
          case x_a807 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_a7ZW [Dmd=<L,A>] ->
          go_s8cO xs_a808
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UU = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UV :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UV = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7UW = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7UX :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7UX = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7UW

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7UV $trModule_s7UX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dV :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8dV = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8dW = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8dX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8dX = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qL :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8qL = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8dW

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bD
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8bD
  = \ (description_a1VE :: String)
      (f_a1VF :: String)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case go_s8cO f_a1VF of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YD, ipv1_X7YF [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bF
          = case ipv1_X7YF of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7YW [Dmd=<L,A>], y_X7YY [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7YY
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bF lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bF (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Y8, ww4_X7Ya #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Y8 ww4_X7Ya
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YD
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8bx
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8bx
  = \ (description_a1VE :: String)
      (f_a1VF :: Double)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_a80m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YJ, ipv1_X7YL [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bz
          = case ipv1_X7YL of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Z2 [Dmd=<L,A>], y_X7Z4 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z4
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bz lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bz (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Ye, ww4_X7Yg #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Ye ww4_X7Yg
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YJ
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8bt
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8bt
  = \ (description_a1VE :: String)
      (f_a1VF :: Integer)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case f_a1VF of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YL, ipv1_X7YN [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8bv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8bv
          = case ipv1_X7YN of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Z4 [Dmd=<L,A>], y_X7Z6 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Z6
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8bv lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8bv (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yg, ww4_X7Yi #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Yg ww4_X7Yi
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YL
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7Y1
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8bS :: NFData String).
              measure_s7Y1 @ String $dNFData_X8bS
              = $smeasure_s8bD
        "SPEC measure @ Double"
            forall ($dNFData_X8bM :: NFData Double).
              measure_s7Y1 @ Double $dNFData_X8bM
              = $smeasure_s8bx
        "SPEC measure @ Integer"
            forall ($dNFData_X8bI :: NFData Integer).
              measure_s7Y1 @ Integer $dNFData_X8bI
              = $smeasure_s8bt]
measure_s7Y1
  = \ (@ a_a5LI)
      ($dNFData_a5LK :: NFData a_a5LI)
      (description_a1VE :: String)
      (f_a1VF :: a_a5LI)
      (s_a7Vs
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Vs
      of
      { (# ipv_a7VE, ipv1_a7VF [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5LK
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5LI>_N
                    :: NFData a_a5LI ~R# (a_a5LI -> ())))
             f_a1VF
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7VE
      of
      { (# ipv_X7YS, ipv1_X7YU [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8br :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8br
          = case ipv1_X7YU of { (ds1_a7VJ [Dmd=<L,A>], y_a7VK [Dmd=<S,U>]) ->
            case ipv1_a7VF of { (ds1_X7Zb [Dmd=<L,A>], y_X7Zd [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7VK y_X7Zd
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1VE
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8br lvl_s8dX)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Ws, ww4_a7Wt #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8dV
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8br (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Yn, ww4_X7Yp #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8qL ww3_X7Yn ww4_X7Yp
                          }))
                      ww3_a7Ws
                      ww4_a7Wt
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7YS
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7Y1
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7Y1
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qP :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8qP = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qQ :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8qQ = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8qR = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qQ

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8qP
      lvl_s8qR

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qS :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8qS = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = GHC.Real.^_$s^ lvl_s8qS lvl_s8qP

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qU :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8qU = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qV :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8qV = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $w$s^^_s8nH lvl_s8qU lvl_s8qV of ww_s8nG { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8nG
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r4 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8r4 = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r5 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8r5 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r2 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8r2 = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r3 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8r3 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8r0 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8r0 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8r1 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8r1 = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8r0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qY :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8qY = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8qZ = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8qW :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8qW = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8qX :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8qX = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8qW

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s80z
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s80z
  = \ (s_a7ZN
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8bD lvl_s8qX testStimes s_a7ZN of
      { (# ipv_a7ZQ, ipv1_a7ZR [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8qZ testFractionalPower ipv_a7ZQ of
      { (# ipv_X80i, ipv1_X80k [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r1 testFractionalPower ipv_X80i of
      { (# ipv_X80n, ipv1_X80p [Dmd=<L,A>] #) ->
      case $smeasure_s8bx lvl_s8r3 testFractionalPower ipv_X80n of
      { (# ipv_X80s, ipv1_X80u [Dmd=<L,A>] #) ->
      $smeasure_s8bt lvl_s8r5 testIntegralPower ipv_X80s
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s80z
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s80z
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8b7
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8b7
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s80z
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8b7
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8b7
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8cy :: Integral Integer).
      even @ Integer $dIntegral_s8cy
      = $seven_s8cz
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bU :: Integral Integer)
           ($dNum_s8bT :: Num Double).
      ^ @ Double @ Integer $dNum_s8bT $dIntegral_s8bU
      = $s^_s8bV
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8bI :: Integral Integer)
           ($dFractional_s8bH :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8bH $dIntegral_s8bI
      = $s^^_s8bJ

