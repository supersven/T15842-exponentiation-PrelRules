
==================== Pre unarise: ====================
2019-11-05 16:48:08.323596489 UTC

Main.$s^2 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [0#];

lvl_r8vq :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Negative exponent"#;

Main.$s^1 :: GHC.Types.Double
[GblId, Str=x] =
    \u []
        case GHC.CString.unpackCString# lvl_r8vq of sat_s8vA [Occ=Once] {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s8vA;
        };

Main.$seven1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [2#];

lvl1_r8vr :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1#];

Rec {
$wg1_r8vs
  :: GHC.Prim.Double#
     -> GHC.Integer.Type.Integer -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=3, Str=<L,U><S,U><L,U>, Unf=OtherCon []] =
    \r [ww_s8vB w_s8vC ww1_s8vD]
        case
            GHC.Integer.Type.remInteger w_s8vC Main.$seven1
        of
        sat_s8vE [Occ=Once]
        { __DEFAULT ->
              case GHC.Integer.Type.eqInteger# sat_s8vE Main.$s^2 of {
                __DEFAULT ->
                    case GHC.Integer.Type.eqInteger# w_s8vC lvl1_r8vr of {
                      __DEFAULT ->
                          case *## [ww_s8vB ww1_s8vD] of sat_s8vJ [Occ=Once] {
                            __DEFAULT ->
                                case
                                    GHC.Integer.Type.quotInteger w_s8vC Main.$seven1
                                of
                                sat_s8vI [Occ=Once]
                                { __DEFAULT ->
                                      case *## [ww_s8vB ww_s8vB] of sat_s8vH [Occ=Once] {
                                        __DEFAULT -> $wg1_r8vs sat_s8vH sat_s8vI sat_s8vJ;
                                      };
                                };
                          };
                      1# -> *## [ww_s8vB ww1_s8vD];
                    };
                1# ->
                    case
                        GHC.Integer.Type.quotInteger w_s8vC Main.$seven1
                    of
                    sat_s8vL [Occ=Once]
                    { __DEFAULT ->
                          case *## [ww_s8vB ww_s8vB] of sat_s8vK [Occ=Once] {
                            __DEFAULT -> $wg1_r8vs sat_s8vK sat_s8vL ww1_s8vD;
                          };
                    };
              };
        };
end Rec }

Rec {
Main.$wf [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: GHC.Prim.Double# -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    \r [ww_s8vM w_s8vN]
        case
            GHC.Integer.Type.remInteger w_s8vN Main.$seven1
        of
        sat_s8vO [Occ=Once]
        { __DEFAULT ->
              case GHC.Integer.Type.eqInteger# sat_s8vO Main.$s^2 of {
                __DEFAULT ->
                    case GHC.Integer.Type.eqInteger# w_s8vN lvl1_r8vr of {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.quotInteger w_s8vN Main.$seven1
                          of
                          sat_s8vS [Occ=Once]
                          { __DEFAULT ->
                                case *## [ww_s8vM ww_s8vM] of sat_s8vR [Occ=Once] {
                                  __DEFAULT -> $wg1_r8vs sat_s8vR sat_s8vS ww_s8vM;
                                };
                          };
                      1# -> ww_s8vM;
                    };
                1# ->
                    case
                        GHC.Integer.Type.quotInteger w_s8vN Main.$seven1
                    of
                    sat_s8vU [Occ=Once]
                    { __DEFAULT ->
                          case *## [ww_s8vM ww_s8vM] of sat_s8vT [Occ=Once] {
                            __DEFAULT -> Main.$wf sat_s8vT sat_s8vU;
                          };
                    };
              };
        };
end Rec }

Main.$w$s^ [InlPrag=NOUSERINLINE[1]]
  :: GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,1*U(U)><S,U>, Unf=OtherCon []] =
    \r [w_s8vV w1_s8vW]
        case GHC.Integer.Type.ltInteger# w1_s8vW Main.$s^2 of {
          __DEFAULT ->
              case GHC.Integer.Type.eqInteger# w1_s8vW Main.$s^2 of {
                __DEFAULT ->
                    case w_s8vV of {
                      GHC.Types.D# ww1_s8w0 [Occ=Once] -> Main.$wf ww1_s8w0 w1_s8vW;
                    };
                1# -> 1.0##;
              };
          1# -> Main.$s^1;
        };

Main.$w$s^^ [InlPrag=NOUSERINLINE[1]]
  :: GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,1*U(U)><S,U>, Unf=OtherCon []] =
    \r [w_s8w2 w1_s8w3]
        case GHC.Integer.Type.geInteger# w1_s8w3 Main.$s^2 of {
          __DEFAULT ->
              case
                  GHC.Integer.Type.negateInteger w1_s8w3
              of
              sat_s8w5 [Occ=Once]
              { __DEFAULT ->
                    case Main.$w$s^ w_s8w2 sat_s8w5 of ww_s8w6 [Occ=Once] {
                      __DEFAULT -> /## [1.0## ww_s8w6];
                    };
              };
          1# -> Main.$w$s^ w_s8w2 w1_s8w3;
        };

Rec {
Main.main_go [Occ=LoopBreaker] :: [GHC.Types.Char] -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    \r [ds_s8w7]
        case ds_s8w7 of {
          [] -> () [];
          : x_s8w9 [Occ=Once!] xs_s8wa [Occ=Once] ->
              case x_s8w9 of {
                GHC.Types.C# _ [Occ=Dead] -> Main.main_go xs_s8wa;
              };
        };
end Rec }

Main.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "main"#;

Main.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Main.$trModule4];

Main.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Main"#;

Main.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Main.$trModule2];

Main.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Main.$trModule3 Main.$trModule1];

Main.main6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " milli seconds -- "#;

Main.main5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " pico seconds"#;

Main.main7 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1000000000#];

Main.main4 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main5;

Main.main_$smeasure2
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    \r [description_s8wd f_s8we s_s8wf]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8wf
        of
        { (#,#) ipv_s8wh [Occ=Once] ipv1_s8wi [Occ=Once!] ->
              case Main.main_go f_s8we of {
                () ->
                    case
                        System.CPUTime.Posix.ClockGetTime.getCPUTime4
                            System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8wh
                    of
                    { (#,#) ipv2_s8wl [Occ=Once] ipv3_s8wm [Occ=Once!] ->
                          let {
                            duration_s8wn :: GHC.Integer.Type.Integer
                            [LclId] =
                                \u []
                                    case ipv3_s8wm of {
                                      (,) _ [Occ=Dead] y_s8wq [Occ=Once] ->
                                          case ipv1_s8wi of {
                                            (,) _ [Occ=Dead] y1_s8wt [Occ=Once] ->
                                                GHC.Integer.Type.minusInteger y_s8wq y1_s8wt;
                                          };
                                    }; } in
                          let {
                            sat_s8wF [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                \u []
                                    let {
                                      sat_s8wD [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          \s []
                                              case
                                                  GHC.Integer.Type.divInteger
                                                      duration_s8wn Main.main7
                                              of
                                              sat_s8wu [Occ=Once]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Show.$w$cshowsPrec4
                                                            0# sat_s8wu GHC.Types.[]
                                                    of
                                                    { (#,#) ww3_s8ww [Occ=Once]
                                                            ww4_s8wx [Occ=Once] ->
                                                          let {
                                                            sat_s8wC [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                \s []
                                                                    let {
                                                                      sat_s8wB [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          \u []
                                                                              case
                                                                                  GHC.Show.$w$cshowsPrec4
                                                                                      0#
                                                                                      duration_s8wn
                                                                                      GHC.Types.[]
                                                                              of
                                                                              { (#,#) ww5_s8wz [Occ=Once]
                                                                                      ww6_s8wA [Occ=Once] ->
                                                                                    GHC.Base.++_$s++
                                                                                        Main.main4
                                                                                        ww5_s8wz
                                                                                        ww6_s8wA;
                                                                              };
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          Main.main6 sat_s8wB;
                                                          } in 
                                                            GHC.Base.++_$s++
                                                                sat_s8wC ww3_s8ww ww4_s8wx;
                                                    };
                                              };
                                    } in 
                                      case
                                          GHC.Base.++ description_s8wd sat_s8wD
                                      of
                                      sat_s8wE [Occ=Once]
                                      { __DEFAULT ->
                                            GHC.Show.showLitString sat_s8wE GHC.Show.$fShow[]1;
                                      }; } in
                          let {
                            sat_s8wG [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)3 sat_s8wF];
                          } in 
                            GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout sat_s8wG GHC.Types.True ipv2_s8wl;
                    };
              };
        };

Main.main_$smeasure1
  :: GHC.Base.String
     -> GHC.Types.Double
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*H><L,U>, Unf=OtherCon []] =
    \r [description_s8wH f_s8wI s_s8wJ]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8wJ
        of
        { (#,#) ipv_s8wL [Occ=Once] ipv1_s8wM [Occ=Once!] ->
              case f_s8wI of {
                GHC.Types.D# _ [Occ=Dead] ->
                    case
                        System.CPUTime.Posix.ClockGetTime.getCPUTime4
                            System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8wL
                    of
                    { (#,#) ipv3_s8wQ [Occ=Once] ipv4_s8wR [Occ=Once!] ->
                          let {
                            duration_s8wS :: GHC.Integer.Type.Integer
                            [LclId] =
                                \u []
                                    case ipv4_s8wR of {
                                      (,) _ [Occ=Dead] y_s8wV [Occ=Once] ->
                                          case ipv1_s8wM of {
                                            (,) _ [Occ=Dead] y1_s8wY [Occ=Once] ->
                                                GHC.Integer.Type.minusInteger y_s8wV y1_s8wY;
                                          };
                                    }; } in
                          let {
                            sat_s8xa [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                \u []
                                    let {
                                      sat_s8x8 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          \s []
                                              case
                                                  GHC.Integer.Type.divInteger
                                                      duration_s8wS Main.main7
                                              of
                                              sat_s8wZ [Occ=Once]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Show.$w$cshowsPrec4
                                                            0# sat_s8wZ GHC.Types.[]
                                                    of
                                                    { (#,#) ww3_s8x1 [Occ=Once]
                                                            ww4_s8x2 [Occ=Once] ->
                                                          let {
                                                            sat_s8x7 [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                \s []
                                                                    let {
                                                                      sat_s8x6 [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          \u []
                                                                              case
                                                                                  GHC.Show.$w$cshowsPrec4
                                                                                      0#
                                                                                      duration_s8wS
                                                                                      GHC.Types.[]
                                                                              of
                                                                              { (#,#) ww5_s8x4 [Occ=Once]
                                                                                      ww6_s8x5 [Occ=Once] ->
                                                                                    GHC.Base.++_$s++
                                                                                        Main.main4
                                                                                        ww5_s8x4
                                                                                        ww6_s8x5;
                                                                              };
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          Main.main6 sat_s8x6;
                                                          } in 
                                                            GHC.Base.++_$s++
                                                                sat_s8x7 ww3_s8x1 ww4_s8x2;
                                                    };
                                              };
                                    } in 
                                      case
                                          GHC.Base.++ description_s8wH sat_s8x8
                                      of
                                      sat_s8x9 [Occ=Once]
                                      { __DEFAULT ->
                                            GHC.Show.showLitString sat_s8x9 GHC.Show.$fShow[]1;
                                      }; } in
                          let {
                            sat_s8xb [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)3 sat_s8xa];
                          } in 
                            GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout sat_s8xb GHC.Types.True ipv3_s8wQ;
                    };
              };
        };

Main.main_$smeasure
  :: GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    \r [description_s8xc f_s8xd s_s8xe]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8xe
        of
        { (#,#) ipv_s8xg [Occ=Once] ipv1_s8xh [Occ=Once!] ->
              case f_s8xd of {
                __DEFAULT ->
                    case
                        System.CPUTime.Posix.ClockGetTime.getCPUTime4
                            System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8xg
                    of
                    { (#,#) ipv2_s8xk [Occ=Once] ipv3_s8xl [Occ=Once!] ->
                          let {
                            duration_s8xm :: GHC.Integer.Type.Integer
                            [LclId] =
                                \u []
                                    case ipv3_s8xl of {
                                      (,) _ [Occ=Dead] y_s8xp [Occ=Once] ->
                                          case ipv1_s8xh of {
                                            (,) _ [Occ=Dead] y1_s8xs [Occ=Once] ->
                                                GHC.Integer.Type.minusInteger y_s8xp y1_s8xs;
                                          };
                                    }; } in
                          let {
                            sat_s8xE [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                \u []
                                    let {
                                      sat_s8xC [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          \s []
                                              case
                                                  GHC.Integer.Type.divInteger
                                                      duration_s8xm Main.main7
                                              of
                                              sat_s8xt [Occ=Once]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Show.$w$cshowsPrec4
                                                            0# sat_s8xt GHC.Types.[]
                                                    of
                                                    { (#,#) ww3_s8xv [Occ=Once]
                                                            ww4_s8xw [Occ=Once] ->
                                                          let {
                                                            sat_s8xB [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                \s []
                                                                    let {
                                                                      sat_s8xA [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          \u []
                                                                              case
                                                                                  GHC.Show.$w$cshowsPrec4
                                                                                      0#
                                                                                      duration_s8xm
                                                                                      GHC.Types.[]
                                                                              of
                                                                              { (#,#) ww5_s8xy [Occ=Once]
                                                                                      ww6_s8xz [Occ=Once] ->
                                                                                    GHC.Base.++_$s++
                                                                                        Main.main4
                                                                                        ww5_s8xy
                                                                                        ww6_s8xz;
                                                                              };
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          Main.main6 sat_s8xA;
                                                          } in 
                                                            GHC.Base.++_$s++
                                                                sat_s8xB ww3_s8xv ww4_s8xw;
                                                    };
                                              };
                                    } in 
                                      case
                                          GHC.Base.++ description_s8xc sat_s8xC
                                      of
                                      sat_s8xD [Occ=Once]
                                      { __DEFAULT ->
                                            GHC.Show.showLitString sat_s8xD GHC.Show.$fShow[]1;
                                      }; } in
                          let {
                            sat_s8xF [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)3 sat_s8xE];
                          } in 
                            GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout sat_s8xF GHC.Types.True ipv2_s8xk;
                    };
              };
        };

Main.measure1
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [$dNFData_s8xG description_s8xH f_s8xI s_s8xJ]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8xJ
        of
        { (#,#) ipv_s8xL [Occ=Once] ipv1_s8xM [Occ=Once!] ->
              case $dNFData_s8xG f_s8xI of {
                () ->
                    case
                        System.CPUTime.Posix.ClockGetTime.getCPUTime4
                            System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8xL
                    of
                    { (#,#) ipv2_s8xP [Occ=Once] ipv3_s8xQ [Occ=Once!] ->
                          let {
                            duration_s8xR :: GHC.Integer.Type.Integer
                            [LclId] =
                                \u []
                                    case ipv3_s8xQ of {
                                      (,) _ [Occ=Dead] y_s8xU [Occ=Once] ->
                                          case ipv1_s8xM of {
                                            (,) _ [Occ=Dead] y1_s8xX [Occ=Once] ->
                                                GHC.Integer.Type.minusInteger y_s8xU y1_s8xX;
                                          };
                                    }; } in
                          let {
                            sat_s8y9 [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                \u []
                                    let {
                                      sat_s8y7 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          \s []
                                              case
                                                  GHC.Integer.Type.divInteger
                                                      duration_s8xR Main.main7
                                              of
                                              sat_s8xY [Occ=Once]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Show.$w$cshowsPrec4
                                                            0# sat_s8xY GHC.Types.[]
                                                    of
                                                    { (#,#) ww3_s8y0 [Occ=Once]
                                                            ww4_s8y1 [Occ=Once] ->
                                                          let {
                                                            sat_s8y6 [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                \s []
                                                                    let {
                                                                      sat_s8y5 [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          \u []
                                                                              case
                                                                                  GHC.Show.$w$cshowsPrec4
                                                                                      0#
                                                                                      duration_s8xR
                                                                                      GHC.Types.[]
                                                                              of
                                                                              { (#,#) ww5_s8y3 [Occ=Once]
                                                                                      ww6_s8y4 [Occ=Once] ->
                                                                                    GHC.Base.++_$s++
                                                                                        Main.main4
                                                                                        ww5_s8y3
                                                                                        ww6_s8y4;
                                                                              };
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          Main.main6 sat_s8y5;
                                                          } in 
                                                            GHC.Base.++_$s++
                                                                sat_s8y6 ww3_s8y0 ww4_s8y1;
                                                    };
                                              };
                                    } in 
                                      case
                                          GHC.Base.++ description_s8xH sat_s8y7
                                      of
                                      sat_s8y8 [Occ=Once]
                                      { __DEFAULT ->
                                            GHC.Show.showLitString sat_s8y8 GHC.Show.$fShow[]1;
                                      }; } in
                          let {
                            sat_s8ya [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)3 sat_s8y9];
                          } in 
                            GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout sat_s8ya GHC.Types.True ipv2_s8xP;
                    };
              };
        };

Main.measure
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String -> a -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Main.measure1 eta_B4 eta_B3 eta_B2 eta_B1;

Main.testIntegralPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1000000#];

Main.testStimes2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "foo"#;

Main.testStimes1 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.testStimes2;

Main.testStimes :: GHC.Base.String
[GblId] =
    \u []
        Data.Semigroup.Internal.stimesList
            GHC.Real.$fIntegralInteger
            Main.testIntegralPower1
            Main.testStimes1;

Main.testIntegralPower2 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [3#];

Main.testIntegralPower :: GHC.Integer.Type.Integer
[GblId] =
    \u []
        GHC.Real.^_$s^ Main.testIntegralPower2 Main.testIntegralPower1;

Main.testFractionalPower2 :: GHC.Types.Double
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.D#! [5.0##];

Main.testFractionalPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [441#];

Main.testFractionalPower :: GHC.Types.Double
[GblId] =
    \u []
        case
            Main.$w$s^^ Main.testFractionalPower2 Main.testFractionalPower1
        of
        ww_s8yb [Occ=Once]
        { __DEFAULT -> GHC.Types.D# [ww_s8yb];
        };

Main.main3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integral power : "#;

Main.main2 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main3;

Main.main9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 3 : "#;

Main.main8 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main9;

Main.main11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 2 : "#;

Main.main10 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main11;

Main.main13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 1 : "#;

Main.main12 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main13;

Main.main15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "stimes : "#;

Main.main14 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main15;

Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [s_s8yc]
        case Main.main_$smeasure2 Main.main14 Main.testStimes s_s8yc of {
          (#,#) ipv_s8ye [Occ=Once] _ [Occ=Dead] ->
              case
                  Main.main_$smeasure1 Main.main12 Main.testFractionalPower ipv_s8ye
              of
              { (#,#) ipv2_s8yh [Occ=Once] _ [Occ=Dead] ->
                    case
                        Main.main_$smeasure1 Main.main10 Main.testFractionalPower ipv2_s8yh
                    of
                    { (#,#) ipv4_s8yk [Occ=Once] _ [Occ=Dead] ->
                          case
                              Main.main_$smeasure1 Main.main8 Main.testFractionalPower ipv4_s8yk
                          of
                          { (#,#) ipv6_s8yn [Occ=Once] _ [Occ=Dead] ->
                                Main.main_$smeasure Main.main2 Main.testIntegralPower ipv6_s8yn;
                          };
                    };
              };
        };

Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [eta_B1] Main.main1 eta_B1;

Main.main16
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Unf=OtherCon []] =
    \r [eta_B1] GHC.TopHandler.runMainIO1 Main.main1 eta_B1;

:Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Unf=OtherCon []] =
    \r [eta_B1] Main.main16 eta_B1;


==================== STG syntax: ====================
2019-11-05 16:48:08.331539858 UTC

Main.$s^2 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [0#];

lvl_r8vq :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Negative exponent"#;

Main.$s^1 :: GHC.Types.Double
[GblId, Str=x] =
    \u []
        case GHC.CString.unpackCString# lvl_r8vq of sat_s8vA [Occ=Once] {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s8vA;
        };

Main.$seven1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [2#];

lvl1_r8vr :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1#];

Rec {
$wg1_r8vs
  :: GHC.Prim.Double#
     -> GHC.Integer.Type.Integer -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=3, Str=<L,U><S,U><L,U>, Unf=OtherCon []] =
    \r [ww_s8vB w_s8vC ww1_s8vD]
        case
            GHC.Integer.Type.remInteger w_s8vC Main.$seven1
        of
        sat_s8vE [Occ=Once]
        { __DEFAULT ->
              case GHC.Integer.Type.eqInteger# sat_s8vE Main.$s^2 of {
                __DEFAULT ->
                    case GHC.Integer.Type.eqInteger# w_s8vC lvl1_r8vr of {
                      __DEFAULT ->
                          case *## [ww_s8vB ww1_s8vD] of sat_s8vJ [Occ=Once] {
                            __DEFAULT ->
                                case
                                    GHC.Integer.Type.quotInteger w_s8vC Main.$seven1
                                of
                                sat_s8vI [Occ=Once]
                                { __DEFAULT ->
                                      case *## [ww_s8vB ww_s8vB] of sat_s8vH [Occ=Once] {
                                        __DEFAULT -> $wg1_r8vs sat_s8vH sat_s8vI sat_s8vJ;
                                      };
                                };
                          };
                      1# -> *## [ww_s8vB ww1_s8vD];
                    };
                1# ->
                    case
                        GHC.Integer.Type.quotInteger w_s8vC Main.$seven1
                    of
                    sat_s8vL [Occ=Once]
                    { __DEFAULT ->
                          case *## [ww_s8vB ww_s8vB] of sat_s8vK [Occ=Once] {
                            __DEFAULT -> $wg1_r8vs sat_s8vK sat_s8vL ww1_s8vD;
                          };
                    };
              };
        };
end Rec }

Rec {
Main.$wf [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: GHC.Prim.Double# -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    \r [ww_s8vM w_s8vN]
        case
            GHC.Integer.Type.remInteger w_s8vN Main.$seven1
        of
        sat_s8vO [Occ=Once]
        { __DEFAULT ->
              case GHC.Integer.Type.eqInteger# sat_s8vO Main.$s^2 of {
                __DEFAULT ->
                    case GHC.Integer.Type.eqInteger# w_s8vN lvl1_r8vr of {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.quotInteger w_s8vN Main.$seven1
                          of
                          sat_s8vS [Occ=Once]
                          { __DEFAULT ->
                                case *## [ww_s8vM ww_s8vM] of sat_s8vR [Occ=Once] {
                                  __DEFAULT -> $wg1_r8vs sat_s8vR sat_s8vS ww_s8vM;
                                };
                          };
                      1# -> ww_s8vM;
                    };
                1# ->
                    case
                        GHC.Integer.Type.quotInteger w_s8vN Main.$seven1
                    of
                    sat_s8vU [Occ=Once]
                    { __DEFAULT ->
                          case *## [ww_s8vM ww_s8vM] of sat_s8vT [Occ=Once] {
                            __DEFAULT -> Main.$wf sat_s8vT sat_s8vU;
                          };
                    };
              };
        };
end Rec }

Main.$w$s^ [InlPrag=NOUSERINLINE[1]]
  :: GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,1*U(U)><S,U>, Unf=OtherCon []] =
    \r [w_s8vV w1_s8vW]
        case GHC.Integer.Type.ltInteger# w1_s8vW Main.$s^2 of {
          __DEFAULT ->
              case GHC.Integer.Type.eqInteger# w1_s8vW Main.$s^2 of {
                __DEFAULT ->
                    case w_s8vV of {
                      GHC.Types.D# ww1_s8w0 [Occ=Once] -> Main.$wf ww1_s8w0 w1_s8vW;
                    };
                1# -> 1.0##;
              };
          1# -> Main.$s^1;
        };

Main.$w$s^^ [InlPrag=NOUSERINLINE[1]]
  :: GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,1*U(U)><S,U>, Unf=OtherCon []] =
    \r [w_s8w2 w1_s8w3]
        case GHC.Integer.Type.geInteger# w1_s8w3 Main.$s^2 of {
          __DEFAULT ->
              case
                  GHC.Integer.Type.negateInteger w1_s8w3
              of
              sat_s8w5 [Occ=Once]
              { __DEFAULT ->
                    case Main.$w$s^ w_s8w2 sat_s8w5 of ww_s8w6 [Occ=Once] {
                      __DEFAULT -> /## [1.0## ww_s8w6];
                    };
              };
          1# -> Main.$w$s^ w_s8w2 w1_s8w3;
        };

Rec {
Main.main_go [Occ=LoopBreaker] :: [GHC.Types.Char] -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    \r [ds_s8w7]
        case ds_s8w7 of {
          [] -> () [];
          : x_s8w9 [Occ=Once!] xs_s8wa [Occ=Once] ->
              case x_s8w9 of {
                GHC.Types.C# _ [Occ=Dead] -> Main.main_go xs_s8wa;
              };
        };
end Rec }

Main.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "main"#;

Main.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Main.$trModule4];

Main.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Main"#;

Main.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Main.$trModule2];

Main.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Main.$trModule3 Main.$trModule1];

Main.main6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " milli seconds -- "#;

Main.main5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " pico seconds"#;

Main.main7 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1000000000#];

Main.main4 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main5;

Main.main_$smeasure2
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    \r [description_s8wd f_s8we void_0E]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        { Unit# ipv1_s8wi [Occ=Once!] ->
              case Main.main_go f_s8we of {
                () ->
                    case
                        System.CPUTime.Posix.ClockGetTime.getCPUTime4
                            System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
                    of
                    { Unit# ipv3_s8wm [Occ=Once!] ->
                          let {
                            duration_s8wn :: GHC.Integer.Type.Integer
                            [LclId] =
                                \u []
                                    case ipv3_s8wm of {
                                      (,) _ [Occ=Dead] y_s8wq [Occ=Once] ->
                                          case ipv1_s8wi of {
                                            (,) _ [Occ=Dead] y1_s8wt [Occ=Once] ->
                                                GHC.Integer.Type.minusInteger y_s8wq y1_s8wt;
                                          };
                                    }; } in
                          let {
                            sat_s8wF [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                \u []
                                    let {
                                      sat_s8wD [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          \s []
                                              case
                                                  GHC.Integer.Type.divInteger
                                                      duration_s8wn Main.main7
                                              of
                                              sat_s8wu [Occ=Once]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Show.$w$cshowsPrec4
                                                            0# sat_s8wu GHC.Types.[]
                                                    of
                                                    { (#,#) ww3_s8ww [Occ=Once]
                                                            ww4_s8wx [Occ=Once] ->
                                                          let {
                                                            sat_s8wC [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                \s []
                                                                    let {
                                                                      sat_s8wB [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          \u []
                                                                              case
                                                                                  GHC.Show.$w$cshowsPrec4
                                                                                      0#
                                                                                      duration_s8wn
                                                                                      GHC.Types.[]
                                                                              of
                                                                              { (#,#) ww5_s8wz [Occ=Once]
                                                                                      ww6_s8wA [Occ=Once] ->
                                                                                    GHC.Base.++_$s++
                                                                                        Main.main4
                                                                                        ww5_s8wz
                                                                                        ww6_s8wA;
                                                                              };
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          Main.main6 sat_s8wB;
                                                          } in 
                                                            GHC.Base.++_$s++
                                                                sat_s8wC ww3_s8ww ww4_s8wx;
                                                    };
                                              };
                                    } in 
                                      case
                                          GHC.Base.++ description_s8wd sat_s8wD
                                      of
                                      sat_s8wE [Occ=Once]
                                      { __DEFAULT ->
                                            GHC.Show.showLitString sat_s8wE GHC.Show.$fShow[]1;
                                      }; } in
                          let {
                            sat_s8wG [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)3 sat_s8wF];
                          } in 
                            GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout sat_s8wG GHC.Types.True GHC.Prim.void#;
                    };
              };
        };

Main.main_$smeasure1
  :: GHC.Base.String
     -> GHC.Types.Double
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*H><L,U>, Unf=OtherCon []] =
    \r [description_s8wH f_s8wI void_0E]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        { Unit# ipv1_s8wM [Occ=Once!] ->
              case f_s8wI of {
                GHC.Types.D# _ [Occ=Dead] ->
                    case
                        System.CPUTime.Posix.ClockGetTime.getCPUTime4
                            System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
                    of
                    { Unit# ipv4_s8wR [Occ=Once!] ->
                          let {
                            duration_s8wS :: GHC.Integer.Type.Integer
                            [LclId] =
                                \u []
                                    case ipv4_s8wR of {
                                      (,) _ [Occ=Dead] y_s8wV [Occ=Once] ->
                                          case ipv1_s8wM of {
                                            (,) _ [Occ=Dead] y1_s8wY [Occ=Once] ->
                                                GHC.Integer.Type.minusInteger y_s8wV y1_s8wY;
                                          };
                                    }; } in
                          let {
                            sat_s8xa [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                \u []
                                    let {
                                      sat_s8x8 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          \s []
                                              case
                                                  GHC.Integer.Type.divInteger
                                                      duration_s8wS Main.main7
                                              of
                                              sat_s8wZ [Occ=Once]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Show.$w$cshowsPrec4
                                                            0# sat_s8wZ GHC.Types.[]
                                                    of
                                                    { (#,#) ww3_s8x1 [Occ=Once]
                                                            ww4_s8x2 [Occ=Once] ->
                                                          let {
                                                            sat_s8x7 [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                \s []
                                                                    let {
                                                                      sat_s8x6 [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          \u []
                                                                              case
                                                                                  GHC.Show.$w$cshowsPrec4
                                                                                      0#
                                                                                      duration_s8wS
                                                                                      GHC.Types.[]
                                                                              of
                                                                              { (#,#) ww5_s8x4 [Occ=Once]
                                                                                      ww6_s8x5 [Occ=Once] ->
                                                                                    GHC.Base.++_$s++
                                                                                        Main.main4
                                                                                        ww5_s8x4
                                                                                        ww6_s8x5;
                                                                              };
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          Main.main6 sat_s8x6;
                                                          } in 
                                                            GHC.Base.++_$s++
                                                                sat_s8x7 ww3_s8x1 ww4_s8x2;
                                                    };
                                              };
                                    } in 
                                      case
                                          GHC.Base.++ description_s8wH sat_s8x8
                                      of
                                      sat_s8x9 [Occ=Once]
                                      { __DEFAULT ->
                                            GHC.Show.showLitString sat_s8x9 GHC.Show.$fShow[]1;
                                      }; } in
                          let {
                            sat_s8xb [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)3 sat_s8xa];
                          } in 
                            GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout sat_s8xb GHC.Types.True GHC.Prim.void#;
                    };
              };
        };

Main.main_$smeasure
  :: GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    \r [description_s8xc f_s8xd void_0E]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        { Unit# ipv1_s8xh [Occ=Once!] ->
              case f_s8xd of {
                __DEFAULT ->
                    case
                        System.CPUTime.Posix.ClockGetTime.getCPUTime4
                            System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
                    of
                    { Unit# ipv3_s8xl [Occ=Once!] ->
                          let {
                            duration_s8xm :: GHC.Integer.Type.Integer
                            [LclId] =
                                \u []
                                    case ipv3_s8xl of {
                                      (,) _ [Occ=Dead] y_s8xp [Occ=Once] ->
                                          case ipv1_s8xh of {
                                            (,) _ [Occ=Dead] y1_s8xs [Occ=Once] ->
                                                GHC.Integer.Type.minusInteger y_s8xp y1_s8xs;
                                          };
                                    }; } in
                          let {
                            sat_s8xE [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                \u []
                                    let {
                                      sat_s8xC [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          \s []
                                              case
                                                  GHC.Integer.Type.divInteger
                                                      duration_s8xm Main.main7
                                              of
                                              sat_s8xt [Occ=Once]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Show.$w$cshowsPrec4
                                                            0# sat_s8xt GHC.Types.[]
                                                    of
                                                    { (#,#) ww3_s8xv [Occ=Once]
                                                            ww4_s8xw [Occ=Once] ->
                                                          let {
                                                            sat_s8xB [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                \s []
                                                                    let {
                                                                      sat_s8xA [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          \u []
                                                                              case
                                                                                  GHC.Show.$w$cshowsPrec4
                                                                                      0#
                                                                                      duration_s8xm
                                                                                      GHC.Types.[]
                                                                              of
                                                                              { (#,#) ww5_s8xy [Occ=Once]
                                                                                      ww6_s8xz [Occ=Once] ->
                                                                                    GHC.Base.++_$s++
                                                                                        Main.main4
                                                                                        ww5_s8xy
                                                                                        ww6_s8xz;
                                                                              };
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          Main.main6 sat_s8xA;
                                                          } in 
                                                            GHC.Base.++_$s++
                                                                sat_s8xB ww3_s8xv ww4_s8xw;
                                                    };
                                              };
                                    } in 
                                      case
                                          GHC.Base.++ description_s8xc sat_s8xC
                                      of
                                      sat_s8xD [Occ=Once]
                                      { __DEFAULT ->
                                            GHC.Show.showLitString sat_s8xD GHC.Show.$fShow[]1;
                                      }; } in
                          let {
                            sat_s8xF [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)3 sat_s8xE];
                          } in 
                            GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout sat_s8xF GHC.Types.True GHC.Prim.void#;
                    };
              };
        };

Main.measure1
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [$dNFData_s8xG description_s8xH f_s8xI void_0E]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        { Unit# ipv1_s8xM [Occ=Once!] ->
              case $dNFData_s8xG f_s8xI of {
                () ->
                    case
                        System.CPUTime.Posix.ClockGetTime.getCPUTime4
                            System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
                    of
                    { Unit# ipv3_s8xQ [Occ=Once!] ->
                          let {
                            duration_s8xR :: GHC.Integer.Type.Integer
                            [LclId] =
                                \u []
                                    case ipv3_s8xQ of {
                                      (,) _ [Occ=Dead] y_s8xU [Occ=Once] ->
                                          case ipv1_s8xM of {
                                            (,) _ [Occ=Dead] y1_s8xX [Occ=Once] ->
                                                GHC.Integer.Type.minusInteger y_s8xU y1_s8xX;
                                          };
                                    }; } in
                          let {
                            sat_s8y9 [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                \u []
                                    let {
                                      sat_s8y7 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          \s []
                                              case
                                                  GHC.Integer.Type.divInteger
                                                      duration_s8xR Main.main7
                                              of
                                              sat_s8xY [Occ=Once]
                                              { __DEFAULT ->
                                                    case
                                                        GHC.Show.$w$cshowsPrec4
                                                            0# sat_s8xY GHC.Types.[]
                                                    of
                                                    { (#,#) ww3_s8y0 [Occ=Once]
                                                            ww4_s8y1 [Occ=Once] ->
                                                          let {
                                                            sat_s8y6 [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                \s []
                                                                    let {
                                                                      sat_s8y5 [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          \u []
                                                                              case
                                                                                  GHC.Show.$w$cshowsPrec4
                                                                                      0#
                                                                                      duration_s8xR
                                                                                      GHC.Types.[]
                                                                              of
                                                                              { (#,#) ww5_s8y3 [Occ=Once]
                                                                                      ww6_s8y4 [Occ=Once] ->
                                                                                    GHC.Base.++_$s++
                                                                                        Main.main4
                                                                                        ww5_s8y3
                                                                                        ww6_s8y4;
                                                                              };
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          Main.main6 sat_s8y5;
                                                          } in 
                                                            GHC.Base.++_$s++
                                                                sat_s8y6 ww3_s8y0 ww4_s8y1;
                                                    };
                                              };
                                    } in 
                                      case
                                          GHC.Base.++ description_s8xH sat_s8y7
                                      of
                                      sat_s8y8 [Occ=Once]
                                      { __DEFAULT ->
                                            GHC.Show.showLitString sat_s8y8 GHC.Show.$fShow[]1;
                                      }; } in
                          let {
                            sat_s8ya [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)3 sat_s8y9];
                          } in 
                            GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout sat_s8ya GHC.Types.True GHC.Prim.void#;
                    };
              };
        };

Main.measure
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String -> a -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [eta_B4 eta_B3 eta_B2 void_0E]
        Main.measure1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

Main.testIntegralPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1000000#];

Main.testStimes2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "foo"#;

Main.testStimes1 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.testStimes2;

Main.testStimes :: GHC.Base.String
[GblId] =
    \u []
        Data.Semigroup.Internal.stimesList
            GHC.Real.$fIntegralInteger
            Main.testIntegralPower1
            Main.testStimes1;

Main.testIntegralPower2 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [3#];

Main.testIntegralPower :: GHC.Integer.Type.Integer
[GblId] =
    \u []
        GHC.Real.^_$s^ Main.testIntegralPower2 Main.testIntegralPower1;

Main.testFractionalPower2 :: GHC.Types.Double
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.D#! [5.0##];

Main.testFractionalPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [441#];

Main.testFractionalPower :: GHC.Types.Double
[GblId] =
    \u []
        case
            Main.$w$s^^ Main.testFractionalPower2 Main.testFractionalPower1
        of
        ww_s8yb [Occ=Once]
        { __DEFAULT -> GHC.Types.D# [ww_s8yb];
        };

Main.main3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integral power : "#;

Main.main2 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main3;

Main.main9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 3 : "#;

Main.main8 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main9;

Main.main11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 2 : "#;

Main.main10 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main11;

Main.main13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 1 : "#;

Main.main12 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main13;

Main.main15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "stimes : "#;

Main.main14 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main15;

Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [void_0E]
        case
            Main.main_$smeasure2 Main.main14 Main.testStimes GHC.Prim.void#
        of
        { Unit# _ [Occ=Dead] ->
              case
                  Main.main_$smeasure1
                      Main.main12 Main.testFractionalPower GHC.Prim.void#
              of
              { Unit# _ [Occ=Dead] ->
                    case
                        Main.main_$smeasure1
                            Main.main10 Main.testFractionalPower GHC.Prim.void#
                    of
                    { Unit# _ [Occ=Dead] ->
                          case
                              Main.main_$smeasure1
                                  Main.main8 Main.testFractionalPower GHC.Prim.void#
                          of
                          { Unit# _ [Occ=Dead] ->
                                Main.main_$smeasure
                                    Main.main2 Main.testIntegralPower GHC.Prim.void#;
                          };
                    };
              };
        };

Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [void_0E] Main.main1 GHC.Prim.void#;

Main.main16
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Unf=OtherCon []] =
    \r [void_0E] GHC.TopHandler.runMainIO1 Main.main1 GHC.Prim.void#;

:Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Unf=OtherCon []] =
    \r [void_0E] Main.main16 GHC.Prim.void#;

