
==================== Desugar (after optimization) ====================
2019-11-05 16:47:55.334412258 UTC

Result size of Desugar (after optimization)
  = {terms: 109, types: 80, coercions: 0, joins: 0/2}

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module
      (ghc-prim-0.6.1:GHC.Types.TrNameS "main"#)
      (ghc-prim-0.6.1:GHC.Types.TrNameS "Main"#)

-- RHS size: {terms: 44, types: 37, coercions: 0, joins: 0/2}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 760 60}]
measure
  = \ (@ a_a5HY) ($dNFData_a5I0 :: NFData a_a5HY) ->
      let {
        $dShow_a5JC :: Show [Char]
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=True,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        $dShow_a5JC = GHC.Show.$fShow[] @ Char GHC.Show.$fShowChar } in
      \ (description_a1W6 :: String) (f_a1W7 :: a_a5HY) ->
        >>=
          @ IO
          GHC.Base.$fMonadIO
          @ Integer
          @ ()
          getCPUTime
          (\ (start_a1W8 :: Integer) ->
             >>=
               @ IO
               GHC.Base.$fMonadIO
               @ Integer
               @ ()
               (deepseq @ a_a5HY @ (IO Integer) $dNFData_a5I0 f_a1W7 getCPUTime)
               (\ (end_a1Wa :: Integer) ->
                  let {
                    duration_a1Wb :: Integer
                    [LclId,
                     Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                             WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
                    duration_a1Wb
                      = - @ Integer GHC.Num.$fNumInteger end_a1Wa start_a1W8 } in
                  $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                    @ [Char]
                    @ (IO ())
                    (print @ [Char] $dShow_a5JC)
                    (++
                       @ Char
                       description_a1W6
                       (++
                          @ Char
                          (show
                             @ Integer
                             GHC.Show.$fShowInteger
                             (div
                                @ Integer GHC.Real.$fIntegralInteger duration_a1Wb 1000000000))
                          (++
                             @ Char
                             (ghc-prim-0.6.1:GHC.CString.unpackCString# " milli seconds -- "#)
                             (++
                                @ Char
                                (show @ Integer GHC.Show.$fShowInteger duration_a1Wb)
                                (ghc-prim-0.6.1:GHC.CString.unpackCString# " pico seconds"#)))))))

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = stimes
      @ [Char]
      (GHC.Base.$fSemigroup[] @ Char)
      @ Integer
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      441

-- RHS size: {terms: 34, types: 18, coercions: 0, joins: 0/0}
main :: IO ()
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
main
  = >>
      @ IO
      GHC.Base.$fMonadIO
      @ ()
      @ ()
      (measure
         @ String
         (Control.DeepSeq.$fNFData[] @ Char Control.DeepSeq.$fNFDataChar)
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
         testStimes)
      (>>
         @ IO
         GHC.Base.$fMonadIO
         @ ()
         @ ()
         (measure
            @ Double
            Control.DeepSeq.$fNFDataDouble
            (ghc-prim-0.6.1:GHC.CString.unpackCString#
               "fractional power 1 : "#)
            testFractionalPower)
         (>>
            @ IO
            GHC.Base.$fMonadIO
            @ ()
            @ ()
            (measure
               @ Double
               Control.DeepSeq.$fNFDataDouble
               (ghc-prim-0.6.1:GHC.CString.unpackCString#
                  "fractional power 2 : "#)
               testFractionalPower)
            (>>
               @ IO
               GHC.Base.$fMonadIO
               @ ()
               @ ()
               (measure
                  @ Double
                  Control.DeepSeq.$fNFDataDouble
                  (ghc-prim-0.6.1:GHC.CString.unpackCString#
                     "fractional power 3 : "#)
                  testFractionalPower)
               (measure
                  @ Integer
                  Control.DeepSeq.$fNFDataInteger
                  (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
                  testIntegralPower))))

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
:Main.main = GHC.TopHandler.runMainIO @ () main


