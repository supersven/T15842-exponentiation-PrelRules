
==================== Pre unarise: ====================
2019-11-05 16:47:55.899533371 UTC

Main.$s^2 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [0#];

lvl_r8xl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Negative exponent"#;

Main.$s^1 :: GHC.Types.Double
[GblId, Str=b] =
    \u []
        case GHC.CString.unpackCString# lvl_r8xl of sat_s8xv [Occ=Once] {
        __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s8xv;
        };

Main.$seven1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [2#];

lvl1_r8xm :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1#];

Rec {
$wg1_r8xn
  :: GHC.Prim.Double#
     -> GHC.Integer.Type.Integer -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=3, Str=<L,U><S,U><L,U>, Unf=OtherCon []] =
    \r [ww_s8xw w_s8xx ww1_s8xy]
        case
            GHC.Integer.Type.remInteger w_s8xx Main.$seven1
        of
        sat_s8xz [Occ=Once]
        {
        __DEFAULT ->
        case GHC.Integer.Type.eqInteger# sat_s8xz Main.$s^2 of {
          __DEFAULT ->
              case GHC.Integer.Type.eqInteger# w_s8xx lvl1_r8xm of {
                __DEFAULT ->
                    case *## [ww_s8xw ww1_s8xy] of sat_s8xE [Occ=Once] {
                    __DEFAULT ->
                    case
                        GHC.Integer.Type.quotInteger w_s8xx Main.$seven1
                    of
                    sat_s8xD [Occ=Once]
                    {
                    __DEFAULT ->
                    case *## [ww_s8xw ww_s8xw] of sat_s8xC [Occ=Once] {
                    __DEFAULT -> $wg1_r8xn sat_s8xC sat_s8xD sat_s8xE;
                    };
                    };
                    };
                1# -> *## [ww_s8xw ww1_s8xy];
              };
          1# ->
              case
                  GHC.Integer.Type.quotInteger w_s8xx Main.$seven1
              of
              sat_s8xG [Occ=Once]
              {
              __DEFAULT ->
              case *## [ww_s8xw ww_s8xw] of sat_s8xF [Occ=Once] {
              __DEFAULT -> $wg1_r8xn sat_s8xF sat_s8xG ww1_s8xy;
              };
              };
        };
        };
end Rec }

Rec {
Main.$wf [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: GHC.Prim.Double# -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    \r [ww_s8xH w_s8xI]
        case
            GHC.Integer.Type.remInteger w_s8xI Main.$seven1
        of
        sat_s8xJ [Occ=Once]
        {
        __DEFAULT ->
        case GHC.Integer.Type.eqInteger# sat_s8xJ Main.$s^2 of {
          __DEFAULT ->
              case GHC.Integer.Type.eqInteger# w_s8xI lvl1_r8xm of {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.quotInteger w_s8xI Main.$seven1
                    of
                    sat_s8xN [Occ=Once]
                    {
                    __DEFAULT ->
                    case *## [ww_s8xH ww_s8xH] of sat_s8xM [Occ=Once] {
                    __DEFAULT -> $wg1_r8xn sat_s8xM sat_s8xN ww_s8xH;
                    };
                    };
                1# -> ww_s8xH;
              };
          1# ->
              case
                  GHC.Integer.Type.quotInteger w_s8xI Main.$seven1
              of
              sat_s8xP [Occ=Once]
              {
              __DEFAULT ->
              case *## [ww_s8xH ww_s8xH] of sat_s8xO [Occ=Once] {
              __DEFAULT -> Main.$wf sat_s8xO sat_s8xP;
              };
              };
        };
        };
end Rec }

Main.$w$s^ [InlPrag=NOUSERINLINE[1]]
  :: GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,1*U(U)><S,U>, Unf=OtherCon []] =
    \r [w_s8xQ w1_s8xR]
        case GHC.Integer.Type.ltInteger# w1_s8xR Main.$s^2 of {
          __DEFAULT ->
              case GHC.Integer.Type.eqInteger# w1_s8xR Main.$s^2 of {
                __DEFAULT ->
                    case w_s8xQ of {
                    GHC.Types.D# ww1_s8xV [Occ=Once] -> Main.$wf ww1_s8xV w1_s8xR;
                    };
                1# -> 1.0##;
              };
          1# -> Main.$s^1;
        };

Main.$w$s^^ [InlPrag=NOUSERINLINE[1]]
  :: GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,1*U(U)><S,U>, Unf=OtherCon []] =
    \r [w_s8xX w1_s8xY]
        case GHC.Integer.Type.geInteger# w1_s8xY Main.$s^2 of {
          __DEFAULT ->
              case
                  GHC.Integer.Type.negateInteger w1_s8xY
              of
              sat_s8y0 [Occ=Once]
              {
              __DEFAULT ->
              case Main.$w$s^ w_s8xX sat_s8y0 of ww_s8y1 [Occ=Once] {
              __DEFAULT -> /## [1.0## ww_s8y1];
              };
              };
          1# -> Main.$w$s^ w_s8xX w1_s8xY;
        };

Rec {
Main.main_go [Occ=LoopBreaker] :: [GHC.Types.Char] -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    \r [ds_s8y2]
        case ds_s8y2 of {
          [] -> () [];
          : x_s8y4 [Occ=Once!] xs_s8y5 [Occ=Once] ->
              case x_s8y4 of {
              GHC.Types.C# _ [Occ=Dead] -> Main.main_go xs_s8y5;
              };
        };
end Rec }

Main.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "main"#;

Main.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Main.$trModule4];

Main.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Main"#;

Main.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Main.$trModule2];

Main.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Main.$trModule3 Main.$trModule1];

Main.main6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " milli seconds -- "#;

Main.main5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " pico seconds"#;

Main.main7 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1000000000#];

Main.main4 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main5;

Main.main_$smeasure2
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    \r [description_s8y8 f_s8y9 s_s8ya]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8ya
        of
        {
        (#,#) ipv_s8yc [Occ=Once] ipv1_s8yd [Occ=Once!] ->
        case Main.main_go f_s8y9 of {
        () ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8yc
        of
        {
        (#,#) ipv2_s8yg [Occ=Once] ipv3_s8yh [Occ=Once!] ->
        let {
          duration_s8yi :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv3_s8yh of {
                  (,) _ [Occ=Dead] y_s8yl [Occ=Once] ->
                  case ipv1_s8yd of {
                  (,) _ [Occ=Dead] y1_s8yo [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8yl y1_s8yo;
                  };
                  }; } in
        let {
          sat_s8yA [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8yy [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8yi Main.main7
                            of
                            sat_s8yp [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8yp GHC.Types.[] of {
                            (#,#) ww3_s8yr [Occ=Once] ww4_s8ys [Occ=Once] ->
                            let {
                              sat_s8yx [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8yw [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8yi GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8yu [Occ=Once] ww6_s8yv [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8yu ww6_s8yv;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8yw;
                            } in  GHC.Base.++_$s++ sat_s8yx ww3_s8yr ww4_s8ys;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8y8 sat_s8yy of sat_s8yz [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8yz GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8yB [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8yA];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8yB GHC.Types.True ipv2_s8yg;
        };
        };
        };

Main.main_$smeasure1
  :: GHC.Base.String
     -> GHC.Types.Double
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*H><L,U>, Unf=OtherCon []] =
    \r [description_s8yC f_s8yD s_s8yE]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8yE
        of
        {
        (#,#) ipv_s8yG [Occ=Once] ipv1_s8yH [Occ=Once!] ->
        case f_s8yD of {
        GHC.Types.D# _ [Occ=Dead] ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8yG
        of
        {
        (#,#) ipv3_s8yL [Occ=Once] ipv4_s8yM [Occ=Once!] ->
        let {
          duration_s8yN :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv4_s8yM of {
                  (,) _ [Occ=Dead] y_s8yQ [Occ=Once] ->
                  case ipv1_s8yH of {
                  (,) _ [Occ=Dead] y1_s8yT [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8yQ y1_s8yT;
                  };
                  }; } in
        let {
          sat_s8z5 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8z3 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8yN Main.main7
                            of
                            sat_s8yU [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8yU GHC.Types.[] of {
                            (#,#) ww3_s8yW [Occ=Once] ww4_s8yX [Occ=Once] ->
                            let {
                              sat_s8z2 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8z1 [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8yN GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8yZ [Occ=Once] ww6_s8z0 [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8yZ ww6_s8z0;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8z1;
                            } in  GHC.Base.++_$s++ sat_s8z2 ww3_s8yW ww4_s8yX;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8yC sat_s8z3 of sat_s8z4 [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8z4 GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8z6 [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8z5];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8z6 GHC.Types.True ipv3_s8yL;
        };
        };
        };

Main.main_$smeasure
  :: GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    \r [description_s8z7 f_s8z8 s_s8z9]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8z9
        of
        {
        (#,#) ipv_s8zb [Occ=Once] ipv1_s8zc [Occ=Once!] ->
        case f_s8z8 of {
        __DEFAULT ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8zb
        of
        {
        (#,#) ipv2_s8zf [Occ=Once] ipv3_s8zg [Occ=Once!] ->
        let {
          duration_s8zh :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv3_s8zg of {
                  (,) _ [Occ=Dead] y_s8zk [Occ=Once] ->
                  case ipv1_s8zc of {
                  (,) _ [Occ=Dead] y1_s8zn [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8zk y1_s8zn;
                  };
                  }; } in
        let {
          sat_s8zz [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8zx [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8zh Main.main7
                            of
                            sat_s8zo [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8zo GHC.Types.[] of {
                            (#,#) ww3_s8zq [Occ=Once] ww4_s8zr [Occ=Once] ->
                            let {
                              sat_s8zw [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8zv [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8zh GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8zt [Occ=Once] ww6_s8zu [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8zt ww6_s8zu;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8zv;
                            } in  GHC.Base.++_$s++ sat_s8zw ww3_s8zq ww4_s8zr;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8z7 sat_s8zx of sat_s8zy [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8zy GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8zA [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8zz];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8zA GHC.Types.True ipv2_s8zf;
        };
        };
        };

Main.measure1
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [$dNFData_s8zB description_s8zC f_s8zD s_s8zE]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8zE
        of
        {
        (#,#) ipv_s8zG [Occ=Once] ipv1_s8zH [Occ=Once!] ->
        case $dNFData_s8zB f_s8zD of {
        () ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8zG
        of
        {
        (#,#) ipv2_s8zK [Occ=Once] ipv3_s8zL [Occ=Once!] ->
        let {
          duration_s8zM :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv3_s8zL of {
                  (,) _ [Occ=Dead] y_s8zP [Occ=Once] ->
                  case ipv1_s8zH of {
                  (,) _ [Occ=Dead] y1_s8zS [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8zP y1_s8zS;
                  };
                  }; } in
        let {
          sat_s8A4 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8A2 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8zM Main.main7
                            of
                            sat_s8zT [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8zT GHC.Types.[] of {
                            (#,#) ww3_s8zV [Occ=Once] ww4_s8zW [Occ=Once] ->
                            let {
                              sat_s8A1 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8A0 [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8zM GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8zY [Occ=Once] ww6_s8zZ [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8zY ww6_s8zZ;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8A0;
                            } in  GHC.Base.++_$s++ sat_s8A1 ww3_s8zV ww4_s8zW;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8zC sat_s8A2 of sat_s8A3 [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8A3 GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8A5 [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8A4];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8A5 GHC.Types.True ipv2_s8zK;
        };
        };
        };

Main.measure
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String -> a -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Main.measure1 eta_B4 eta_B3 eta_B2 eta_B1;

Main.testIntegralPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1000000#];

Main.testStimes2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "foo"#;

Main.testStimes1 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.testStimes2;

Main.testStimes :: GHC.Base.String
[GblId] =
    \u []
        Data.Semigroup.Internal.stimesList
            GHC.Real.$fIntegralInteger
            Main.testIntegralPower1
            Main.testStimes1;

Main.testIntegralPower2 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [3#];

Main.testIntegralPower :: GHC.Integer.Type.Integer
[GblId] =
    \u []
        GHC.Real.^_$s^ Main.testIntegralPower2 Main.testIntegralPower1;

Main.testFractionalPower2 :: GHC.Types.Double
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.D#! [5.0##];

Main.testFractionalPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [441#];

Main.testFractionalPower :: GHC.Types.Double
[GblId] =
    \u []
        case
            Main.$w$s^^ Main.testFractionalPower2 Main.testFractionalPower1
        of
        ww_s8A6 [Occ=Once]
        {
        __DEFAULT -> GHC.Types.D# [ww_s8A6];
        };

Main.main3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integral power : "#;

Main.main2 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main3;

Main.main9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 3 : "#;

Main.main8 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main9;

Main.main11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 2 : "#;

Main.main10 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main11;

Main.main13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 1 : "#;

Main.main12 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main13;

Main.main15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "stimes : "#;

Main.main14 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main15;

Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [s_s8A7]
        case Main.main_$smeasure2 Main.main14 Main.testStimes s_s8A7 of {
        (#,#) ipv_s8A9 [Occ=Once] _ [Occ=Dead] ->
        case
            Main.main_$smeasure1 Main.main12 Main.testFractionalPower ipv_s8A9
        of
        {
        (#,#) ipv2_s8Ac [Occ=Once] _ [Occ=Dead] ->
        case
            Main.main_$smeasure1 Main.main10 Main.testFractionalPower ipv2_s8Ac
        of
        {
        (#,#) ipv4_s8Af [Occ=Once] _ [Occ=Dead] ->
        case
            Main.main_$smeasure1 Main.main8 Main.testFractionalPower ipv4_s8Af
        of
        {
        (#,#) ipv6_s8Ai [Occ=Once] _ [Occ=Dead] ->
        Main.main_$smeasure Main.main2 Main.testIntegralPower ipv6_s8Ai;
        };
        };
        };
        };

Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [eta_B1] Main.main1 eta_B1;

Main.main16
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [eta_B1] GHC.TopHandler.runMainIO1 Main.main1 eta_B1;

:Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [eta_B1] Main.main16 eta_B1;


==================== STG syntax: ====================
2019-11-05 16:47:55.906710718 UTC

Main.$s^2 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [0#];

lvl_r8xl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Negative exponent"#;

Main.$s^1 :: GHC.Types.Double
[GblId, Str=b] =
    \u []
        case GHC.CString.unpackCString# lvl_r8xl of sat_s8xv [Occ=Once] {
        __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s8xv;
        };

Main.$seven1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [2#];

lvl1_r8xm :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1#];

Rec {
$wg1_r8xn
  :: GHC.Prim.Double#
     -> GHC.Integer.Type.Integer -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=3, Str=<L,U><S,U><L,U>, Unf=OtherCon []] =
    \r [ww_s8xw w_s8xx ww1_s8xy]
        case
            GHC.Integer.Type.remInteger w_s8xx Main.$seven1
        of
        sat_s8xz [Occ=Once]
        {
        __DEFAULT ->
        case GHC.Integer.Type.eqInteger# sat_s8xz Main.$s^2 of {
          __DEFAULT ->
              case GHC.Integer.Type.eqInteger# w_s8xx lvl1_r8xm of {
                __DEFAULT ->
                    case *## [ww_s8xw ww1_s8xy] of sat_s8xE [Occ=Once] {
                    __DEFAULT ->
                    case
                        GHC.Integer.Type.quotInteger w_s8xx Main.$seven1
                    of
                    sat_s8xD [Occ=Once]
                    {
                    __DEFAULT ->
                    case *## [ww_s8xw ww_s8xw] of sat_s8xC [Occ=Once] {
                    __DEFAULT -> $wg1_r8xn sat_s8xC sat_s8xD sat_s8xE;
                    };
                    };
                    };
                1# -> *## [ww_s8xw ww1_s8xy];
              };
          1# ->
              case
                  GHC.Integer.Type.quotInteger w_s8xx Main.$seven1
              of
              sat_s8xG [Occ=Once]
              {
              __DEFAULT ->
              case *## [ww_s8xw ww_s8xw] of sat_s8xF [Occ=Once] {
              __DEFAULT -> $wg1_r8xn sat_s8xF sat_s8xG ww1_s8xy;
              };
              };
        };
        };
end Rec }

Rec {
Main.$wf [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: GHC.Prim.Double# -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    \r [ww_s8xH w_s8xI]
        case
            GHC.Integer.Type.remInteger w_s8xI Main.$seven1
        of
        sat_s8xJ [Occ=Once]
        {
        __DEFAULT ->
        case GHC.Integer.Type.eqInteger# sat_s8xJ Main.$s^2 of {
          __DEFAULT ->
              case GHC.Integer.Type.eqInteger# w_s8xI lvl1_r8xm of {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.quotInteger w_s8xI Main.$seven1
                    of
                    sat_s8xN [Occ=Once]
                    {
                    __DEFAULT ->
                    case *## [ww_s8xH ww_s8xH] of sat_s8xM [Occ=Once] {
                    __DEFAULT -> $wg1_r8xn sat_s8xM sat_s8xN ww_s8xH;
                    };
                    };
                1# -> ww_s8xH;
              };
          1# ->
              case
                  GHC.Integer.Type.quotInteger w_s8xI Main.$seven1
              of
              sat_s8xP [Occ=Once]
              {
              __DEFAULT ->
              case *## [ww_s8xH ww_s8xH] of sat_s8xO [Occ=Once] {
              __DEFAULT -> Main.$wf sat_s8xO sat_s8xP;
              };
              };
        };
        };
end Rec }

Main.$w$s^ [InlPrag=NOUSERINLINE[1]]
  :: GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,1*U(U)><S,U>, Unf=OtherCon []] =
    \r [w_s8xQ w1_s8xR]
        case GHC.Integer.Type.ltInteger# w1_s8xR Main.$s^2 of {
          __DEFAULT ->
              case GHC.Integer.Type.eqInteger# w1_s8xR Main.$s^2 of {
                __DEFAULT ->
                    case w_s8xQ of {
                    GHC.Types.D# ww1_s8xV [Occ=Once] -> Main.$wf ww1_s8xV w1_s8xR;
                    };
                1# -> 1.0##;
              };
          1# -> Main.$s^1;
        };

Main.$w$s^^ [InlPrag=NOUSERINLINE[1]]
  :: GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,1*U(U)><S,U>, Unf=OtherCon []] =
    \r [w_s8xX w1_s8xY]
        case GHC.Integer.Type.geInteger# w1_s8xY Main.$s^2 of {
          __DEFAULT ->
              case
                  GHC.Integer.Type.negateInteger w1_s8xY
              of
              sat_s8y0 [Occ=Once]
              {
              __DEFAULT ->
              case Main.$w$s^ w_s8xX sat_s8y0 of ww_s8y1 [Occ=Once] {
              __DEFAULT -> /## [1.0## ww_s8y1];
              };
              };
          1# -> Main.$w$s^ w_s8xX w1_s8xY;
        };

Rec {
Main.main_go [Occ=LoopBreaker] :: [GHC.Types.Char] -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    \r [ds_s8y2]
        case ds_s8y2 of {
          [] -> () [];
          : x_s8y4 [Occ=Once!] xs_s8y5 [Occ=Once] ->
              case x_s8y4 of {
              GHC.Types.C# _ [Occ=Dead] -> Main.main_go xs_s8y5;
              };
        };
end Rec }

Main.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "main"#;

Main.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Main.$trModule4];

Main.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Main"#;

Main.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Main.$trModule2];

Main.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Main.$trModule3 Main.$trModule1];

Main.main6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " milli seconds -- "#;

Main.main5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " pico seconds"#;

Main.main7 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1000000000#];

Main.main4 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main5;

Main.main_$smeasure2
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    \r [description_s8y8 f_s8y9 void_0E]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        {
        Unit# ipv1_s8yd [Occ=Once!] ->
        case Main.main_go f_s8y9 of {
        () ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        {
        Unit# ipv3_s8yh [Occ=Once!] ->
        let {
          duration_s8yi :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv3_s8yh of {
                  (,) _ [Occ=Dead] y_s8yl [Occ=Once] ->
                  case ipv1_s8yd of {
                  (,) _ [Occ=Dead] y1_s8yo [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8yl y1_s8yo;
                  };
                  }; } in
        let {
          sat_s8yA [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8yy [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8yi Main.main7
                            of
                            sat_s8yp [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8yp GHC.Types.[] of {
                            (#,#) ww3_s8yr [Occ=Once] ww4_s8ys [Occ=Once] ->
                            let {
                              sat_s8yx [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8yw [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8yi GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8yu [Occ=Once] ww6_s8yv [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8yu ww6_s8yv;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8yw;
                            } in  GHC.Base.++_$s++ sat_s8yx ww3_s8yr ww4_s8ys;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8y8 sat_s8yy of sat_s8yz [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8yz GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8yB [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8yA];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8yB GHC.Types.True GHC.Prim.void#;
        };
        };
        };

Main.main_$smeasure1
  :: GHC.Base.String
     -> GHC.Types.Double
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*H><L,U>, Unf=OtherCon []] =
    \r [description_s8yC f_s8yD void_0E]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        {
        Unit# ipv1_s8yH [Occ=Once!] ->
        case f_s8yD of {
        GHC.Types.D# _ [Occ=Dead] ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        {
        Unit# ipv4_s8yM [Occ=Once!] ->
        let {
          duration_s8yN :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv4_s8yM of {
                  (,) _ [Occ=Dead] y_s8yQ [Occ=Once] ->
                  case ipv1_s8yH of {
                  (,) _ [Occ=Dead] y1_s8yT [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8yQ y1_s8yT;
                  };
                  }; } in
        let {
          sat_s8z5 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8z3 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8yN Main.main7
                            of
                            sat_s8yU [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8yU GHC.Types.[] of {
                            (#,#) ww3_s8yW [Occ=Once] ww4_s8yX [Occ=Once] ->
                            let {
                              sat_s8z2 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8z1 [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8yN GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8yZ [Occ=Once] ww6_s8z0 [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8yZ ww6_s8z0;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8z1;
                            } in  GHC.Base.++_$s++ sat_s8z2 ww3_s8yW ww4_s8yX;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8yC sat_s8z3 of sat_s8z4 [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8z4 GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8z6 [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8z5];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8z6 GHC.Types.True GHC.Prim.void#;
        };
        };
        };

Main.main_$smeasure
  :: GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    \r [description_s8z7 f_s8z8 void_0E]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        {
        Unit# ipv1_s8zc [Occ=Once!] ->
        case f_s8z8 of {
        __DEFAULT ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        {
        Unit# ipv3_s8zg [Occ=Once!] ->
        let {
          duration_s8zh :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv3_s8zg of {
                  (,) _ [Occ=Dead] y_s8zk [Occ=Once] ->
                  case ipv1_s8zc of {
                  (,) _ [Occ=Dead] y1_s8zn [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8zk y1_s8zn;
                  };
                  }; } in
        let {
          sat_s8zz [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8zx [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8zh Main.main7
                            of
                            sat_s8zo [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8zo GHC.Types.[] of {
                            (#,#) ww3_s8zq [Occ=Once] ww4_s8zr [Occ=Once] ->
                            let {
                              sat_s8zw [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8zv [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8zh GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8zt [Occ=Once] ww6_s8zu [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8zt ww6_s8zu;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8zv;
                            } in  GHC.Base.++_$s++ sat_s8zw ww3_s8zq ww4_s8zr;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8z7 sat_s8zx of sat_s8zy [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8zy GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8zA [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8zz];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8zA GHC.Types.True GHC.Prim.void#;
        };
        };
        };

Main.measure1
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [$dNFData_s8zB description_s8zC f_s8zD void_0E]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        {
        Unit# ipv1_s8zH [Occ=Once!] ->
        case $dNFData_s8zB f_s8zD of {
        () ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 GHC.Prim.void#
        of
        {
        Unit# ipv3_s8zL [Occ=Once!] ->
        let {
          duration_s8zM :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv3_s8zL of {
                  (,) _ [Occ=Dead] y_s8zP [Occ=Once] ->
                  case ipv1_s8zH of {
                  (,) _ [Occ=Dead] y1_s8zS [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8zP y1_s8zS;
                  };
                  }; } in
        let {
          sat_s8A4 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8A2 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8zM Main.main7
                            of
                            sat_s8zT [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8zT GHC.Types.[] of {
                            (#,#) ww3_s8zV [Occ=Once] ww4_s8zW [Occ=Once] ->
                            let {
                              sat_s8A1 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8A0 [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8zM GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8zY [Occ=Once] ww6_s8zZ [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8zY ww6_s8zZ;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8A0;
                            } in  GHC.Base.++_$s++ sat_s8A1 ww3_s8zV ww4_s8zW;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8zC sat_s8A2 of sat_s8A3 [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8A3 GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8A5 [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8A4];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8A5 GHC.Types.True GHC.Prim.void#;
        };
        };
        };

Main.measure
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String -> a -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [eta_B4 eta_B3 eta_B2 void_0E]
        Main.measure1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

Main.testIntegralPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1000000#];

Main.testStimes2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "foo"#;

Main.testStimes1 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.testStimes2;

Main.testStimes :: GHC.Base.String
[GblId] =
    \u []
        Data.Semigroup.Internal.stimesList
            GHC.Real.$fIntegralInteger
            Main.testIntegralPower1
            Main.testStimes1;

Main.testIntegralPower2 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [3#];

Main.testIntegralPower :: GHC.Integer.Type.Integer
[GblId] =
    \u []
        GHC.Real.^_$s^ Main.testIntegralPower2 Main.testIntegralPower1;

Main.testFractionalPower2 :: GHC.Types.Double
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.D#! [5.0##];

Main.testFractionalPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [441#];

Main.testFractionalPower :: GHC.Types.Double
[GblId] =
    \u []
        case
            Main.$w$s^^ Main.testFractionalPower2 Main.testFractionalPower1
        of
        ww_s8A6 [Occ=Once]
        {
        __DEFAULT -> GHC.Types.D# [ww_s8A6];
        };

Main.main3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integral power : "#;

Main.main2 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main3;

Main.main9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 3 : "#;

Main.main8 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main9;

Main.main11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 2 : "#;

Main.main10 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main11;

Main.main13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 1 : "#;

Main.main12 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main13;

Main.main15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "stimes : "#;

Main.main14 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main15;

Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [void_0E]
        case
            Main.main_$smeasure2 Main.main14 Main.testStimes GHC.Prim.void#
        of
        {
        Unit# _ [Occ=Dead] ->
        case
            Main.main_$smeasure1
                Main.main12 Main.testFractionalPower GHC.Prim.void#
        of
        {
        Unit# _ [Occ=Dead] ->
        case
            Main.main_$smeasure1
                Main.main10 Main.testFractionalPower GHC.Prim.void#
        of
        {
        Unit# _ [Occ=Dead] ->
        case
            Main.main_$smeasure1
                Main.main8 Main.testFractionalPower GHC.Prim.void#
        of
        {
        Unit# _ [Occ=Dead] ->
        Main.main_$smeasure
            Main.main2 Main.testIntegralPower GHC.Prim.void#;
        };
        };
        };
        };

Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [void_0E] Main.main1 GHC.Prim.void#;

Main.main16
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [void_0E] GHC.TopHandler.runMainIO1 Main.main1 GHC.Prim.void#;

:Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [void_0E] Main.main16 GHC.Prim.void#;

