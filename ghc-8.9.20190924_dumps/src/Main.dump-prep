
==================== CorePrep ====================
2019-11-05 16:47:55.891170787 UTC

Result size of CorePrep
  = {terms: 628, types: 587, coercions: 80, joins: 0/24}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$s^2 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.$s^2 = GHC.Integer.Type.S# 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_r8xl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_r8xl = "Negative exponent"#

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
Main.$s^1 :: GHC.Types.Double
[GblId, Str=b]
Main.$s^1
  = case GHC.CString.unpackCString# lvl_r8xl of sat_s8xv [Occ=Once]
    { __DEFAULT ->
    GHC.Err.errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep @ GHC.Types.Double sat_s8xv
    }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$seven1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.$seven1 = GHC.Integer.Type.S# 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_r8xm :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl1_r8xm = GHC.Integer.Type.S# 1#

Rec {
-- RHS size: {terms: 56, types: 11, coercions: 0, joins: 0/0}
$wg1_r8xn
  :: GHC.Prim.Double#
     -> GHC.Integer.Type.Integer -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=3, Str=<L,U><S,U><L,U>, Unf=OtherCon []]
$wg1_r8xn
  = \ (ww_s8xw :: GHC.Prim.Double#)
      (w_s8xx :: GHC.Integer.Type.Integer)
      (ww1_s8xy [Occ=Once*] :: GHC.Prim.Double#) ->
      case GHC.Integer.Type.remInteger w_s8xx Main.$seven1
      of sat_s8xz [Occ=Once]
      { __DEFAULT ->
      case GHC.Integer.Type.eqInteger# sat_s8xz Main.$s^2 of {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8xx lvl1_r8xm of {
            __DEFAULT ->
              case GHC.Prim.*## ww_s8xw ww1_s8xy of sat_s8xE [Occ=Once]
              { __DEFAULT ->
              case GHC.Integer.Type.quotInteger w_s8xx Main.$seven1
              of sat_s8xD [Occ=Once]
              { __DEFAULT ->
              case GHC.Prim.*## ww_s8xw ww_s8xw of sat_s8xC [Occ=Once]
              { __DEFAULT ->
              $wg1_r8xn sat_s8xC sat_s8xD sat_s8xE
              }
              }
              };
            1# -> GHC.Prim.*## ww_s8xw ww1_s8xy
          };
        1# ->
          case GHC.Integer.Type.quotInteger w_s8xx Main.$seven1
          of sat_s8xG [Occ=Once]
          { __DEFAULT ->
          case GHC.Prim.*## ww_s8xw ww_s8xw of sat_s8xF [Occ=Once]
          { __DEFAULT ->
          $wg1_r8xn sat_s8xF sat_s8xG ww1_s8xy
          }
          }
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 47, types: 9, coercions: 0, joins: 0/0}
Main.$wf [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: GHC.Prim.Double# -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []]
Main.$wf
  = \ (ww_s8xH :: GHC.Prim.Double#)
      (w_s8xI :: GHC.Integer.Type.Integer) ->
      case GHC.Integer.Type.remInteger w_s8xI Main.$seven1
      of sat_s8xJ [Occ=Once]
      { __DEFAULT ->
      case GHC.Integer.Type.eqInteger# sat_s8xJ Main.$s^2 of {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8xI lvl1_r8xm of {
            __DEFAULT ->
              case GHC.Integer.Type.quotInteger w_s8xI Main.$seven1
              of sat_s8xN [Occ=Once]
              { __DEFAULT ->
              case GHC.Prim.*## ww_s8xH ww_s8xH of sat_s8xM [Occ=Once]
              { __DEFAULT ->
              $wg1_r8xn sat_s8xM sat_s8xN ww_s8xH
              }
              };
            1# -> ww_s8xH
          };
        1# ->
          case GHC.Integer.Type.quotInteger w_s8xI Main.$seven1
          of sat_s8xP [Occ=Once]
          { __DEFAULT ->
          case GHC.Prim.*## ww_s8xH ww_s8xH of sat_s8xO [Occ=Once]
          { __DEFAULT ->
          Main.$wf sat_s8xO sat_s8xP
          }
          }
      }
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
Main.$w$s^ [InlPrag=NOUSERINLINE[1]]
  :: GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,1*U(U)><S,U>, Unf=OtherCon []]
Main.$w$s^
  = \ (w_s8xQ [Occ=Once!] :: GHC.Types.Double)
      (w1_s8xR :: GHC.Integer.Type.Integer) ->
      case GHC.Integer.Type.ltInteger# w1_s8xR Main.$s^2 of {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w1_s8xR Main.$s^2 of {
            __DEFAULT ->
              case w_s8xQ of { GHC.Types.D# ww1_s8xV [Occ=Once] ->
              Main.$wf ww1_s8xV w1_s8xR
              };
            1# -> 1.0##
          };
        1# -> case Main.$s^1 of { }
      }

-- RHS size: {terms: 23, types: 5, coercions: 0, joins: 0/0}
Main.$w$s^^ [InlPrag=NOUSERINLINE[1]]
  :: GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=2, Str=<L,1*U(U)><S,U>, Unf=OtherCon []]
Main.$w$s^^
  = \ (w_s8xX [Occ=Once*] :: GHC.Types.Double)
      (w1_s8xY :: GHC.Integer.Type.Integer) ->
      case GHC.Integer.Type.geInteger# w1_s8xY Main.$s^2 of {
        __DEFAULT ->
          case GHC.Integer.Type.negateInteger w1_s8xY of sat_s8y0 [Occ=Once]
          { __DEFAULT ->
          case Main.$w$s^ w_s8xX sat_s8y0 of ww_s8y1 [Occ=Once]
          { __DEFAULT ->
          GHC.Prim./## 1.0## ww_s8y1
          }
          };
        1# -> Main.$w$s^ w_s8xX w1_s8xY
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
Main.main_go [Occ=LoopBreaker] :: [GHC.Types.Char] -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
Main.main_go
  = \ (ds_s8y2 [Occ=Once!] :: [GHC.Types.Char]) ->
      case ds_s8y2 of {
        [] -> GHC.Tuple.();
        : x_s8y4 [Occ=Once!] xs_s8y5 [Occ=Once] ->
          case x_s8y4 of { GHC.Types.C# _ [Occ=Dead] ->
          Main.main_go xs_s8y5
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
Main.$trModule3 = GHC.Types.TrNameS Main.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.$trModule2 = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
Main.$trModule1 = GHC.Types.TrNameS Main.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
Main.$trModule = GHC.Types.Module Main.$trModule3 Main.$trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.main6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.main6 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.main5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.main5 = " pico seconds"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main7 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.main7 = GHC.Integer.Type.S# 1000000000#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main4 :: [GHC.Types.Char]
[GblId]
Main.main4 = GHC.CString.unpackCString# Main.main5

-- RHS size: {terms: 76, types: 83, coercions: 14, joins: 0/6}
Main.main_$smeasure2
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []]
Main.main_$smeasure2
  = \ (description_s8y8 [Occ=Once] :: GHC.Base.String)
      (f_s8y9 [Occ=Once] :: GHC.Base.String)
      (s_s8ya [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_s8ya
      of
      { (# ipv_s8yc [Occ=Once], ipv1_s8yd [Occ=Once!] #) ->
      case Main.main_go f_s8y9 of { () ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_s8yc
      of
      { (# ipv2_s8yg [Occ=Once], ipv3_s8yh [Occ=Once!] #) ->
      let {
        duration_s8yi :: GHC.Integer.Type.Integer
        [LclId]
        duration_s8yi
          = case ipv3_s8yh of { (_ [Occ=Dead], y_s8yl [Occ=Once]) ->
            case ipv1_s8yd of { (_ [Occ=Dead], y1_s8yo [Occ=Once]) ->
            GHC.Integer.Type.minusInteger y_s8yl y1_s8yo
            }
            } } in
      let {
        sat_s8yA [Occ=Once] :: [GHC.Types.Char]
        [LclId]
        sat_s8yA
          = let {
              sat_s8yy [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
              [LclId]
              sat_s8yy
                = case GHC.Integer.Type.divInteger duration_s8yi Main.main7
                  of sat_s8yp [Occ=Once]
                  { __DEFAULT ->
                  case GHC.Show.$w$cshowsPrec4
                         0# sat_s8yp (GHC.Types.[] @ GHC.Types.Char)
                  of
                  { (# ww3_s8yr [Occ=Once], ww4_s8ys [Occ=Once] #) ->
                  let {
                    sat_s8yx [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId]
                    sat_s8yx
                      = let {
                          sat_s8yw [Occ=Once] :: [GHC.Types.Char]
                          [LclId]
                          sat_s8yw
                            = case GHC.Show.$w$cshowsPrec4
                                     0# duration_s8yi (GHC.Types.[] @ GHC.Types.Char)
                              of
                              { (# ww5_s8yu [Occ=Once], ww6_s8yv [Occ=Once] #) ->
                              GHC.Base.++_$s++ @ GHC.Types.Char Main.main4 ww5_s8yu ww6_s8yv
                              } } in
                        GHC.CString.unpackAppendCString# Main.main6 sat_s8yw } in
                  GHC.Base.++_$s++ @ GHC.Types.Char sat_s8yx ww3_s8yr ww4_s8ys
                  }
                  } } in
            case GHC.Base.++ @ GHC.Types.Char description_s8y8 sat_s8yy
            of sat_s8yz [Occ=Once]
            { __DEFAULT ->
            GHC.Show.showLitString sat_s8yz GHC.Show.$fShow[]1
            } } in
      let {
        sat_s8yB [Occ=Once] :: GHC.Base.String
        [LclId]
        sat_s8yB
          = GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 sat_s8yA } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout sat_s8yB GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv2_s8yg
      }
      }
      }

-- RHS size: {terms: 75, types: 84, coercions: 14, joins: 0/6}
Main.main_$smeasure1
  :: GHC.Base.String
     -> GHC.Types.Double
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*H><L,U>, Unf=OtherCon []]
Main.main_$smeasure1
  = \ (description_s8yC [Occ=Once] :: GHC.Base.String)
      (f_s8yD [Occ=Once!] :: GHC.Types.Double)
      (s_s8yE [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_s8yE
      of
      { (# ipv_s8yG [Occ=Once], ipv1_s8yH [Occ=Once!] #) ->
      case f_s8yD of { GHC.Types.D# _ [Occ=Dead] ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_s8yG
      of
      { (# ipv3_s8yL [Occ=Once], ipv4_s8yM [Occ=Once!] #) ->
      let {
        duration_s8yN :: GHC.Integer.Type.Integer
        [LclId]
        duration_s8yN
          = case ipv4_s8yM of { (_ [Occ=Dead], y_s8yQ [Occ=Once]) ->
            case ipv1_s8yH of { (_ [Occ=Dead], y1_s8yT [Occ=Once]) ->
            GHC.Integer.Type.minusInteger y_s8yQ y1_s8yT
            }
            } } in
      let {
        sat_s8z5 [Occ=Once] :: [GHC.Types.Char]
        [LclId]
        sat_s8z5
          = let {
              sat_s8z3 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
              [LclId]
              sat_s8z3
                = case GHC.Integer.Type.divInteger duration_s8yN Main.main7
                  of sat_s8yU [Occ=Once]
                  { __DEFAULT ->
                  case GHC.Show.$w$cshowsPrec4
                         0# sat_s8yU (GHC.Types.[] @ GHC.Types.Char)
                  of
                  { (# ww3_s8yW [Occ=Once], ww4_s8yX [Occ=Once] #) ->
                  let {
                    sat_s8z2 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId]
                    sat_s8z2
                      = let {
                          sat_s8z1 [Occ=Once] :: [GHC.Types.Char]
                          [LclId]
                          sat_s8z1
                            = case GHC.Show.$w$cshowsPrec4
                                     0# duration_s8yN (GHC.Types.[] @ GHC.Types.Char)
                              of
                              { (# ww5_s8yZ [Occ=Once], ww6_s8z0 [Occ=Once] #) ->
                              GHC.Base.++_$s++ @ GHC.Types.Char Main.main4 ww5_s8yZ ww6_s8z0
                              } } in
                        GHC.CString.unpackAppendCString# Main.main6 sat_s8z1 } in
                  GHC.Base.++_$s++ @ GHC.Types.Char sat_s8z2 ww3_s8yW ww4_s8yX
                  }
                  } } in
            case GHC.Base.++ @ GHC.Types.Char description_s8yC sat_s8z3
            of sat_s8z4 [Occ=Once]
            { __DEFAULT ->
            GHC.Show.showLitString sat_s8z4 GHC.Show.$fShow[]1
            } } in
      let {
        sat_s8z6 [Occ=Once] :: GHC.Base.String
        [LclId]
        sat_s8z6
          = GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 sat_s8z5 } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout sat_s8z6 GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv3_s8yL
      }
      }
      }

-- RHS size: {terms: 75, types: 83, coercions: 14, joins: 0/6}
Main.main_$smeasure
  :: GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []]
Main.main_$smeasure
  = \ (description_s8z7 [Occ=Once] :: GHC.Base.String)
      (f_s8z8 [Occ=Once] :: GHC.Integer.Type.Integer)
      (s_s8z9 [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_s8z9
      of
      { (# ipv_s8zb [Occ=Once], ipv1_s8zc [Occ=Once!] #) ->
      case f_s8z8 of { __DEFAULT ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_s8zb
      of
      { (# ipv2_s8zf [Occ=Once], ipv3_s8zg [Occ=Once!] #) ->
      let {
        duration_s8zh :: GHC.Integer.Type.Integer
        [LclId]
        duration_s8zh
          = case ipv3_s8zg of { (_ [Occ=Dead], y_s8zk [Occ=Once]) ->
            case ipv1_s8zc of { (_ [Occ=Dead], y1_s8zn [Occ=Once]) ->
            GHC.Integer.Type.minusInteger y_s8zk y1_s8zn
            }
            } } in
      let {
        sat_s8zz [Occ=Once] :: [GHC.Types.Char]
        [LclId]
        sat_s8zz
          = let {
              sat_s8zx [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
              [LclId]
              sat_s8zx
                = case GHC.Integer.Type.divInteger duration_s8zh Main.main7
                  of sat_s8zo [Occ=Once]
                  { __DEFAULT ->
                  case GHC.Show.$w$cshowsPrec4
                         0# sat_s8zo (GHC.Types.[] @ GHC.Types.Char)
                  of
                  { (# ww3_s8zq [Occ=Once], ww4_s8zr [Occ=Once] #) ->
                  let {
                    sat_s8zw [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId]
                    sat_s8zw
                      = let {
                          sat_s8zv [Occ=Once] :: [GHC.Types.Char]
                          [LclId]
                          sat_s8zv
                            = case GHC.Show.$w$cshowsPrec4
                                     0# duration_s8zh (GHC.Types.[] @ GHC.Types.Char)
                              of
                              { (# ww5_s8zt [Occ=Once], ww6_s8zu [Occ=Once] #) ->
                              GHC.Base.++_$s++ @ GHC.Types.Char Main.main4 ww5_s8zt ww6_s8zu
                              } } in
                        GHC.CString.unpackAppendCString# Main.main6 sat_s8zv } in
                  GHC.Base.++_$s++ @ GHC.Types.Char sat_s8zw ww3_s8zq ww4_s8zr
                  }
                  } } in
            case GHC.Base.++ @ GHC.Types.Char description_s8z7 sat_s8zx
            of sat_s8zy [Occ=Once]
            { __DEFAULT ->
            GHC.Show.showLitString sat_s8zy GHC.Show.$fShow[]1
            } } in
      let {
        sat_s8zA [Occ=Once] :: GHC.Base.String
        [LclId]
        sat_s8zA
          = GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 sat_s8zz } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout sat_s8zA GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv2_s8zf
      }
      }
      }

-- RHS size: {terms: 78, types: 87, coercions: 16, joins: 0/6}
Main.measure1
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<L,1*C1(H)><L,1*U><L,U><L,U>, Unf=OtherCon []]
Main.measure1
  = \ (@ a_a5HY)
      ($dNFData_s8zB [Occ=Once] :: Control.DeepSeq.NFData a_a5HY)
      (description_s8zC [Occ=Once] :: GHC.Base.String)
      (f_s8zD [Occ=Once] :: a_a5HY)
      (s_s8zE [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_s8zE
      of
      { (# ipv_s8zG [Occ=Once], ipv1_s8zH [Occ=Once!] #) ->
      case ($dNFData_s8zB
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: Control.DeepSeq.NFData a_a5HY ~R# (a_a5HY -> ())))
             f_s8zD
      of
      { () ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_s8zG
      of
      { (# ipv2_s8zK [Occ=Once], ipv3_s8zL [Occ=Once!] #) ->
      let {
        duration_s8zM :: GHC.Integer.Type.Integer
        [LclId]
        duration_s8zM
          = case ipv3_s8zL of { (_ [Occ=Dead], y_s8zP [Occ=Once]) ->
            case ipv1_s8zH of { (_ [Occ=Dead], y1_s8zS [Occ=Once]) ->
            GHC.Integer.Type.minusInteger y_s8zP y1_s8zS
            }
            } } in
      let {
        sat_s8A4 [Occ=Once] :: [GHC.Types.Char]
        [LclId]
        sat_s8A4
          = let {
              sat_s8A2 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
              [LclId]
              sat_s8A2
                = case GHC.Integer.Type.divInteger duration_s8zM Main.main7
                  of sat_s8zT [Occ=Once]
                  { __DEFAULT ->
                  case GHC.Show.$w$cshowsPrec4
                         0# sat_s8zT (GHC.Types.[] @ GHC.Types.Char)
                  of
                  { (# ww3_s8zV [Occ=Once], ww4_s8zW [Occ=Once] #) ->
                  let {
                    sat_s8A1 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId]
                    sat_s8A1
                      = let {
                          sat_s8A0 [Occ=Once] :: [GHC.Types.Char]
                          [LclId]
                          sat_s8A0
                            = case GHC.Show.$w$cshowsPrec4
                                     0# duration_s8zM (GHC.Types.[] @ GHC.Types.Char)
                              of
                              { (# ww5_s8zY [Occ=Once], ww6_s8zZ [Occ=Once] #) ->
                              GHC.Base.++_$s++ @ GHC.Types.Char Main.main4 ww5_s8zY ww6_s8zZ
                              } } in
                        GHC.CString.unpackAppendCString# Main.main6 sat_s8A0 } in
                  GHC.Base.++_$s++ @ GHC.Types.Char sat_s8A1 ww3_s8zV ww4_s8zW
                  }
                  } } in
            case GHC.Base.++ @ GHC.Types.Char description_s8zC sat_s8A2
            of sat_s8A3 [Occ=Once]
            { __DEFAULT ->
            GHC.Show.showLitString sat_s8A3 GHC.Show.$fShow[]1
            } } in
      let {
        sat_s8A5 [Occ=Once] :: GHC.Base.String
        [LclId]
        sat_s8A5
          = GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 sat_s8A4 } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout sat_s8A5 GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv2_s8zK
      }
      }
      }

-- RHS size: {terms: 10, types: 9, coercions: 13, joins: 0/0}
Main.measure
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String -> a -> GHC.Types.IO ()
[GblId, Arity=4, Str=<L,1*C1(H)><L,1*U><L,U><L,U>, Unf=OtherCon []]
Main.measure
  = (\ (@ a_a5HY)
       (eta_B4 [Occ=Once] :: Control.DeepSeq.NFData a_a5HY)
       (eta_B3 [Occ=Once] :: GHC.Base.String)
       (eta_B2 [Occ=Once] :: a_a5HY)
       (eta_B1 [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
       Main.measure1 @ a_a5HY eta_B4 eta_B3 eta_B2 eta_B1)
    `cast` (forall (a :: <*>_N).
            <Control.DeepSeq.NFData a>_R
            ->_R <GHC.Base.String>_R
            ->_R <a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Control.DeepSeq.NFData a
                -> GHC.Base.String
                -> a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# (forall a.
                    Control.DeepSeq.NFData a
                    -> GHC.Base.String -> a -> GHC.Types.IO ()))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.testIntegralPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.testIntegralPower1 = GHC.Integer.Type.S# 1000000#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.testStimes2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.testStimes2 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.testStimes1 :: [GHC.Types.Char]
[GblId]
Main.testStimes1 = GHC.CString.unpackCString# Main.testStimes2

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
Main.testStimes :: GHC.Base.String
[GblId]
Main.testStimes
  = Data.Semigroup.Internal.stimesList
      @ GHC.Integer.Type.Integer
      @ GHC.Types.Char
      GHC.Real.$fIntegralInteger
      Main.testIntegralPower1
      Main.testStimes1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.testIntegralPower2 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.testIntegralPower2 = GHC.Integer.Type.S# 3#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.testIntegralPower :: GHC.Integer.Type.Integer
[GblId]
Main.testIntegralPower
  = GHC.Real.^_$s^ Main.testIntegralPower2 Main.testIntegralPower1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.testFractionalPower2 :: GHC.Types.Double
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
Main.testFractionalPower2 = GHC.Types.D# 5.0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.testFractionalPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.testFractionalPower1 = GHC.Integer.Type.S# 441#

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
Main.testFractionalPower :: GHC.Types.Double
[GblId]
Main.testFractionalPower
  = case Main.$w$s^^
           Main.testFractionalPower2 Main.testFractionalPower1
    of ww_s8A6 [Occ=Once]
    { __DEFAULT ->
    GHC.Types.D# ww_s8A6
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.main3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.main3 = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main2 :: [GHC.Types.Char]
[GblId]
Main.main2 = GHC.CString.unpackCString# Main.main3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.main9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.main9 = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main8 :: [GHC.Types.Char]
[GblId]
Main.main8 = GHC.CString.unpackCString# Main.main9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.main11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.main11 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main10 :: [GHC.Types.Char]
[GblId]
Main.main10 = GHC.CString.unpackCString# Main.main11

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.main13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.main13 = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main12 :: [GHC.Types.Char]
[GblId]
Main.main12 = GHC.CString.unpackCString# Main.main13

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.main15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Main.main15 = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main14 :: [GHC.Types.Char]
[GblId]
Main.main14 = GHC.CString.unpackCString# Main.main15

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []]
Main.main1
  = \ (s_s8A7 [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case Main.main_$smeasure2 Main.main14 Main.testStimes s_s8A7 of
      { (# ipv_s8A9 [Occ=Once], _ [Occ=Dead] #) ->
      case Main.main_$smeasure1
             Main.main12 Main.testFractionalPower ipv_s8A9
      of
      { (# ipv2_s8Ac [Occ=Once], _ [Occ=Dead] #) ->
      case Main.main_$smeasure1
             Main.main10 Main.testFractionalPower ipv2_s8Ac
      of
      { (# ipv4_s8Af [Occ=Once], _ [Occ=Dead] #) ->
      case Main.main_$smeasure1
             Main.main8 Main.testFractionalPower ipv4_s8Af
      of
      { (# ipv6_s8Ai [Occ=Once], _ [Occ=Dead] #) ->
      Main.main_$smeasure Main.main2 Main.testIntegralPower ipv6_s8Ai
      }
      }
      }
      }

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []]
Main.main
  = (\ (eta_B1 [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
       Main.main1 eta_B1)
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())

-- RHS size: {terms: 4, types: 3, coercions: 3, joins: 0/0}
Main.main16
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []]
Main.main16
  = \ (eta_B1 [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      GHC.TopHandler.runMainIO1
        @ ()
        (Main.main1
         `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                 :: (GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                    ~R# GHC.Types.IO ()))
        eta_B1

-- RHS size: {terms: 3, types: 2, coercions: 3, joins: 0/0}
:Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []]
:Main.main
  = (\ (eta_B1 [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
       Main.main16 eta_B1)
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())


