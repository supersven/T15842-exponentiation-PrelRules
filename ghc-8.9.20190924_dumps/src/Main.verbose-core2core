
==================== Simplifier ====================
2019-11-05 16:47:55.373635758 UTC
  Max iterations = 4
  SimplMode {Phase = InitialPhase [Gentle],
             inline,
             rules,
             eta-expand,
             no case-of-case}
Result size of Simplifier
  = {terms: 183, types: 224, coercions: 47, joins: 1/2}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 730 0}]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Xu
      of
      { (# ipv_a7Xx, ipv1_a7Xy #) ->
      case ((case ($dNFData_a5I0
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                           :: NFData a_a5HY ~R# (a_a5HY -> ())))
                    f_a1W7
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Xx
      of
      { (# ipv_X7XY, ipv1_X7Y0 #) ->
      let {
        duration_a1Wb :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
        duration_a1Wb
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              " milli seconds -- "#
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 " pico seconds"# c_a7Z6 n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_a1Wb
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_a1Wb 1000000000)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7XY
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YL) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YL "foo"#))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      441

-- RHS size: {terms: 79, types: 96, coercions: 16, joins: 1/1}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case measure_s802
             @ String
             ((\ (eta_a822 :: [Char]) ->
                 joinrec {
                   go_a823 [Occ=LoopBreaker] :: [Char] -> ()
                   [LclId[JoinId(1)],
                    Arity=1,
                    Str=<L,U>,
                    Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                            WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 34 10}]
                   go_a823 (ds_a824 :: [Char])
                     = case ds_a824 of {
                         [] -> ghc-prim-0.6.1:GHC.Tuple.();
                         : x_a828 xs_a829 ->
                           case x_a828 of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X ->
                           jump go_a823 xs_a829
                           }
                       }; } in
                 jump go_a823 eta_a822)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "stimes : "#))
             testStimes
             s_a81O
      of
      { (# ipv_a81R, ipv1_a81S #) ->
      case measure_s802
             @ Double
             ((\ (ds_a82j :: Double) ->
                 case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "fractional power 1 : "#))
             testFractionalPower
             ipv_a81R
      of
      { (# ipv_X82j, ipv1_X82l #) ->
      case measure_s802
             @ Double
             ((\ (ds_a82j :: Double) ->
                 case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "fractional power 2 : "#))
             testFractionalPower
             ipv_X82j
      of
      { (# ipv_X82o, ipv1_X82q #) ->
      case measure_s802
             @ Double
             ((\ (ds_a82j :: Double) ->
                 case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "fractional power 3 : "#))
             testFractionalPower
             ipv_X82o
      of
      { (# ipv_X82t, ipv1_X82v #) ->
      measure_s802
        @ Integer
        ((\ (ds_a82u :: Integer) ->
            case ds_a82u of { __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.() })
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        (GHC.Base.build
           @ Char
           (\ (@ b_a7YL) ->
              ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                @ b_a7YL "integral power : "#))
        testIntegralPower
        ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())



==================== Levels added: ====================
2019-11-05 16:47:55.394805719 UTC

<$dNFData_s8dD,<0,0>>
<$dNFData_s8dD,<0,0>>
  = (\ <eta_a822,<1,0>> ->
       letrec {
         <go_s8eP,F<0,0>>
         <go_s8eP,F<0,0>>
           = \ <ds_a824,<1,0>> ->
               case ds_a824 of <wild_a825,<1,2>> {
                 [] -> GHC.Tuple.();
                 : <x_a828,<1,2>> <xs_a829,<1,2>> ->
                   case x_a828 of <ds1_a81V,<1,3>> { GHC.Types.C# <ipv_a81X,<1,3>> ->
                   go_s8eP xs_a829
                   }
               }; } in
       go_s8eP eta_a822)
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[GHC.Types.Char]>_N)
            :: ([GHC.Types.Char] -> ())
               ~R# Control.DeepSeq.NFData [GHC.Types.Char]);
<$dNFData_s8dx,<0,0>>
<$dNFData_s8dx,<0,0>>
  = (\ <ds_a82j,<1,0>> ->
       case ds_a82j of <ds1_a82k,<1,2>> { GHC.Types.D# <ipv_a82m,<1,2>> ->
       GHC.Tuple.()
       })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
            :: (GHC.Types.Double -> ())
               ~R# Control.DeepSeq.NFData GHC.Types.Double);
<$dNFData_s8dt,<0,0>>
<$dNFData_s8dt,<0,0>>
  = (\ <ds_a82u,<1,0>> ->
       case ds_a82u of <ds1_a82v,<1,2>> { __DEFAULT -> GHC.Tuple.() })
    `cast` (Sym (Control.DeepSeq.N:NFData[0]
                     <GHC.Integer.Type.Integer>_N)
            :: (GHC.Integer.Type.Integer -> ())
               ~R# Control.DeepSeq.NFData GHC.Integer.Type.Integer);
<$dNum1_s8dN,<0,0>>
<$dNum1_s8dN,<0,0>>
  = GHC.Real.$p1Fractional
      @ GHC.Types.Double GHC.Float.$fFractionalDouble;
<$seven_s8eG,<0,0>>
<$seven_s8eG,<0,0>>
  = let {
      <$dReal_s8eR,F<0,0>>
      <$dReal_s8eR,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
    let {
      <$dNum_s8eT,F<0,0>>
      <$dNum_s8eT,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal_s8eR } in
    let {
      <$dEq_s8eV,F<0,0>>
      <$dEq_s8eV,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal_s8eR } in
    let {
      <$dEq1_s8eX,F<0,0>>
      <$dEq1_s8eX,F<0,0>>
        = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dEq_s8eV } in
    \ <n_a8es,<1,0>> ->
      GHC.Classes.==
        @ GHC.Integer.Type.Integer
        $dEq1_s8eX
        (GHC.Real.rem
           @ GHC.Integer.Type.Integer
           GHC.Real.$fIntegralInteger
           n_a8es
           (let {
              <lvl_s8eZ,F<0,0>>
              <lvl_s8eZ,F<0,0>>
                = GHC.Num.fromInteger
                    @ GHC.Integer.Type.Integer
                    $dNum_s8eT
                    (let {
                       <lvl_s8eY,F<0,0>>
                       <lvl_s8eY,F<0,0>> = 2 } in
                     lvl_s8eY) } in
            lvl_s8eZ))
        (let {
           <lvl_s8f1,F<0,0>>
           <lvl_s8f1,F<0,0>>
             = GHC.Num.fromInteger
                 @ GHC.Integer.Type.Integer
                 $dNum_s8eT
                 (let {
                    <lvl_s8f0,F<0,0>>
                    <lvl_s8f0,F<0,0>> = 0 } in
                  lvl_s8f0) } in
         lvl_s8f1);
<$s^_s8et,<0,0>>
<$s^_s8et,<0,0>>
  = let {
      <$dReal_s8f3,F<0,0>>
      <$dReal_s8f3,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
    let {
      <$dNum1_s8f5,F<0,0>>
      <$dNum1_s8f5,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal_s8f3 } in
    let {
      <$dOrd_s8f7,F<0,0>>
      <$dOrd_s8f7,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal_s8f3 } in
    let {
      <$dEq_s8f9,F<0,0>>
      <$dEq_s8f9,F<0,0>>
        = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dOrd_s8f7 } in
    \ <x0_a7VB,<1,0>> <y0_a7VC,<1,0>> ->
      case GHC.Classes.<
             @ GHC.Integer.Type.Integer
             $dOrd_s8f7
             y0_a7VC
             (let {
                <lvl_s8fb,F<0,0>>
                <lvl_s8fb,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Integer.Type.Integer
                      $dNum1_s8f5
                      (let {
                         <lvl_s8fa,F<0,0>>
                         <lvl_s8fa,F<0,0>> = 0 } in
                       lvl_s8fa) } in
              lvl_s8fb)
      of <wild_a7VD,<1,2>> {
        GHC.Types.False ->
          case GHC.Classes.==
                 @ GHC.Integer.Type.Integer
                 $dEq_s8f9
                 y0_a7VC
                 (let {
                    <lvl_s8fd,F<0,0>>
                    <lvl_s8fd,F<0,0>>
                      = GHC.Num.fromInteger
                          @ GHC.Integer.Type.Integer
                          $dNum1_s8f5
                          (let {
                             <lvl_s8fc,F<0,0>>
                             <lvl_s8fc,F<0,0>> = 0 } in
                           lvl_s8fc) } in
                  lvl_s8fd)
          of <wild1_a7VG,<1,3>> {
            GHC.Types.False ->
              let {
                <$dReal1_s8ff,F<0,0>>
                <$dReal1_s8ff,F<0,0>>
                  = GHC.Real.$p1Integral
                      @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
              let {
                <$dNum2_s8fh,F<0,0>>
                <$dNum2_s8fh,F<0,0>>
                  = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal1_s8ff } in
              let {
                <$dEq1_s8fj,F<0,0>>
                <$dEq1_s8fj,F<0,0>>
                  = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal1_s8ff } in
              let {
                <$dEq2_s8fl,F<0,0>>
                <$dEq2_s8fl,F<0,0>>
                  = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dEq1_s8fj } in
              letrec {
                <f_s8fn,F<0,0>>
                <f_s8fn,F<0,0>>
                  = \ <x_a7VO,<1,0>> <y_a7VP,<1,0>> ->
                      case GHC.Real.even
                             @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger y_a7VP
                      of <wild2_a7VS,<1,2>> {
                        GHC.Types.False ->
                          case GHC.Classes.==
                                 @ GHC.Integer.Type.Integer
                                 $dEq2_s8fl
                                 y_a7VP
                                 (let {
                                    <lvl_s8fp,F<0,0>>
                                    <lvl_s8fp,F<0,0>>
                                      = GHC.Num.fromInteger
                                          @ GHC.Integer.Type.Integer
                                          $dNum2_s8fh
                                          (let {
                                             <lvl_s8fo,F<0,0>>
                                             <lvl_s8fo,F<0,0>> = 1 } in
                                           lvl_s8fo) } in
                                  lvl_s8fp)
                          of <wild3_a7VV,<1,3>> {
                            GHC.Types.False ->
                              let {
                                <$dReal2_s8fr,F<0,0>>
                                <$dReal2_s8fr,F<0,0>>
                                  = GHC.Real.$p1Integral
                                      @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
                              let {
                                <$dNum3_s8ft,F<0,0>>
                                <$dNum3_s8ft,F<0,0>>
                                  = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal2_s8fr } in
                              let {
                                <$dEq3_s8fv,F<0,0>>
                                <$dEq3_s8fv,F<0,0>>
                                  = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal2_s8fr } in
                              let {
                                <$dEq4_s8fx,F<0,0>>
                                <$dEq4_s8fx,F<0,0>>
                                  = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dEq3_s8fv } in
                              letrec {
                                <g1_s8fz,F<0,0>>
                                <g1_s8fz,F<0,0>>
                                  = \ <x1_a7W3,<1,0>> <y1_a7W4,<1,0>> <z_a7W5,<1,0>> ->
                                      case GHC.Real.even
                                             @ GHC.Integer.Type.Integer
                                             GHC.Real.$fIntegralInteger
                                             y1_a7W4
                                      of <wild4_a7W6,<1,2>> {
                                        GHC.Types.False ->
                                          case GHC.Classes.==
                                                 @ GHC.Integer.Type.Integer
                                                 $dEq4_s8fx
                                                 y1_a7W4
                                                 (let {
                                                    <lvl_s8fB,F<0,0>>
                                                    <lvl_s8fB,F<0,0>>
                                                      = GHC.Num.fromInteger
                                                          @ GHC.Integer.Type.Integer
                                                          $dNum3_s8ft
                                                          (let {
                                                             <lvl_s8fA,F<0,0>>
                                                             <lvl_s8fA,F<0,0>> = 1 } in
                                                           lvl_s8fA) } in
                                                  lvl_s8fB)
                                          of <wild5_a7W9,<1,3>> {
                                            GHC.Types.False ->
                                              g1_s8fz
                                                (GHC.Num.*
                                                   @ GHC.Types.Double $dNum1_s8dN x1_a7W3 x1_a7W3)
                                                (GHC.Real.quot
                                                   @ GHC.Integer.Type.Integer
                                                   GHC.Real.$fIntegralInteger
                                                   y1_a7W4
                                                   (let {
                                                      <lvl_s8fD,F<0,0>>
                                                      <lvl_s8fD,F<0,0>>
                                                        = GHC.Num.fromInteger
                                                            @ GHC.Integer.Type.Integer
                                                            $dNum3_s8ft
                                                            (let {
                                                               <lvl_s8fC,F<0,0>>
                                                               <lvl_s8fC,F<0,0>> = 2 } in
                                                             lvl_s8fC) } in
                                                    lvl_s8fD))
                                                (GHC.Num.*
                                                   @ GHC.Types.Double $dNum1_s8dN x1_a7W3 z_a7W5);
                                            GHC.Types.True ->
                                              GHC.Num.*
                                                @ GHC.Types.Double $dNum1_s8dN x1_a7W3 z_a7W5
                                          };
                                        GHC.Types.True ->
                                          g1_s8fz
                                            (GHC.Num.*
                                               @ GHC.Types.Double $dNum1_s8dN x1_a7W3 x1_a7W3)
                                            (GHC.Real.quot
                                               @ GHC.Integer.Type.Integer
                                               GHC.Real.$fIntegralInteger
                                               y1_a7W4
                                               (let {
                                                  <lvl_s8fF,F<0,0>>
                                                  <lvl_s8fF,F<0,0>>
                                                    = GHC.Num.fromInteger
                                                        @ GHC.Integer.Type.Integer
                                                        $dNum3_s8ft
                                                        (let {
                                                           <lvl_s8fE,F<0,0>>
                                                           <lvl_s8fE,F<0,0>> = 2 } in
                                                         lvl_s8fE) } in
                                                lvl_s8fF))
                                            z_a7W5
                                      }; } in
                              g1_s8fz
                                (GHC.Num.* @ GHC.Types.Double $dNum1_s8dN x_a7VO x_a7VO)
                                (GHC.Real.quot
                                   @ GHC.Integer.Type.Integer
                                   GHC.Real.$fIntegralInteger
                                   y_a7VP
                                   (let {
                                      <lvl_s8fH,F<0,0>>
                                      <lvl_s8fH,F<0,0>>
                                        = GHC.Num.fromInteger
                                            @ GHC.Integer.Type.Integer
                                            $dNum2_s8fh
                                            (let {
                                               <lvl_s8fG,F<0,0>>
                                               <lvl_s8fG,F<0,0>> = 2 } in
                                             lvl_s8fG) } in
                                    lvl_s8fH))
                                x_a7VO;
                            GHC.Types.True -> x_a7VO
                          };
                        GHC.Types.True ->
                          f_s8fn
                            (GHC.Num.* @ GHC.Types.Double $dNum1_s8dN x_a7VO x_a7VO)
                            (GHC.Real.quot
                               @ GHC.Integer.Type.Integer
                               GHC.Real.$fIntegralInteger
                               y_a7VP
                               (let {
                                  <lvl_s8fJ,F<0,0>>
                                  <lvl_s8fJ,F<0,0>>
                                    = GHC.Num.fromInteger
                                        @ GHC.Integer.Type.Integer
                                        $dNum2_s8fh
                                        (let {
                                           <lvl_s8fI,F<0,0>>
                                           <lvl_s8fI,F<0,0>> = 2 } in
                                         lvl_s8fI) } in
                                lvl_s8fJ))
                      }; } in
              f_s8fn x0_a7VB y0_a7VC;
            GHC.Types.True ->
              let {
                <lvl_s8fL,F<0,0>>
                <lvl_s8fL,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Types.Double
                      $dNum1_s8dN
                      (let {
                         <lvl_s8fK,F<0,0>>
                         <lvl_s8fK,F<0,0>> = 1 } in
                       lvl_s8fK) } in
              lvl_s8fL
          };
        GHC.Types.True ->
          let {
            <lvl_s8fN,F<0,0>>
            <lvl_s8fN,F<0,0>>
              = GHC.Err.errorWithoutStackTrace
                  @ 'GHC.Types.LiftedRep
                  @ GHC.Types.Double
                  (GHC.CString.unpackCString#
                     (let {
                        <lvl_s8fM,F<0,0>>
                        <lvl_s8fM,F<0,0>> = "Negative exponent"# } in
                      lvl_s8fM)) } in
          lvl_s8fN
      };
<$s^^_s8eL,<0,0>>
<$s^^_s8eL,<0,0>>
  = let {
      <$dReal_s8fP,F<0,0>>
      <$dReal_s8fP,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
    let {
      <$dNum_s8fR,F<0,0>>
      <$dNum_s8fR,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal_s8fP } in
    let {
      <$dOrd_s8fT,F<0,0>>
      <$dOrd_s8fT,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal_s8fP } in
    \ <x_a7Vm,<1,0>> <n_a7Vn,<1,0>> ->
      case GHC.Classes.>=
             @ GHC.Integer.Type.Integer
             $dOrd_s8fT
             n_a7Vn
             (let {
                <lvl_s8fV,F<0,0>>
                <lvl_s8fV,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Integer.Type.Integer
                      $dNum_s8fR
                      (let {
                         <lvl_s8fU,F<0,0>>
                         <lvl_s8fU,F<0,0>> = 0 } in
                       lvl_s8fU) } in
              lvl_s8fV)
      of <wild_a7Vo,<1,2>> {
        GHC.Types.False ->
          GHC.Real.recip
            @ GHC.Types.Double
            GHC.Float.$fFractionalDouble
            (GHC.Real.^
               @ GHC.Types.Double
               @ GHC.Integer.Type.Integer
               $dNum1_s8dN
               GHC.Real.$fIntegralInteger
               x_a7Vm
               (GHC.Num.negate @ GHC.Integer.Type.Integer $dNum_s8fR n_a7Vn));
        GHC.Types.True ->
          GHC.Real.^
            @ GHC.Types.Double
            @ GHC.Integer.Type.Integer
            $dNum1_s8dN
            GHC.Real.$fIntegralInteger
            x_a7Vm
            n_a7Vn
      };
<$trModule_s7WW,<0,0>>
<$trModule_s7WW,<0,0>> = "main"#
<$trModule_s7WX,<0,0>>
<$trModule_s7WX,<0,0>> = GHC.Types.TrNameS $trModule_s7WW
<$trModule_s7WY,<0,0>>
<$trModule_s7WY,<0,0>> = "Main"#
<$trModule_s7WZ,<0,0>>
<$trModule_s7WZ,<0,0>> = GHC.Types.TrNameS $trModule_s7WY
<Main.$trModule,<0,0>>
<Main.$trModule,<0,0>>
  = GHC.Types.Module $trModule_s7WX $trModule_s7WZ
<$smeasure_s8eM,<0,0>>
<$smeasure_s8eM,<0,0>>
  = \ <description_a1W6,<1,0>> <f_a1W7,<1,0>> <s_a7Xu,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Xu
      of <ds1_a7Xv,<1,2>>
      { (# <ipv_a7Xx,<1,2>>, <ipv1_a7Xy,<1,2>> #) ->
      case ((case ($dNFData_s8dD
                   `cast` (Control.DeepSeq.N:NFData[0] <GHC.Base.String>_N
                           :: Control.DeepSeq.NFData GHC.Base.String
                              ~R# (GHC.Base.String -> ())))
                    f_a1W7
             of <wild_a7Us,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Xx
      of <ds1_X7XU,<1,3>>
      { (# <ipv_X7XY,<1,3>>, <ipv1_X7Y0,<1,3>> #) ->
      let {
        <duration_s8dF,<1,4>>
        <duration_s8dF,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7Z5,<1,7>> <c_a7Z6,<1,7>> <n_a7Z7,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7Z5
                           c_a7Z6
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              (let {
                                 <lvl_s8fW,F<0,0>>
                                 <lvl_s8fW,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8fW)
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5
                                    (let {
                                       <lvl_s8fX,F<0,0>>
                                       <lvl_s8fX,F<0,0>> = " pico seconds"# } in
                                     lvl_s8fX)
                                    c_a7Z6
                                    n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dF
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8dF
                                 (let {
                                    <lvl_s8fY,F<0,0>>
                                    <lvl_s8fY,F<0,0>> = 1000000000 } in
                                  lvl_s8fY))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7XY
      }
      }
<$smeasure_s8dA,<0,0>>
<$smeasure_s8dA,<0,0>>
  = \ <description_a1W6,<1,0>> <f_a1W7,<1,0>> <s_a7Xu,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Xu
      of <ds1_a7Xv,<1,2>>
      { (# <ipv_a7Xx,<1,2>>, <ipv1_a7Xy,<1,2>> #) ->
      case ((case ($dNFData_s8dx
                   `cast` (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N
                           :: Control.DeepSeq.NFData GHC.Types.Double
                              ~R# (GHC.Types.Double -> ())))
                    f_a1W7
             of <wild_a7Us,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Xx
      of <ds1_X7XU,<1,3>>
      { (# <ipv_X7XY,<1,3>>, <ipv1_X7Y0,<1,3>> #) ->
      let {
        <duration_s8dz,<1,4>>
        <duration_s8dz,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7Z5,<1,7>> <c_a7Z6,<1,7>> <n_a7Z7,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7Z5
                           c_a7Z6
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              (let {
                                 <lvl_s8fZ,F<0,0>>
                                 <lvl_s8fZ,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8fZ)
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5
                                    (let {
                                       <lvl_s8g0,F<0,0>>
                                       <lvl_s8g0,F<0,0>> = " pico seconds"# } in
                                     lvl_s8g0)
                                    c_a7Z6
                                    n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dz
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8dz
                                 (let {
                                    <lvl_s8g1,F<0,0>>
                                    <lvl_s8g1,F<0,0>> = 1000000000 } in
                                  lvl_s8g1))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7XY
      }
      }
<$smeasure_s8dw,<0,0>>
<$smeasure_s8dw,<0,0>>
  = \ <description_a1W6,<1,0>> <f_a1W7,<1,0>> <s_a7Xu,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Xu
      of <ds1_a7Xv,<1,2>>
      { (# <ipv_a7Xx,<1,2>>, <ipv1_a7Xy,<1,2>> #) ->
      case ((case ($dNFData_s8dt
                   `cast` (Control.DeepSeq.N:NFData[0] <GHC.Integer.Type.Integer>_N
                           :: Control.DeepSeq.NFData GHC.Integer.Type.Integer
                              ~R# (GHC.Integer.Type.Integer -> ())))
                    f_a1W7
             of <wild_a7Us,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Xx
      of <ds1_X7XU,<1,3>>
      { (# <ipv_X7XY,<1,3>>, <ipv1_X7Y0,<1,3>> #) ->
      let {
        <duration_s8dv,<1,4>>
        <duration_s8dv,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7Z5,<1,7>> <c_a7Z6,<1,7>> <n_a7Z7,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7Z5
                           c_a7Z6
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              (let {
                                 <lvl_s8g2,F<0,0>>
                                 <lvl_s8g2,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8g2)
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5
                                    (let {
                                       <lvl_s8g3,F<0,0>>
                                       <lvl_s8g3,F<0,0>> = " pico seconds"# } in
                                     lvl_s8g3)
                                    c_a7Z6
                                    n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dv
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8dv
                                 (let {
                                    <lvl_s8g4,F<0,0>>
                                    <lvl_s8g4,F<0,0>> = 1000000000 } in
                                  lvl_s8g4))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7XY
      }
      }
<measure_s802,<0,0>>
<measure_s802,<0,0>>
  = \ <a_a5HY,<1,0>>
      <$dNFData_a5I0,<1,0>>
      <description_a1W6,<1,0>>
      <f_a1W7,<1,0>>
      <s_a7Xu,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Xu
      of <ds1_a7Xv,<1,2>>
      { (# <ipv_a7Xx,<1,2>>, <ipv1_a7Xy,<1,2>> #) ->
      case ((case ($dNFData_a5I0
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                           :: Control.DeepSeq.NFData a_a5HY ~R# (a_a5HY -> ())))
                    f_a1W7
             of <wild_a7Us,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Xx
      of <ds1_X7XU,<1,3>>
      { (# <ipv_X7XY,<1,3>>, <ipv1_X7Y0,<1,3>> #) ->
      let {
        <duration_s8ds,<1,4>>
        <duration_s8ds,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7Z5,<1,7>> <c_a7Z6,<1,7>> <n_a7Z7,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7Z5
                           c_a7Z6
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              (let {
                                 <lvl_s8g5,F<0,0>>
                                 <lvl_s8g5,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8g5)
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5
                                    (let {
                                       <lvl_s8g6,F<0,0>>
                                       <lvl_s8g6,F<0,0>> = " pico seconds"# } in
                                     lvl_s8g6)
                                    c_a7Z6
                                    n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8ds
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8ds
                                 (let {
                                    <lvl_s8g7,F<0,0>>
                                    <lvl_s8g7,F<0,0>> = 1000000000 } in
                                  lvl_s8g7))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7XY
      }
      }
<Main.measure,<0,0>>
<Main.measure,<0,0>>
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <Control.DeepSeq.NFData a>_R
            ->_R <GHC.Base.String>_R
            ->_R <a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Control.DeepSeq.NFData a
                -> GHC.Base.String
                -> a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# (forall a.
                    Control.DeepSeq.NFData a
                    -> GHC.Base.String -> a -> GHC.Types.IO ()))
<Main.testStimes,<0,0>>
<Main.testStimes,<0,0>>
  = GHC.Magic.noinline
      @ (forall b a. GHC.Real.Integral b => b -> [a] -> [a])
      Data.Semigroup.Internal.stimesList
      @ GHC.Integer.Type.Integer
      @ GHC.Types.Char
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8g8,F<0,0>>
         <lvl_s8g8,F<0,0>> = 1000000 } in
       lvl_s8g8)
      (let {
         <lvl_s8gb,F<0,0>>
         <lvl_s8gb,F<0,0>>
           = GHC.Base.build
               @ GHC.Types.Char
               (let {
                  <lvl_s8ga,F<0,0>>
                  <lvl_s8ga,F<0,0>>
                    = \ <b_a7YL,<0,1>> ->
                        GHC.CString.unpackFoldrCString#
                          @ b_a7YL
                          (let {
                             <lvl_s8g9,F<0,0>>
                             <lvl_s8g9,F<0,0>> = "foo"# } in
                           lvl_s8g9) } in
                lvl_s8ga) } in
       lvl_s8gb)
<Main.testIntegralPower,<0,0>>
<Main.testIntegralPower,<0,0>>
  = GHC.Real.^
      @ GHC.Integer.Type.Integer
      @ GHC.Integer.Type.Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8gc,F<0,0>>
         <lvl_s8gc,F<0,0>> = 3 } in
       lvl_s8gc)
      (let {
         <lvl_s8gd,F<0,0>>
         <lvl_s8gd,F<0,0>> = 1000000 } in
       lvl_s8gd)
<Main.testFractionalPower,<0,0>>
<Main.testFractionalPower,<0,0>>
  = GHC.Real.^^
      @ GHC.Types.Double
      @ GHC.Integer.Type.Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8ge,F<0,0>>
         <lvl_s8ge,F<0,0>> = GHC.Types.D# 5.0## } in
       lvl_s8ge)
      (let {
         <lvl_s8gf,F<0,0>>
         <lvl_s8gf,F<0,0>> = 441 } in
       lvl_s8gf)
<main_s82z,<0,0>>
<main_s82z,<0,0>>
  = \ <s_a81O,<0,1>> ->
      case measure_s802
             @ GHC.Base.String
             ((let {
                 <lvl_s8gi,F<0,0>>
                 <lvl_s8gi,F<0,0>>
                   = \ <eta_a822,<1,0>> ->
                       letrec {
                         <go_s8gh,F<0,0>>
                         <go_s8gh,F<0,0>>
                           = \ <ds_a824,<1,0>> ->
                               case ds_a824 of <wild_a825,<1,2>> {
                                 [] -> GHC.Tuple.();
                                 : <x_a828,<1,2>> <xs_a829,<1,2>> ->
                                   case x_a828 of <ds1_a81V,<1,3>>
                                   { GHC.Types.C# <ipv_a81X,<1,3>> ->
                                   go_s8gh xs_a829
                                   }
                               }; } in
                       go_s8gh eta_a822 } in
               lvl_s8gi)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[GHC.Types.Char]>_N)
                      :: ([GHC.Types.Char] -> ())
                         ~R# Control.DeepSeq.NFData [GHC.Types.Char]))
             (let {
                <lvl_s8gl,F<0,0>>
                <lvl_s8gl,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8gk,F<0,0>>
                         <lvl_s8gk,F<0,0>>
                           = \ <b_a7YL,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7YL
                                 (let {
                                    <lvl_s8gj,F<0,0>>
                                    <lvl_s8gj,F<0,0>> = "stimes : "# } in
                                  lvl_s8gj) } in
                       lvl_s8gk) } in
              lvl_s8gl)
             Main.testStimes
             s_a81O
      of <ds1_a81P,<0,3>>
      { (# <ipv_a81R,<0,3>>, <ipv1_a81S,<0,3>> #) ->
      case measure_s802
             @ GHC.Types.Double
             ((let {
                 <lvl_s8gm,F<0,0>>
                 <lvl_s8gm,F<0,0>>
                   = \ <ds_a82j,<1,0>> ->
                       case ds_a82j of <ds1_a82k,<1,2>> { GHC.Types.D# <ipv_a82m,<1,2>> ->
                       GHC.Tuple.()
                       } } in
               lvl_s8gm)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8gp,F<0,0>>
                <lvl_s8gp,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8go,F<0,0>>
                         <lvl_s8go,F<0,0>>
                           = \ <b_a7YL,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7YL
                                 (let {
                                    <lvl_s8gn,F<0,0>>
                                    <lvl_s8gn,F<0,0>> = "fractional power 1 : "# } in
                                  lvl_s8gn) } in
                       lvl_s8go) } in
              lvl_s8gp)
             Main.testFractionalPower
             ipv_a81R
      of <ds1_X82f,<0,4>>
      { (# <ipv_X82j,<0,4>>, <ipv1_X82l,<0,4>> #) ->
      case measure_s802
             @ GHC.Types.Double
             ((let {
                 <lvl_s8gq,F<0,0>>
                 <lvl_s8gq,F<0,0>>
                   = \ <ds_a82j,<1,0>> ->
                       case ds_a82j of <ds1_a82k,<1,2>> { GHC.Types.D# <ipv_a82m,<1,2>> ->
                       GHC.Tuple.()
                       } } in
               lvl_s8gq)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8gt,F<0,0>>
                <lvl_s8gt,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8gs,F<0,0>>
                         <lvl_s8gs,F<0,0>>
                           = \ <b_a7YL,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7YL
                                 (let {
                                    <lvl_s8gr,F<0,0>>
                                    <lvl_s8gr,F<0,0>> = "fractional power 2 : "# } in
                                  lvl_s8gr) } in
                       lvl_s8gs) } in
              lvl_s8gt)
             Main.testFractionalPower
             ipv_X82j
      of <ds1_X82k,<0,5>>
      { (# <ipv_X82o,<0,5>>, <ipv1_X82q,<0,5>> #) ->
      case measure_s802
             @ GHC.Types.Double
             ((let {
                 <lvl_s8gu,F<0,0>>
                 <lvl_s8gu,F<0,0>>
                   = \ <ds_a82j,<1,0>> ->
                       case ds_a82j of <ds1_a82k,<1,2>> { GHC.Types.D# <ipv_a82m,<1,2>> ->
                       GHC.Tuple.()
                       } } in
               lvl_s8gu)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8gx,F<0,0>>
                <lvl_s8gx,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8gw,F<0,0>>
                         <lvl_s8gw,F<0,0>>
                           = \ <b_a7YL,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7YL
                                 (let {
                                    <lvl_s8gv,F<0,0>>
                                    <lvl_s8gv,F<0,0>> = "fractional power 3 : "# } in
                                  lvl_s8gv) } in
                       lvl_s8gw) } in
              lvl_s8gx)
             Main.testFractionalPower
             ipv_X82o
      of <ds1_X82p,<0,6>>
      { (# <ipv_X82t,<0,6>>, <ipv1_X82v,<0,6>> #) ->
      measure_s802
        @ GHC.Integer.Type.Integer
        ((let {
            <lvl_s8gy,F<0,0>>
            <lvl_s8gy,F<0,0>>
              = \ <ds_a82u,<1,0>> ->
                  case ds_a82u of <ds1_a82v,<1,2>> { __DEFAULT -> GHC.Tuple.() } } in
          lvl_s8gy)
         `cast` (Sym (Control.DeepSeq.N:NFData[0]
                          <GHC.Integer.Type.Integer>_N)
                 :: (GHC.Integer.Type.Integer -> ())
                    ~R# Control.DeepSeq.NFData GHC.Integer.Type.Integer))
        (let {
           <lvl_s8gB,F<0,0>>
           <lvl_s8gB,F<0,0>>
             = GHC.Base.build
                 @ GHC.Types.Char
                 (let {
                    <lvl_s8gA,F<0,0>>
                    <lvl_s8gA,F<0,0>>
                      = \ <b_a7YL,<0,1>> ->
                          GHC.CString.unpackFoldrCString#
                            @ b_a7YL
                            (let {
                               <lvl_s8gz,F<0,0>>
                               <lvl_s8gz,F<0,0>> = "integral power : "# } in
                             lvl_s8gz) } in
                  lvl_s8gA) } in
         lvl_s8gB)
        Main.testIntegralPower
        ipv_X82t
      }
      }
      }
      }
<Main.main,<0,0>>
<Main.main,<0,0>>
  = main_s82z
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())
<main_s8d9,<0,0>>
<main_s8d9,<0,0>>
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# GHC.Types.IO ()))
<:Main.main,<0,0>>
<:Main.main,<0,0>>
  = main_s8d9
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())


==================== Float out(FOS {Lam = Just 0, Consts = True, OverSatApps = False}) ====================
2019-11-05 16:47:55.412743201 UTC

Result size of Float out(FOS {Lam = Just 0,
                              Consts = True,
                              OverSatApps = False})
  = {terms: 732, types: 668, coercions: 84, joins: 0/4}

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<L,U>]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 xs_a829 ->
          case x_a828 of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X ->
          go_s8eP xs_a829
          }
      }

-- RHS size: {terms: 3, types: 2, coercions: 4, joins: 0/0}
$dNFData_s8dD :: NFData String
[LclId]
$dNFData_s8dD
  = (\ (eta_a822 :: [Char]) -> go_s8eP eta_a822)
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
            :: ([Char] -> ()) ~R# NFData [Char])

-- RHS size: {terms: 5, types: 3, coercions: 3, joins: 0/0}
$dNFData_s8dx :: NFData Double
[LclId]
$dNFData_s8dx
  = (\ (ds_a82j :: Double) ->
       case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
       ghc-prim-0.6.1:GHC.Tuple.()
       })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
            :: (Double -> ()) ~R# NFData Double)

-- RHS size: {terms: 5, types: 2, coercions: 3, joins: 0/0}
$dNFData_s8dt :: NFData Integer
[LclId]
$dNFData_s8dt
  = (\ (ds_a82u :: Integer) ->
       case ds_a82u of { __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.() })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
            :: (Integer -> ()) ~R# NFData Integer)

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8dN [Occ=OnceL*] :: Num Double
[LclId]
$dNum1_s8dN
  = GHC.Real.$p1Fractional @ Double GHC.Float.$fFractionalDouble

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8eR :: Real Integer
[LclId]
$dReal_s8eR
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum_s8eT :: Num Integer
[LclId]
$dNum_s8eT = GHC.Real.$p1Real @ Integer $dReal_s8eR

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq_s8eV [Occ=OnceL] :: Ord Integer
[LclId]
$dEq_s8eV = GHC.Real.$p2Real @ Integer $dReal_s8eR

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq1_s8eX [Occ=OnceL] :: Eq Integer
[LclId]
$dEq1_s8eX = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Integer $dEq_s8eV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eY :: Integer
[LclId]
lvl_s8eY = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8eZ :: Integer
[LclId]
lvl_s8eZ = fromInteger @ Integer $dNum_s8eT lvl_s8eY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8f0 :: Integer
[LclId]
lvl_s8f0 = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8f1 :: Integer
[LclId]
lvl_s8f1 = fromInteger @ Integer $dNum_s8eT lvl_s8f0

-- RHS size: {terms: 8, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId, Arity=1]
$seven_s8eG
  = \ (n_a8es [Occ=Once] :: Integer) ->
      ==
        @ Integer
        $dEq1_s8eX
        (rem @ Integer GHC.Real.$fIntegralInteger n_a8es lvl_s8eZ)
        lvl_s8f1

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8f3 :: Real Integer
[LclId]
$dReal_s8f3
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8f5 :: Num Integer
[LclId]
$dNum1_s8f5 = GHC.Real.$p1Real @ Integer $dReal_s8f3

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dOrd_s8f7 :: Ord Integer
[LclId]
$dOrd_s8f7 = GHC.Real.$p2Real @ Integer $dReal_s8f3

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq_s8f9 [Occ=OnceL] :: Eq Integer
[LclId]
$dEq_s8f9 = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Integer $dOrd_s8f7

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal1_s8ff :: Real Integer
[LclId]
$dReal1_s8ff
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum2_s8fh :: Num Integer
[LclId]
$dNum2_s8fh = GHC.Real.$p1Real @ Integer $dReal1_s8ff

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq1_s8fj [Occ=OnceL] :: Ord Integer
[LclId]
$dEq1_s8fj = GHC.Real.$p2Real @ Integer $dReal1_s8ff

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq2_s8fl [Occ=OnceL] :: Eq Integer
[LclId]
$dEq2_s8fl = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Integer $dEq1_s8fj

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal2_s8fr :: Real Integer
[LclId]
$dReal2_s8fr
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum3_s8ft :: Num Integer
[LclId]
$dNum3_s8ft = GHC.Real.$p1Real @ Integer $dReal2_s8fr

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq3_s8fv [Occ=OnceL] :: Ord Integer
[LclId]
$dEq3_s8fv = GHC.Real.$p2Real @ Integer $dReal2_s8fr

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq4_s8fx [Occ=OnceL] :: Eq Integer
[LclId]
$dEq4_s8fx = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Integer $dEq3_s8fv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fC :: Integer
[LclId]
lvl_s8fC = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId]
lvl_s8fD = fromInteger @ Integer $dNum3_s8ft lvl_s8fC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fA :: Integer
[LclId]
lvl_s8fA = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId]
lvl_s8fB = fromInteger @ Integer $dNum3_s8ft lvl_s8fA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fE :: Integer
[LclId]
lvl_s8fE = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fF :: Integer
[LclId]
lvl_s8fF = fromInteger @ Integer $dNum3_s8ft lvl_s8fE

-- RHS size: {terms: 43, types: 13, coercions: 0, joins: 0/0}
g1_s8fz [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
g1_s8fz
  = \ (x1_a7W3 :: Double)
      (y1_a7W4 :: Integer)
      (z_a7W5 [Occ=Once*] :: Double) ->
      case even @ Integer GHC.Real.$fIntegralInteger y1_a7W4 of {
        False ->
          case == @ Integer $dEq4_s8fx y1_a7W4 lvl_s8fB of {
            False ->
              g1_s8fz
                (* @ Double $dNum1_s8dN x1_a7W3 x1_a7W3)
                (quot @ Integer GHC.Real.$fIntegralInteger y1_a7W4 lvl_s8fD)
                (* @ Double $dNum1_s8dN x1_a7W3 z_a7W5);
            True -> * @ Double $dNum1_s8dN x1_a7W3 z_a7W5
          };
        True ->
          g1_s8fz
            (* @ Double $dNum1_s8dN x1_a7W3 x1_a7W3)
            (quot @ Integer GHC.Real.$fIntegralInteger y1_a7W4 lvl_s8fF)
            z_a7W5
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fG :: Integer
[LclId]
lvl_s8fG = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fH :: Integer
[LclId]
lvl_s8fH = fromInteger @ Integer $dNum2_s8fh lvl_s8fG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fo :: Integer
[LclId]
lvl_s8fo = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fp :: Integer
[LclId]
lvl_s8fp = fromInteger @ Integer $dNum2_s8fh lvl_s8fo

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fI :: Integer
[LclId]
lvl_s8fI = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fJ :: Integer
[LclId]
lvl_s8fJ = fromInteger @ Integer $dNum2_s8fh lvl_s8fI

-- RHS size: {terms: 35, types: 10, coercions: 0, joins: 0/0}
f_s8fn [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId, Arity=2, Str=<L,U><L,U>]
f_s8fn
  = \ (x_a7VO :: Double) (y_a7VP :: Integer) ->
      case even @ Integer GHC.Real.$fIntegralInteger y_a7VP of {
        False ->
          case == @ Integer $dEq2_s8fl y_a7VP lvl_s8fp of {
            False ->
              g1_s8fz
                (* @ Double $dNum1_s8dN x_a7VO x_a7VO)
                (quot @ Integer GHC.Real.$fIntegralInteger y_a7VP lvl_s8fH)
                x_a7VO;
            True -> x_a7VO
          };
        True ->
          f_s8fn
            (* @ Double $dNum1_s8dN x_a7VO x_a7VO)
            (quot @ Integer GHC.Real.$fIntegralInteger y_a7VP lvl_s8fJ)
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fK :: Integer
[LclId]
lvl_s8fK = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fL :: Double
[LclId]
lvl_s8fL = fromInteger @ Double $dNum1_s8dN lvl_s8fK

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fc :: Integer
[LclId]
lvl_s8fc = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fd :: Integer
[LclId]
lvl_s8fd = fromInteger @ Integer $dNum1_s8f5 lvl_s8fc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fM :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fM = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId, Str=b]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fM)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fa :: Integer
[LclId]
lvl_s8fa = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fb :: Integer
[LclId]
lvl_s8fb = fromInteger @ Integer $dNum1_s8f5 lvl_s8fa

-- RHS size: {terms: 21, types: 6, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId, Arity=2]
$s^_s8et
  = \ (x0_a7VB [Occ=Once] :: Double) (y0_a7VC :: Integer) ->
      case < @ Integer $dOrd_s8f7 y0_a7VC lvl_s8fb of {
        False ->
          case == @ Integer $dEq_s8f9 y0_a7VC lvl_s8fd of {
            False -> f_s8fn x0_a7VB y0_a7VC;
            True -> lvl_s8fL
          };
        True -> lvl_s8fN
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8fP :: Real Integer
[LclId]
$dReal_s8fP
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum_s8fR :: Num Integer
[LclId]
$dNum_s8fR = GHC.Real.$p1Real @ Integer $dReal_s8fP

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dOrd_s8fT [Occ=OnceL] :: Ord Integer
[LclId]
$dOrd_s8fT = GHC.Real.$p2Real @ Integer $dReal_s8fP

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fU :: Integer
[LclId]
lvl_s8fU = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId]
lvl_s8fV = fromInteger @ Integer $dNum_s8fR lvl_s8fU

-- RHS size: {terms: 23, types: 10, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId, Arity=2]
$s^^_s8eL
  = \ (x_a7Vm [Occ=Once*] :: Double) (n_a7Vn :: Integer) ->
      case >= @ Integer $dOrd_s8fT n_a7Vn lvl_s8fV of {
        False ->
          recip
            @ Double
            GHC.Float.$fFractionalDouble
            (^ @ Double
               @ Integer
               $dNum1_s8dN
               GHC.Real.$fIntegralInteger
               x_a7Vm
               (negate @ Integer $dNum_s8fR n_a7Vn));
        True ->
          ^ @ Double
            @ Integer
            $dNum1_s8dN
            GHC.Real.$fIntegralInteger
            x_a7Vm
            n_a7Vn
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId]
lvl_s8fY = 1000000000

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Xu
      of
      { (# ipv_a7Xx, ipv1_a7Xy #) ->
      case ((case ($dNFData_s8dD
                   `cast` (Control.DeepSeq.N:NFData[0] <String>_N
                           :: NFData String ~R# (String -> ())))
                    f_a1W7
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Xx
      of
      { (# ipv_X7XY, ipv1_X7Y0 #) ->
      let {
        duration_s8dF :: Integer
        [LclId]
        duration_s8dF
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              lvl_s8fW
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 lvl_s8fX c_a7Z6 n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dF
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8dF lvl_s8fY)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7XY
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fZ = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g0 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 :: Integer
[LclId]
lvl_s8g1 = 1000000000

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Xu
      of
      { (# ipv_a7Xx, ipv1_a7Xy #) ->
      case ((case ($dNFData_s8dx
                   `cast` (Control.DeepSeq.N:NFData[0] <Double>_N
                           :: NFData Double ~R# (Double -> ())))
                    f_a1W7
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Xx
      of
      { (# ipv_X7XY, ipv1_X7Y0 #) ->
      let {
        duration_s8dz :: Integer
        [LclId]
        duration_s8dz
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              lvl_s8fZ
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 lvl_s8g0 c_a7Z6 n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dz
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8dz lvl_s8g1)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7XY
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 :: Integer
[LclId]
lvl_s8g4 = 1000000000

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Xu
      of
      { (# ipv_a7Xx, ipv1_a7Xy #) ->
      case ((case ($dNFData_s8dt
                   `cast` (Control.DeepSeq.N:NFData[0] <Integer>_N
                           :: NFData Integer ~R# (Integer -> ())))
                    f_a1W7
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Xx
      of
      { (# ipv_X7XY, ipv1_X7Y0 #) ->
      let {
        duration_s8dv :: Integer
        [LclId]
        duration_s8dv
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              lvl_s8g2
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 lvl_s8g3 c_a7Z6 n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dv
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8dv lvl_s8g4)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7XY
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g7 :: Integer
[LclId]
lvl_s8g7 = 1000000000

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Xu
      of
      { (# ipv_a7Xx, ipv1_a7Xy #) ->
      case ((case ($dNFData_a5I0
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                           :: NFData a_a5HY ~R# (a_a5HY -> ())))
                    f_a1W7
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Xx
      of
      { (# ipv_X7XY, ipv1_X7Y0 #) ->
      let {
        duration_s8ds :: Integer
        [LclId]
        duration_s8ds
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              lvl_s8g5
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 lvl_s8g6 c_a7Z6 n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8ds
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8ds lvl_s8g7)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7XY
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX, Arity=4]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g8 :: Integer
[LclId]
lvl_s8g8 = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g9 = "foo"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8ga :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8ga
  = \ (@ b_a7YL) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YL lvl_s8g9

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8gb :: [Char]
[LclId]
lvl_s8gb = GHC.Base.build @ Char lvl_s8ga

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8g8
      lvl_s8gb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gc :: Integer
[LclId]
lvl_s8gc = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gd :: Integer
[LclId]
lvl_s8gd = 1000000

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      lvl_s8gc
      lvl_s8gd

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8ge :: Double
[LclId]
lvl_s8ge = ghc-prim-0.6.1:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gf :: Integer
[LclId]
lvl_s8gf = 441

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      lvl_s8ge
      lvl_s8gf

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
lvl_s8gy :: Integer -> ()
[LclId]
lvl_s8gy
  = \ (ds_a82u :: Integer) ->
      case ds_a82u of { __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.() }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gz :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8gz = "integral power : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8gA :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8gA
  = \ (@ b_a7YL) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YL lvl_s8gz

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8gB :: [Char]
[LclId]
lvl_s8gB = GHC.Base.build @ Char lvl_s8gA

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl_s8gu :: Double -> ()
[LclId]
lvl_s8gu
  = \ (ds_a82j :: Double) ->
      case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
      ghc-prim-0.6.1:GHC.Tuple.()
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gv :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8gv = "fractional power 3 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8gw :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8gw
  = \ (@ b_a7YL) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YL lvl_s8gv

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8gx :: [Char]
[LclId]
lvl_s8gx = GHC.Base.build @ Char lvl_s8gw

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl_s8gq :: Double -> ()
[LclId]
lvl_s8gq
  = \ (ds_a82j :: Double) ->
      case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
      ghc-prim-0.6.1:GHC.Tuple.()
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gr :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8gr = "fractional power 2 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8gs :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8gs
  = \ (@ b_a7YL) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YL lvl_s8gr

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8gt :: [Char]
[LclId]
lvl_s8gt = GHC.Base.build @ Char lvl_s8gs

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl_s8gm :: Double -> ()
[LclId]
lvl_s8gm
  = \ (ds_a82j :: Double) ->
      case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
      ghc-prim-0.6.1:GHC.Tuple.()
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gn :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8gn = "fractional power 1 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8go :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8go
  = \ (@ b_a7YL) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YL lvl_s8gn

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8gp :: [Char]
[LclId]
lvl_s8gp = GHC.Base.build @ Char lvl_s8go

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8gh [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<L,U>]
go_s8gh
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 xs_a829 ->
          case x_a828 of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X ->
          go_s8gh xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8gi :: [Char] -> ()
[LclId]
lvl_s8gi = \ (eta_a822 :: [Char]) -> go_s8gh eta_a822

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gj :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8gj = "stimes : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8gk :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8gk
  = \ (@ b_a7YL) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YL lvl_s8gj

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8gl :: [Char]
[LclId]
lvl_s8gl = GHC.Base.build @ Char lvl_s8gk

-- RHS size: {terms: 34, types: 51, coercions: 16, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case measure_s802
             @ String
             (lvl_s8gi
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             lvl_s8gl
             testStimes
             s_a81O
      of
      { (# ipv_a81R, ipv1_a81S #) ->
      case measure_s802
             @ Double
             (lvl_s8gm
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8gp
             testFractionalPower
             ipv_a81R
      of
      { (# ipv_X82j, ipv1_X82l #) ->
      case measure_s802
             @ Double
             (lvl_s8gq
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8gt
             testFractionalPower
             ipv_X82j
      of
      { (# ipv_X82o, ipv1_X82q #) ->
      case measure_s802
             @ Double
             (lvl_s8gu
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8gx
             testFractionalPower
             ipv_X82o
      of
      { (# ipv_X82t, ipv1_X82v #) ->
      measure_s802
        @ Integer
        (lvl_s8gy
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        lvl_s8gB
        testIntegralPower
        ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX, Arity=1]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX, Arity=1]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Simplifier ====================
2019-11-05 16:47:55.525554738 UTC
  Max iterations = 4
  SimplMode {Phase = 2 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 585, types: 613, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fV = 0

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YL) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
              @ b_a7YL "Negative exponent"#))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fB = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fF = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fH :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fH = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fp :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fp = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fJ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fd = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fb = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8eZ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8f1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8f1 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8eZ)
             lvl_s8f1
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8fz [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8fz
  = \ (x1_a7W3 :: Double) (y1_a7W4 :: Integer) (z_a7W5 :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7W4 lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7W4 lvl_s8fB
          of {
            __DEFAULT ->
              g1_s8fz
                (GHC.Float.timesDouble x1_a7W3 x1_a7W3)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7W4 lvl_s8fD)
                (GHC.Float.timesDouble x1_a7W3 z_a7W5);
            1# -> GHC.Float.timesDouble x1_a7W3 z_a7W5
          };
        1# ->
          g1_s8fz
            (GHC.Float.timesDouble x1_a7W3 x1_a7W3)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7W4 lvl_s8fF)
            z_a7W5
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8fn [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8fn
  = \ (x_a7VO :: Double) (y_a7VP :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7VP lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7VP lvl_s8fp
          of {
            __DEFAULT ->
              g1_s8fz
                (GHC.Float.timesDouble x_a7VO x_a7VO)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7VP lvl_s8fH)
                x_a7VO;
            1# -> x_a7VO
          };
        1# ->
          f_s8fn
            (GHC.Float.timesDouble x_a7VO x_a7VO)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7VP lvl_s8fJ)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fL :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fL = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8et
  = \ (x0_a7VB :: Double) (y0_a7VC :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7VC lvl_s8fb
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7VC lvl_s8fd
          of {
            __DEFAULT -> f_s8fn x0_a7VB y0_a7VC;
            1# -> lvl_s8fL
          };
        1# -> lvl_s8fN
      }

-- RHS size: {terms: 28, types: 10, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 191 20}]
$s^^_s8eL
  = \ (x_a7Vm :: Double) (n_a7Vn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7Vn lvl_s8fV
      of {
        __DEFAULT ->
          case ^ @ Double
                 @ Integer
                 GHC.Float.$fNumDouble
                 GHC.Real.$fIntegralInteger
                 x_a7Vm
                 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7Vn)
          of
          { ghc-prim-0.6.1:GHC.Types.D# y_a8hL ->
          case ghc-prim-0.6.1:GHC.Prim./## 1.0## y_a8hL of wild1_a8hN
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# wild1_a8hN
          }
          };
        1# ->
          ^ @ Double
            @ Integer
            GHC.Float.$fNumDouble
            GHC.Real.$fIntegralInteger
            x_a7Vm
            n_a7Vn
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 xs_a829 ->
          case x_a828 of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fY = 1000000000

-- RHS size: {terms: 73, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 600 0}]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case go_s8eP f_a1W7 of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80F, ipv1_X80H #) ->
      let {
        duration_s8dF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dF
          = case ipv1_X80H of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X80Y, y_X810) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dF lvl_s8fY)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Yt, ww4_a7Yu #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              lvl_s8fW
                              c_a7Z6
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X809, ww4_X80b #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 lvl_s8fX c_a7Z6 n_a7Z7)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X809 ww4_X80b)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7Yt ww4_a7Yu)
                         })
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fZ = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g0 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g1 = 1000000000

-- RHS size: {terms: 72, types: 87, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case f_a1W7 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80L, ipv1_X80N #) ->
      let {
        duration_s8dz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dz
          = case ipv1_X80N of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X814, y_X816) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dz lvl_s8g1)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Yt, ww4_a7Yu #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              lvl_s8fZ
                              c_a7Z6
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80f, ww4_X80h #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 lvl_s8g0 c_a7Z6 n_a7Z7)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80f ww4_X80h)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7Yt ww4_a7Yu)
                         })
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g4 = 1000000000

-- RHS size: {terms: 72, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case f_a1W7 of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80N, ipv1_X80P #) ->
      let {
        duration_s8dv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dv
          = case ipv1_X80P of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X816, y_X818) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dv lvl_s8g4)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Yt, ww4_a7Yu #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              lvl_s8g2
                              c_a7Z6
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80h, ww4_X80j #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 lvl_s8g3 c_a7Z6 n_a7Z7)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80h ww4_X80j)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7Yt ww4_a7Yu)
                         })
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g7 = 1000000000

-- RHS size: {terms: 75, types: 90, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 600 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80U, ipv1_X80W #) ->
      let {
        duration_s8ds :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ds
          = case ipv1_X80W of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X81d, y_X81f) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8ds lvl_s8g7)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Yt, ww4_a7Yu #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              lvl_s8g5
                              c_a7Z6
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80o, ww4_X80q #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 lvl_s8g6 c_a7Z6 n_a7Z7)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80o ww4_X80q)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7Yt ww4_a7Yu)
                         })
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YL) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YL "foo"#))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      441

-- RHS size: {terms: 44, types: 66, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "stimes : "#))
             testStimes
             s_a81O
      of
      { (# ipv_a81R, ipv1_a81S #) ->
      case $smeasure_s8dA
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "fractional power 1 : "#))
             testFractionalPower
             ipv_a81R
      of
      { (# ipv_X82j, ipv1_X82l #) ->
      case $smeasure_s8dA
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "fractional power 2 : "#))
             testFractionalPower
             ipv_X82j
      of
      { (# ipv_X82o, ipv1_X82q #) ->
      case $smeasure_s8dA
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "fractional power 3 : "#))
             testFractionalPower
             ipv_X82o
      of
      { (# ipv_X82t, ipv1_X82v #) ->
      $smeasure_s8dw
        (GHC.Base.build
           @ Char
           (\ (@ b_a7YL) ->
              ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                @ b_a7YL "integral power : "#))
        testIntegralPower
        ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Simplifier ====================
2019-11-05 16:47:55.570177574 UTC
  Max iterations = 4
  SimplMode {Phase = 1 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fV = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fB = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fF = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fH :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fH = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fp :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fp = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fJ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fd = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fb = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8eZ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8f1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8f1 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8eZ)
             lvl_s8f1
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8fz [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8fz
  = \ (x1_a7W3 :: Double) (y1_a7W4 :: Integer) (z_a7W5 :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7W4 lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7W4 lvl_s8fB
          of {
            __DEFAULT ->
              g1_s8fz
                (GHC.Float.timesDouble x1_a7W3 x1_a7W3)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7W4 lvl_s8fD)
                (GHC.Float.timesDouble x1_a7W3 z_a7W5);
            1# -> GHC.Float.timesDouble x1_a7W3 z_a7W5
          };
        1# ->
          g1_s8fz
            (GHC.Float.timesDouble x1_a7W3 x1_a7W3)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7W4 lvl_s8fF)
            z_a7W5
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8fn [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8fn
  = \ (x_a7VO :: Double) (y_a7VP :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7VP lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7VP lvl_s8fp
          of {
            __DEFAULT ->
              g1_s8fz
                (GHC.Float.timesDouble x_a7VO x_a7VO)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7VP lvl_s8fH)
                x_a7VO;
            1# -> x_a7VO
          };
        1# ->
          f_s8fn
            (GHC.Float.timesDouble x_a7VO x_a7VO)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7VP lvl_s8fJ)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fL :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fL = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8et
  = \ (x0_a7VB :: Double) (y0_a7VC :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7VC lvl_s8fb
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7VC lvl_s8fd
          of {
            __DEFAULT -> f_s8fn x0_a7VB y0_a7VC;
            1# -> lvl_s8fL
          };
        1# -> lvl_s8fN
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8eL
  = \ (x_a7Vm :: Double) (n_a7Vn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7Vn lvl_s8fV
      of {
        __DEFAULT ->
          case $s^_s8et
                 x_a7Vm (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7Vn)
          of
          { ghc-prim-0.6.1:GHC.Types.D# y_a8hL ->
          case ghc-prim-0.6.1:GHC.Prim./## 1.0## y_a8hL of wild1_a8hN
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# wild1_a8hN
          }
          };
        1# -> $s^_s8et x_a7Vm n_a7Vn
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 xs_a829 ->
          case x_a828 of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fY = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case go_s8eP f_a1W7 of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80F, ipv1_X80H #) ->
      let {
        duration_s8dF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dF
          = case ipv1_X80H of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X80Y, y_X810) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX)
                            ww3_X809
                            ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fZ = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g0 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g1 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case f_a1W7 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80L, ipv1_X80N #) ->
      let {
        duration_s8dz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dz
          = case ipv1_X80N of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X814, y_X816) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8g1)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fZ
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g0)
                            ww3_X80f
                            ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g4 = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case f_a1W7 of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80N, ipv1_X80P #) ->
      let {
        duration_s8dv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dv
          = case ipv1_X80P of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X816, y_X818) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8g4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g3)
                            ww3_X80h
                            ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g7 = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80U, ipv1_X80W #) ->
      let {
        duration_s8ds :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ds
          = case ipv1_X80W of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X81d, y_X81f) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8g7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g6)
                            ww3_X80o
                            ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8eL (ghc-prim-0.6.1:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81O
      of
      { (# ipv_a81R, ipv1_a81S #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81R
      of
      { (# ipv_X82j, ipv1_X82l #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X82j
      of
      { (# ipv_X82o, ipv1_X82q #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82o
      of
      { (# ipv_X82t, ipv1_X82v #) ->
      $smeasure_s8dw
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Simplifier ====================
2019-11-05 16:47:55.58612649 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fV = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fB = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fF = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fH :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fH = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fp :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fp = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fJ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fd = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fb = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8eZ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8f1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8f1 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8eZ)
             lvl_s8f1
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8fz [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8fz
  = \ (x1_a7W3 :: Double) (y1_a7W4 :: Integer) (z_a7W5 :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7W4 lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7W4 lvl_s8fB
          of {
            __DEFAULT ->
              g1_s8fz
                (GHC.Float.timesDouble x1_a7W3 x1_a7W3)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7W4 lvl_s8fD)
                (GHC.Float.timesDouble x1_a7W3 z_a7W5);
            1# -> GHC.Float.timesDouble x1_a7W3 z_a7W5
          };
        1# ->
          g1_s8fz
            (GHC.Float.timesDouble x1_a7W3 x1_a7W3)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7W4 lvl_s8fF)
            z_a7W5
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8fn [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8fn
  = \ (x_a7VO :: Double) (y_a7VP :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7VP lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7VP lvl_s8fp
          of {
            __DEFAULT ->
              g1_s8fz
                (GHC.Float.timesDouble x_a7VO x_a7VO)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7VP lvl_s8fH)
                x_a7VO;
            1# -> x_a7VO
          };
        1# ->
          f_s8fn
            (GHC.Float.timesDouble x_a7VO x_a7VO)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7VP lvl_s8fJ)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fL :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fL = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8et
  = \ (x0_a7VB :: Double) (y0_a7VC :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7VC lvl_s8fb
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7VC lvl_s8fd
          of {
            __DEFAULT -> f_s8fn x0_a7VB y0_a7VC;
            1# -> lvl_s8fL
          };
        1# -> lvl_s8fN
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8eL
  = \ (x_a7Vm :: Double) (n_a7Vn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7Vn lvl_s8fV
      of {
        __DEFAULT ->
          case $s^_s8et
                 x_a7Vm (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7Vn)
          of
          { ghc-prim-0.6.1:GHC.Types.D# y_a8hL ->
          case ghc-prim-0.6.1:GHC.Prim./## 1.0## y_a8hL of wild1_a8hN
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# wild1_a8hN
          }
          };
        1# -> $s^_s8et x_a7Vm n_a7Vn
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 xs_a829 ->
          case x_a828 of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fY = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case go_s8eP f_a1W7 of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80F, ipv1_X80H #) ->
      let {
        duration_s8dF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dF
          = case ipv1_X80H of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X80Y, y_X810) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX)
                            ww3_X809
                            ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fZ = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g0 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g1 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case f_a1W7 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80L, ipv1_X80N #) ->
      let {
        duration_s8dz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dz
          = case ipv1_X80N of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X814, y_X816) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8g1)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fZ
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g0)
                            ww3_X80f
                            ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g4 = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case f_a1W7 of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80N, ipv1_X80P #) ->
      let {
        duration_s8dv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dv
          = case ipv1_X80P of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X816, y_X818) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8g4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g3)
                            ww3_X80h
                            ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g7 = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80U, ipv1_X80W #) ->
      let {
        duration_s8ds :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ds
          = case ipv1_X80W of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X81d, y_X81f) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8g7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g6)
                            ww3_X80o
                            ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8eL (ghc-prim-0.6.1:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81O
      of
      { (# ipv_a81R, ipv1_a81S #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81R
      of
      { (# ipv_X82j, ipv1_X82l #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X82j
      of
      { (# ipv_X82o, ipv1_X82q #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82o
      of
      { (# ipv_X82t, ipv1_X82v #) ->
      $smeasure_s8dw
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Float inwards ====================
2019-11-05 16:47:55.595055592 UTC

Result size of Float inwards
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fV = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fB = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fF = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fH :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fH = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fp :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fp = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fJ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fd = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fb = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8eZ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8f1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8f1 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8eZ)
             lvl_s8f1
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8fz [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8fz
  = \ (x1_a7W3 :: Double) (y1_a7W4 :: Integer) (z_a7W5 :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7W4 lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7W4 lvl_s8fB
          of {
            __DEFAULT ->
              g1_s8fz
                (GHC.Float.timesDouble x1_a7W3 x1_a7W3)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7W4 lvl_s8fD)
                (GHC.Float.timesDouble x1_a7W3 z_a7W5);
            1# -> GHC.Float.timesDouble x1_a7W3 z_a7W5
          };
        1# ->
          g1_s8fz
            (GHC.Float.timesDouble x1_a7W3 x1_a7W3)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7W4 lvl_s8fF)
            z_a7W5
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8fn [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8fn
  = \ (x_a7VO :: Double) (y_a7VP :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7VP lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7VP lvl_s8fp
          of {
            __DEFAULT ->
              g1_s8fz
                (GHC.Float.timesDouble x_a7VO x_a7VO)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7VP lvl_s8fH)
                x_a7VO;
            1# -> x_a7VO
          };
        1# ->
          f_s8fn
            (GHC.Float.timesDouble x_a7VO x_a7VO)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7VP lvl_s8fJ)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fL :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fL = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8et
  = \ (x0_a7VB :: Double) (y0_a7VC :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7VC lvl_s8fb
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7VC lvl_s8fd
          of {
            __DEFAULT -> f_s8fn x0_a7VB y0_a7VC;
            1# -> lvl_s8fL
          };
        1# -> lvl_s8fN
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8eL
  = \ (x_a7Vm :: Double) (n_a7Vn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7Vn lvl_s8fV
      of {
        __DEFAULT ->
          case $s^_s8et
                 x_a7Vm (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7Vn)
          of
          { ghc-prim-0.6.1:GHC.Types.D# y_a8hL ->
          case ghc-prim-0.6.1:GHC.Prim./## 1.0## y_a8hL of wild1_a8hN
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# wild1_a8hN
          }
          };
        1# -> $s^_s8et x_a7Vm n_a7Vn
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 xs_a829 ->
          case x_a828 of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fY = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case go_s8eP f_a1W7 of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80F, ipv1_X80H #) ->
      ((let {
          duration_s8dF :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8dF
            = case ipv1_X80H of { (ds1_a7XL, y_a7XM) ->
              case ipv1_a7XH of { (ds1_X80Y, y_X810) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX)
                            ww3_X809
                            ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fZ = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g0 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g1 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case f_a1W7 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80L, ipv1_X80N #) ->
      ((let {
          duration_s8dz :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8dz
            = case ipv1_X80N of { (ds1_a7XL, y_a7XM) ->
              case ipv1_a7XH of { (ds1_X814, y_X816) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8g1)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fZ
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g0)
                            ww3_X80f
                            ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g4 = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case f_a1W7 of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80N, ipv1_X80P #) ->
      ((let {
          duration_s8dv :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8dv
            = case ipv1_X80P of { (ds1_a7XL, y_a7XM) ->
              case ipv1_a7XH of { (ds1_X816, y_X818) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8g4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g3)
                            ww3_X80h
                            ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g7 = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80U, ipv1_X80W #) ->
      ((let {
          duration_s8ds :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8ds
            = case ipv1_X80W of { (ds1_a7XL, y_a7XM) ->
              case ipv1_a7XH of { (ds1_X81d, y_X81f) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8g7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g6)
                            ww3_X80o
                            ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8eL (ghc-prim-0.6.1:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81O
      of
      { (# ipv_a81R, ipv1_a81S #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81R
      of
      { (# ipv_X82j, ipv1_X82l #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X82j
      of
      { (# ipv_X82o, ipv1_X82q #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82o
      of
      { (# ipv_X82t, ipv1_X82v #) ->
      $smeasure_s8dw
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Simplifier ====================
2019-11-05 16:47:55.620861585 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-call-arity],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fV = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fB = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fF = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fH :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fH = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fp :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fp = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fJ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fd = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fb = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8eZ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8f1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8f1 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8eZ)
             lvl_s8f1
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8fz [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8fz
  = \ (x1_a7W3 :: Double) (y1_a7W4 :: Integer) (z_a7W5 :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7W4 lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7W4 lvl_s8fB
          of {
            __DEFAULT ->
              g1_s8fz
                (GHC.Float.timesDouble x1_a7W3 x1_a7W3)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7W4 lvl_s8fD)
                (GHC.Float.timesDouble x1_a7W3 z_a7W5);
            1# -> GHC.Float.timesDouble x1_a7W3 z_a7W5
          };
        1# ->
          g1_s8fz
            (GHC.Float.timesDouble x1_a7W3 x1_a7W3)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7W4 lvl_s8fF)
            z_a7W5
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8fn [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8fn
  = \ (x_a7VO :: Double) (y_a7VP :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7VP lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7VP lvl_s8fp
          of {
            __DEFAULT ->
              g1_s8fz
                (GHC.Float.timesDouble x_a7VO x_a7VO)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7VP lvl_s8fH)
                x_a7VO;
            1# -> x_a7VO
          };
        1# ->
          f_s8fn
            (GHC.Float.timesDouble x_a7VO x_a7VO)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7VP lvl_s8fJ)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fL :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fL = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8et
  = \ (x0_a7VB :: Double) (y0_a7VC :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7VC lvl_s8fb
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7VC lvl_s8fd
          of {
            __DEFAULT -> f_s8fn x0_a7VB y0_a7VC;
            1# -> lvl_s8fL
          };
        1# -> lvl_s8fN
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8eL
  = \ (x_a7Vm :: Double) (n_a7Vn :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7Vn lvl_s8fV
      of {
        __DEFAULT ->
          case $s^_s8et
                 x_a7Vm (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7Vn)
          of
          { ghc-prim-0.6.1:GHC.Types.D# y_a8hL ->
          case ghc-prim-0.6.1:GHC.Prim./## 1.0## y_a8hL of wild1_a8hN
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# wild1_a8hN
          }
          };
        1# -> $s^_s8et x_a7Vm n_a7Vn
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 xs_a829 ->
          case x_a828 of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fY = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case go_s8eP f_a1W7 of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80F, ipv1_X80H #) ->
      let {
        duration_s8dF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dF
          = case ipv1_X80H of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X80Y, y_X810) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX)
                            ww3_X809
                            ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fZ = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g0 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g1 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case f_a1W7 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80L, ipv1_X80N #) ->
      let {
        duration_s8dz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dz
          = case ipv1_X80N of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X814, y_X816) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8g1)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fZ
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g0)
                            ww3_X80f
                            ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g4 = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case f_a1W7 of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80N, ipv1_X80P #) ->
      let {
        duration_s8dv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dv
          = case ipv1_X80P of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X816, y_X818) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8g4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g3)
                            ww3_X80h
                            ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g7 = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80U, ipv1_X80W #) ->
      let {
        duration_s8ds :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ds
          = case ipv1_X80W of { (ds1_a7XL, y_a7XM) ->
            case ipv1_a7XH of { (ds1_X81d, y_X81f) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8g7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g6)
                            ww3_X80o
                            ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8eL (ghc-prim-0.6.1:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81O
      of
      { (# ipv_a81R, ipv1_a81S #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81R
      of
      { (# ipv_X82j, ipv1_X82l #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X82j
      of
      { (# ipv_X82o, ipv1_X82q #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82o
      of
      { (# ipv_X82t, ipv1_X82v #) ->
      $smeasure_s8dw
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Simplifier ====================
2019-11-05 16:47:55.696252489 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-worker-wrapper],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 536, types: 534, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fV = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fB = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fF = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fH :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fH = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fp :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fp = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fJ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fd = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fb = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8eZ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8f1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8f1 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8es [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8eZ)
                        lvl_s8f1
                 of wild_a8gP [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
                 }}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8eZ)
             lvl_s8f1
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8pg [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8pg
  = \ (ww_s8p7 :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8p3 :: Integer)
      (ww_s8pb :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8p3 lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8p3 lvl_s8fB
          of {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb);
            1# -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb
          };
        1# ->
          $wg1_s8pg
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fF)
            ww_s8pb
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8pq [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8pq
  = \ (ww_s8pl :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8pi :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8pi lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8pi lvl_s8fp
          of {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fH)
                ww_s8pl;
            1# -> ww_s8pl
          };
        1# ->
          $wf_s8pq
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fJ)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8pw [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8pw
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8ps lvl_s8fb
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8ps lvl_s8fd
          of {
            __DEFAULT ->
              case w_s8pr of { ghc-prim-0.6.1:GHC.Types.D# ww_s8pl ->
              $wf_s8pq ww_s8pl w_s8ps
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8fN of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8pr [Occ=Once] :: Double)
                 (w_s8ps [Occ=Once] :: Integer) ->
                 case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
                 }}]
$s^_s8et
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8pC [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8pC
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8py lvl_s8fV
      of {
        __DEFAULT ->
          case $w$s^_s8pw
                 w_s8px (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8py)
          of ww_s8pv
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Prim./## 1.0## ww_s8pv
          };
        1# -> $w$s^_s8pw w_s8px w_s8py
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8px [Occ=Once] :: Double)
                 (w_s8py [Occ=Once] :: Integer) ->
                 case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
                 }}]
$s^^_s8eL
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 [Dmd=<S,H>] xs_a829 [Dmd=<S,U>] ->
          case x_a828 of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X [Dmd=<L,A>] ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fY = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case go_s8eP f_a1W7 of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80F, ipv1_X80H [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dF
          = case ipv1_X80H of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X80Y [Dmd=<L,A>], y_X810 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX)
                            ww3_X809
                            ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fZ = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g0 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g1 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80L, ipv1_X80N [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dz
          = case ipv1_X80N of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X814 [Dmd=<L,A>], y_X816 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8g1)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fZ
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g0)
                            ww3_X80f
                            ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g4 = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80N, ipv1_X80P [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dv
          = case ipv1_X80P of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X816 [Dmd=<L,A>], y_X818 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8g4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g3)
                            ww3_X80h
                            ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8g5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8g6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8g7 = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80U, ipv1_X80W [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ds :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ds
          = case ipv1_X80W of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X81d [Dmd=<L,A>], y_X81f [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8g7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g6)
                            ww3_X80o
                            ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s802
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 20}]
testFractionalPower
  = case $w$s^^_s8pC (ghc-prim-0.6.1:GHC.Types.D# 5.0##) 441
    of ww_s8pB
    { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
    }

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81O
      of
      { (# ipv_a81R, ipv1_a81S [Dmd=<L,A>] #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81R
      of
      { (# ipv_X82j, ipv1_X82l [Dmd=<L,A>] #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X82j
      of
      { (# ipv_X82o, ipv1_X82q [Dmd=<L,A>] #) ->
      case $smeasure_s8dA
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82o
      of
      { (# ipv_X82t, ipv1_X82v [Dmd=<L,A>] #) ->
      $smeasure_s8dw
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82z
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82z
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8d9
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Levels added: ====================
2019-11-05 16:47:55.717712715 UTC

<lvl_s8fV,<0,0>>
<lvl_s8fV,<0,0>> = 0
<lvl_s8fN,<0,0>>
<lvl_s8fN,<0,0>>
  = GHC.Err.errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep
      @ GHC.Types.Double
      (GHC.CString.unpackCString#
         (let {
            <lvl_s8sF,F<0,0>>
            <lvl_s8sF,F<0,0>> = "Negative exponent"# } in
          lvl_s8sF))
<lvl_s8fD,<0,0>>
<lvl_s8fD,<0,0>> = 2
<lvl_s8fB,<0,0>>
<lvl_s8fB,<0,0>> = 1
<lvl_s8fF,<0,0>>
<lvl_s8fF,<0,0>> = 2
<lvl_s8fH,<0,0>>
<lvl_s8fH,<0,0>> = 2
<lvl_s8fp,<0,0>>
<lvl_s8fp,<0,0>> = 1
<lvl_s8fJ,<0,0>>
<lvl_s8fJ,<0,0>> = 2
<lvl_s8fd,<0,0>>
<lvl_s8fd,<0,0>> = 0
<lvl_s8fb,<0,0>>
<lvl_s8fb,<0,0>> = 0
<lvl_s8eZ,<0,0>>
<lvl_s8eZ,<0,0>> = 2
<lvl_s8f1,<0,0>>
<lvl_s8f1,<0,0>> = 0
<$seven_s8eG,<0,0>>
<$seven_s8eG,<0,0>>
  = \ <n_a8es,<1,0>> ->
      case GHC.Integer.Type.eqInteger#
             (GHC.Integer.Type.remInteger n_a8es lvl_s8eZ) lvl_s8f1
      of <wild_a8gP,<1,2>>
      { __DEFAULT ->
      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild_a8gP
      }
<$wg1_s8pg,<0,0>>
<$wg1_s8pg,<0,0>>
  = \ <ww_s8p7,<1,0>> <w_s8p3,<1,0>> <ww_s8pb,<1,0>> ->
      case GHC.Integer.Type.eqInteger#
             (GHC.Integer.Type.remInteger w_s8p3 lvl_s8eZ) lvl_s8f1
      of <wild_a8gP,<1,2>> {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8p3 lvl_s8fB
          of <wild_X8jl,<1,3>> {
            __DEFAULT ->
              $wg1_s8pg
                (GHC.Prim.*## ww_s8p7 ww_s8p7)
                (GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
                (GHC.Prim.*## ww_s8p7 ww_s8pb);
            1# -> GHC.Prim.*## ww_s8p7 ww_s8pb
          };
        1# ->
          $wg1_s8pg
            (GHC.Prim.*## ww_s8p7 ww_s8p7)
            (GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fF)
            ww_s8pb
      };
<$wf_s8pq,<0,0>>
<$wf_s8pq,<0,0>>
  = \ <ww_s8pl,<1,0>> <w_s8pi,<1,0>> ->
      case GHC.Integer.Type.eqInteger#
             (GHC.Integer.Type.remInteger w_s8pi lvl_s8eZ) lvl_s8f1
      of <wild_a8gP,<1,2>> {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8pi lvl_s8fp
          of <wild_X8jl,<1,3>> {
            __DEFAULT ->
              $wg1_s8pg
                (GHC.Prim.*## ww_s8pl ww_s8pl)
                (GHC.Integer.Type.quotInteger w_s8pi lvl_s8fH)
                ww_s8pl;
            1# -> ww_s8pl
          };
        1# ->
          $wf_s8pq
            (GHC.Prim.*## ww_s8pl ww_s8pl)
            (GHC.Integer.Type.quotInteger w_s8pi lvl_s8fJ)
      };
<$w$s^_s8pw,<0,0>>
<$w$s^_s8pw,<0,0>>
  = \ <w_s8pr,<1,0>> <w_s8ps,<1,0>> ->
      case GHC.Integer.Type.ltInteger# w_s8ps lvl_s8fb
      of <wild_a8hw,<1,2>> {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8ps lvl_s8fd
          of <wild_a8gP,<1,3>> {
            __DEFAULT ->
              case w_s8pr of <ww_s8pk,<1,4>> { GHC.Types.D# <ww_s8pl,<1,4>> ->
              $wf_s8pq ww_s8pl w_s8ps
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8fN of <wild_00,<1,3>> { }
      }
<$s^_s8et,<0,0>>
<$s^_s8et,<0,0>>
  = \ <w_s8pr,<1,0>> <w_s8ps,<1,0>> ->
      case $w$s^_s8pw w_s8pr w_s8ps of <ww_s8pv,<1,2>> { __DEFAULT ->
      GHC.Types.D# ww_s8pv
      }
<$w$s^^_s8pC,<0,0>>
<$w$s^^_s8pC,<0,0>>
  = \ <w_s8px,<1,0>> <w_s8py,<1,0>> ->
      case GHC.Integer.Type.geInteger# w_s8py lvl_s8fV
      of <wild_a8hF,<1,2>> {
        __DEFAULT ->
          case $w$s^_s8pw w_s8px (GHC.Integer.Type.negateInteger w_s8py)
          of <ww_s8pv,<1,3>>
          { __DEFAULT ->
          GHC.Prim./## 1.0## ww_s8pv
          };
        1# -> $w$s^_s8pw w_s8px w_s8py
      }
<$s^^_s8eL,<0,0>>
<$s^^_s8eL,<0,0>>
  = \ <w_s8px,<1,0>> <w_s8py,<1,0>> ->
      case $w$s^^_s8pC w_s8px w_s8py of <ww_s8pB,<1,2>> { __DEFAULT ->
      GHC.Types.D# ww_s8pB
      }
<go_s8eP,<0,0>>
<go_s8eP,<0,0>>
  = \ <ds_a824,<1,0>> ->
      case ds_a824 of <wild_a825,<1,2>> {
        [] -> GHC.Tuple.();
        : <x_a828,<1,2>> <xs_a829,<1,2>> ->
          case x_a828 of <ds1_a81V,<1,3>> { GHC.Types.C# <ipv_a81X,<1,3>> ->
          go_s8eP xs_a829
          }
      };
<$trModule_s7WW,<0,0>>
<$trModule_s7WW,<0,0>> = "main"#
<$trModule_s7WX,<0,0>>
<$trModule_s7WX,<0,0>> = GHC.Types.TrNameS $trModule_s7WW
<$trModule_s7WY,<0,0>>
<$trModule_s7WY,<0,0>> = "Main"#
<$trModule_s7WZ,<0,0>>
<$trModule_s7WZ,<0,0>> = GHC.Types.TrNameS $trModule_s7WY
<Main.$trModule,<0,0>>
<Main.$trModule,<0,0>>
  = GHC.Types.Module $trModule_s7WX $trModule_s7WZ
<lvl_s8fW,<0,0>>
<lvl_s8fW,<0,0>> = " milli seconds -- "#
<lvl_s8fX,<0,0>>
<lvl_s8fX,<0,0>> = " pico seconds"#
<lvl_s8fY,<0,0>>
<lvl_s8fY,<0,0>> = 1000000000
<$smeasure_s8eM,<0,0>>
<$smeasure_s8eM,<0,0>>
  = \ <description_a1W6,<1,0>> <f_a1W7,<1,0>> <s_a7Xu,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Xu
      of <ds_a7XE,<1,2>>
      { (# <ipv_a7XG,<1,2>>, <ipv1_a7XH,<1,2>> #) ->
      case go_s8eP f_a1W7 of <wild_a7Us,<1,3>> { () ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7XG
      of <ds_X80B,<1,4>>
      { (# <ipv_X80F,<1,4>>, <ipv1_X80H,<1,4>> #) ->
      let {
        <duration_s8dF,<1,5>>
        <duration_s8dF,<1,5>>
          = case ipv1_X80H of <wild_a7XJ,<1,7>>
            { (<ds1_a7XL,<1,7>>, <y_a7XM,<1,7>>) ->
            case ipv1_a7XH of <wild_X80U,<1,8>>
            { (<ds1_X80Y,<1,8>>, <y_X810,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7XM y_X810
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8dF lvl_s8fY)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Yr,<1,8>>
                    { (# <ww3_a7Yt,<1,8>>, <ww4_a7Yu,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X805,<1,9>>
                          { (# <ww3_X809,<1,9>>, <ww4_X80b,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8sG,F<0,0>>
                               <lvl_s8sG,F<0,0>> = GHC.CString.unpackCString# lvl_s8fX } in
                             lvl_s8sG)
                            ww3_X809
                            ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X80F
      }
      }
      }
<lvl_s8fZ,<0,0>>
<lvl_s8fZ,<0,0>> = " milli seconds -- "#
<lvl_s8g0,<0,0>>
<lvl_s8g0,<0,0>> = " pico seconds"#
<lvl_s8g1,<0,0>>
<lvl_s8g1,<0,0>> = 1000000000
<$smeasure_s8dA,<0,0>>
<$smeasure_s8dA,<0,0>>
  = \ <description_a1W6,<1,0>> <f_a1W7,<1,0>> <s_a7Xu,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Xu
      of <ds_a7XE,<1,2>>
      { (# <ipv_a7XG,<1,2>>, <ipv1_a7XH,<1,2>> #) ->
      case f_a1W7 of <ds1_a82k,<1,3>> { GHC.Types.D# <ipv_a82m,<1,3>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7XG
      of <ds_X80H,<1,4>>
      { (# <ipv_X80L,<1,4>>, <ipv1_X80N,<1,4>> #) ->
      let {
        <duration_s8dz,<1,5>>
        <duration_s8dz,<1,5>>
          = case ipv1_X80N of <wild_a7XJ,<1,7>>
            { (<ds1_a7XL,<1,7>>, <y_a7XM,<1,7>>) ->
            case ipv1_a7XH of <wild_X810,<1,8>>
            { (<ds1_X814,<1,8>>, <y_X816,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7XM y_X816
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8dz lvl_s8g1)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Yr,<1,8>>
                    { (# <ww3_a7Yt,<1,8>>, <ww4_a7Yu,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8fZ
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X80b,<1,9>>
                          { (# <ww3_X80f,<1,9>>, <ww4_X80h,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8sH,F<0,0>>
                               <lvl_s8sH,F<0,0>> = GHC.CString.unpackCString# lvl_s8g0 } in
                             lvl_s8sH)
                            ww3_X80f
                            ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X80L
      }
      }
      }
<lvl_s8g2,<0,0>>
<lvl_s8g2,<0,0>> = " milli seconds -- "#
<lvl_s8g3,<0,0>>
<lvl_s8g3,<0,0>> = " pico seconds"#
<lvl_s8g4,<0,0>>
<lvl_s8g4,<0,0>> = 1000000000
<$smeasure_s8dw,<0,0>>
<$smeasure_s8dw,<0,0>>
  = \ <description_a1W6,<1,0>> <f_a1W7,<1,0>> <s_a7Xu,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Xu
      of <ds_a7XE,<1,2>>
      { (# <ipv_a7XG,<1,2>>, <ipv1_a7XH,<1,2>> #) ->
      case f_a1W7 of <ds1_a82v,<1,3>> { __DEFAULT ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7XG
      of <ds_X80J,<1,4>>
      { (# <ipv_X80N,<1,4>>, <ipv1_X80P,<1,4>> #) ->
      let {
        <duration_s8dv,<1,5>>
        <duration_s8dv,<1,5>>
          = case ipv1_X80P of <wild_a7XJ,<1,7>>
            { (<ds1_a7XL,<1,7>>, <y_a7XM,<1,7>>) ->
            case ipv1_a7XH of <wild_X812,<1,8>>
            { (<ds1_X816,<1,8>>, <y_X818,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7XM y_X818
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8dv lvl_s8g4)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Yr,<1,8>>
                    { (# <ww3_a7Yt,<1,8>>, <ww4_a7Yu,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8g2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X80d,<1,9>>
                          { (# <ww3_X80h,<1,9>>, <ww4_X80j,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8sI,F<0,0>>
                               <lvl_s8sI,F<0,0>> = GHC.CString.unpackCString# lvl_s8g3 } in
                             lvl_s8sI)
                            ww3_X80h
                            ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X80N
      }
      }
      }
<lvl_s8g5,<0,0>>
<lvl_s8g5,<0,0>> = " milli seconds -- "#
<lvl_s8g6,<0,0>>
<lvl_s8g6,<0,0>> = " pico seconds"#
<lvl_s8g7,<0,0>>
<lvl_s8g7,<0,0>> = 1000000000
<measure_s802,<0,0>>
<measure_s802,<0,0>>
  = \ <a_a5HY,<1,0>>
      <$dNFData_a5I0,<1,0>>
      <description_a1W6,<1,0>>
      <f_a1W7,<1,0>>
      <s_a7Xu,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Xu
      of <ds_a7XE,<1,2>>
      { (# <ipv_a7XG,<1,2>>, <ipv1_a7XH,<1,2>> #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: Control.DeepSeq.NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of <wild_a7Us,<1,3>>
      { () ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7XG
      of <ds_X80Q,<1,4>>
      { (# <ipv_X80U,<1,4>>, <ipv1_X80W,<1,4>> #) ->
      let {
        <duration_s8ds,<1,5>>
        <duration_s8ds,<1,5>>
          = case ipv1_X80W of <wild_a7XJ,<1,7>>
            { (<ds1_a7XL,<1,7>>, <y_a7XM,<1,7>>) ->
            case ipv1_a7XH of <wild_X819,<1,8>>
            { (<ds1_X81d,<1,8>>, <y_X81f,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7XM y_X81f
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8ds lvl_s8g7)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Yr,<1,8>>
                    { (# <ww3_a7Yt,<1,8>>, <ww4_a7Yu,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8g5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X80k,<1,9>>
                          { (# <ww3_X80o,<1,9>>, <ww4_X80q,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8sJ,F<0,0>>
                               <lvl_s8sJ,F<0,0>> = GHC.CString.unpackCString# lvl_s8g6 } in
                             lvl_s8sJ)
                            ww3_X80o
                            ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X80U
      }
      }
      }
<Main.measure,<0,0>>
<Main.measure,<0,0>>
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <Control.DeepSeq.NFData a>_R
            ->_R <GHC.Base.String>_R
            ->_R <a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Control.DeepSeq.NFData a
                -> GHC.Base.String
                -> a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# (forall a.
                    Control.DeepSeq.NFData a
                    -> GHC.Base.String -> a -> GHC.Types.IO ()))
<Main.testStimes,<0,0>>
<Main.testStimes,<0,0>>
  = GHC.Magic.noinline
      @ (forall b a. GHC.Real.Integral b => b -> [a] -> [a])
      Data.Semigroup.Internal.stimesList
      @ GHC.Integer.Type.Integer
      @ GHC.Types.Char
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8sK,F<0,0>>
         <lvl_s8sK,F<0,0>> = 1000000 } in
       lvl_s8sK)
      (let {
         <lvl_s8sM,F<0,0>>
         <lvl_s8sM,F<0,0>>
           = GHC.CString.unpackCString#
               (let {
                  <lvl_s8sL,F<0,0>>
                  <lvl_s8sL,F<0,0>> = "foo"# } in
                lvl_s8sL) } in
       lvl_s8sM)
<Main.testIntegralPower,<0,0>>
<Main.testIntegralPower,<0,0>>
  = GHC.Real.^_$s^
      (let {
         <lvl_s8sN,F<0,0>>
         <lvl_s8sN,F<0,0>> = 3 } in
       lvl_s8sN)
      (let {
         <lvl_s8sO,F<0,0>>
         <lvl_s8sO,F<0,0>> = 1000000 } in
       lvl_s8sO)
<Main.testFractionalPower,<0,0>>
<Main.testFractionalPower,<0,0>>
  = case $w$s^^_s8pC
           (let {
              <lvl_s8sP,F<0,0>>
              <lvl_s8sP,F<0,0>> = GHC.Types.D# 5.0## } in
            lvl_s8sP)
           (let {
              <lvl_s8sQ,F<0,0>>
              <lvl_s8sQ,F<0,0>> = 441 } in
            lvl_s8sQ)
    of <ww_s8pB,<0,3>>
    { __DEFAULT ->
    GHC.Types.D# ww_s8pB
    }
<main_s82z,<0,0>>
<main_s82z,<0,0>>
  = \ <s_a81O,<0,1>> ->
      case $smeasure_s8eM
             (let {
                <lvl_s8sS,F<0,0>>
                <lvl_s8sS,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8sR,F<0,0>>
                         <lvl_s8sR,F<0,0>> = "stimes : "# } in
                       lvl_s8sR) } in
              lvl_s8sS)
             Main.testStimes
             s_a81O
      of <ds1_a81P,<0,3>>
      { (# <ipv_a81R,<0,3>>, <ipv1_a81S,<0,3>> #) ->
      case $smeasure_s8dA
             (let {
                <lvl_s8sU,F<0,0>>
                <lvl_s8sU,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8sT,F<0,0>>
                         <lvl_s8sT,F<0,0>> = "fractional power 1 : "# } in
                       lvl_s8sT) } in
              lvl_s8sU)
             Main.testFractionalPower
             ipv_a81R
      of <ds1_X82f,<0,4>>
      { (# <ipv_X82j,<0,4>>, <ipv1_X82l,<0,4>> #) ->
      case $smeasure_s8dA
             (let {
                <lvl_s8sW,F<0,0>>
                <lvl_s8sW,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8sV,F<0,0>>
                         <lvl_s8sV,F<0,0>> = "fractional power 2 : "# } in
                       lvl_s8sV) } in
              lvl_s8sW)
             Main.testFractionalPower
             ipv_X82j
      of <ds1_X82k,<0,5>>
      { (# <ipv_X82o,<0,5>>, <ipv1_X82q,<0,5>> #) ->
      case $smeasure_s8dA
             (let {
                <lvl_s8sY,F<0,0>>
                <lvl_s8sY,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8sX,F<0,0>>
                         <lvl_s8sX,F<0,0>> = "fractional power 3 : "# } in
                       lvl_s8sX) } in
              lvl_s8sY)
             Main.testFractionalPower
             ipv_X82o
      of <ds1_X82p,<0,6>>
      { (# <ipv_X82t,<0,6>>, <ipv1_X82v,<0,6>> #) ->
      $smeasure_s8dw
        (let {
           <lvl_s8t0,F<0,0>>
           <lvl_s8t0,F<0,0>>
             = GHC.CString.unpackCString#
                 (let {
                    <lvl_s8sZ,F<0,0>>
                    <lvl_s8sZ,F<0,0>> = "integral power : "# } in
                  lvl_s8sZ) } in
         lvl_s8t0)
        Main.testIntegralPower
        ipv_X82t
      }
      }
      }
      }
<Main.main,<0,0>>
<Main.main,<0,0>>
  = main_s82z
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())
<main_s8d9,<0,0>>
<main_s8d9,<0,0>>
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# GHC.Types.IO ()))
<:Main.main,<0,0>>
<:Main.main,<0,0>>
  = main_s8d9
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())


==================== Float out(FOS {Lam = Just 0, Consts = True, OverSatApps = True}) ====================
2019-11-05 16:47:55.726383228 UTC

Result size of Float out(FOS {Lam = Just 0,
                              Consts = True,
                              OverSatApps = True})
  = {terms: 580, types: 566, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId]
lvl_s8fV = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sF :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sF = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId, Str=b]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sF)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId]
lvl_s8fB = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fF :: Integer
[LclId]
lvl_s8fF = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fH :: Integer
[LclId]
lvl_s8fH = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fp :: Integer
[LclId]
lvl_s8fp = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Integer
[LclId]
lvl_s8fJ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fd :: Integer
[LclId]
lvl_s8fd = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fb :: Integer
[LclId]
lvl_s8fb = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eZ :: Integer
[LclId]
lvl_s8eZ = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8f1 :: Integer
[LclId]
lvl_s8f1 = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8es [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8eZ)
                        lvl_s8f1
                 of wild_a8gP [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
                 }}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8eZ)
             lvl_s8f1
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8pg [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><S,U><L,U>]
$wg1_s8pg
  = \ (ww_s8p7 :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8p3 :: Integer)
      (ww_s8pb :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8p3 lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8p3 lvl_s8fB
          of {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb);
            1# -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb
          };
        1# ->
          $wg1_s8pg
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fF)
            ww_s8pb
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8pq [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8pq
  = \ (ww_s8pl :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8pi :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8pi lvl_s8eZ)
             lvl_s8f1
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8pi lvl_s8fp
          of {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fH)
                ww_s8pl;
            1# -> ww_s8pl
          };
        1# ->
          $wf_s8pq
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fJ)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8pw [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8pw
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8ps lvl_s8fb
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8ps lvl_s8fd
          of {
            __DEFAULT ->
              case w_s8pr of { ghc-prim-0.6.1:GHC.Types.D# ww_s8pl ->
              $wf_s8pq ww_s8pl w_s8ps
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8fN of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8pr [Occ=Once] :: Double)
                 (w_s8ps [Occ=Once] :: Integer) ->
                 case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
                 }}]
$s^_s8et
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8pC [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8pC
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8py lvl_s8fV
      of {
        __DEFAULT ->
          case $w$s^_s8pw
                 w_s8px (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8py)
          of ww_s8pv
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Prim./## 1.0## ww_s8pv
          };
        1# -> $w$s^_s8pw w_s8px w_s8py
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8px [Occ=Once] :: Double)
                 (w_s8py [Occ=Once] :: Integer) ->
                 case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
                 }}]
$s^^_s8eL
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 [Dmd=<S,H>] xs_a829 [Dmd=<S,U>] ->
          case x_a828 of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X [Dmd=<L,A>] ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId]
lvl_s8fY = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sG :: [Char]
[LclId]
lvl_s8sG = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case go_s8eP f_a1W7 of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80F, ipv1_X80H [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dF :: Integer
        [LclId]
        duration_s8dF
          = case ipv1_X80H of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X80Y [Dmd=<L,A>], y_X810 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X809 ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fZ = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g0 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 :: Integer
[LclId]
lvl_s8g1 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sH :: [Char]
[LclId]
lvl_s8sH = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g0

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80L, ipv1_X80N [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dz :: Integer
        [LclId]
        duration_s8dz
          = case ipv1_X80N of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X814 [Dmd=<L,A>], y_X816 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8g1)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fZ
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sH ww3_X80f ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 :: Integer
[LclId]
lvl_s8g4 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sI :: [Char]
[LclId]
lvl_s8sI = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g3

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80N, ipv1_X80P [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dv :: Integer
        [LclId]
        duration_s8dv
          = case ipv1_X80P of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X816 [Dmd=<L,A>], y_X818 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8g4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sI ww3_X80h ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g7 :: Integer
[LclId]
lvl_s8g7 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sJ :: [Char]
[LclId]
lvl_s8sJ = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g6

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80U, ipv1_X80W [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ds :: Integer
        [LclId]
        duration_s8ds
          = case ipv1_X80W of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X81d [Dmd=<L,A>], y_X81f [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8g7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8g5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sJ ww3_X80o ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s802
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sK :: Integer
[LclId]
lvl_s8sK = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sL :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sL = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sM :: [Char]
[LclId]
lvl_s8sM = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sL

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8sK
      lvl_s8sM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sN :: Integer
[LclId]
lvl_s8sN = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sO :: Integer
[LclId]
lvl_s8sO = 1000000

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8sN lvl_s8sO

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sP :: Double
[LclId]
lvl_s8sP = ghc-prim-0.6.1:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sQ :: Integer
[LclId]
lvl_s8sQ = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8pC lvl_s8sP lvl_s8sQ of ww_s8pB { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sZ = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8t0 :: [Char]
[LclId]
lvl_s8t0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sX = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sY :: [Char]
[LclId]
lvl_s8sY = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sV :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sV = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sW :: [Char]
[LclId]
lvl_s8sW = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sT :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sT = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sU :: [Char]
[LclId]
lvl_s8sU = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sT

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sR :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sR = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sS :: [Char]
[LclId]
lvl_s8sS = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sR

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM lvl_s8sS testStimes s_a81O of
      { (# ipv_a81R, ipv1_a81S [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sU testFractionalPower ipv_a81R of
      { (# ipv_X82j, ipv1_X82l [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sW testFractionalPower ipv_X82j of
      { (# ipv_X82o, ipv1_X82q [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sY testFractionalPower ipv_X82o of
      { (# ipv_X82t, ipv1_X82v [Dmd=<L,A>] #) ->
      $smeasure_s8dw lvl_s8t0 testIntegralPower ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82z
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82z
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8d9
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Float inwards ====================
2019-11-05 16:47:55.749274791 UTC

Result size of Float inwards
  = {terms: 577, types: 566, coercions: 77, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId]
lvl_s8fV = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sF :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sF = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId, Str=b]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sF)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId]
lvl_s8fB = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fF [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fF = lvl_s8fD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fH [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fH = lvl_s8fD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fp [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fp = lvl_s8fB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fJ = lvl_s8fD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fd [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fd = lvl_s8fV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fb [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fb = lvl_s8fV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eZ [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8eZ = lvl_s8fD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8f1 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8f1 = lvl_s8fV

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8es [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8fD)
                        lvl_s8fV
                 of wild_a8gP [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
                 }}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8fD)
             lvl_s8fV
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8pg [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><S,U><L,U>]
$wg1_s8pg
  = \ (ww_s8p7 :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8p3 :: Integer)
      (ww_s8pb :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8p3 lvl_s8fD)
             lvl_s8fV
      of wild_a8gP {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8p3 lvl_s8fB
          of wild_X8jl {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb);
            1# -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb
          };
        1# ->
          $wg1_s8pg
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
            ww_s8pb
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8pq [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8pq
  = \ (ww_s8pl :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8pi :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8pi lvl_s8fD)
             lvl_s8fV
      of wild_a8gP {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8pi lvl_s8fB
          of wild_X8jl {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fD)
                ww_s8pl;
            1# -> ww_s8pl
          };
        1# ->
          $wf_s8pq
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fD)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8pw [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8pw
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8ps lvl_s8fV
      of wild_a8hw {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8ps lvl_s8fV
          of wild_a8gP {
            __DEFAULT ->
              case w_s8pr of ww_s8pk { ghc-prim-0.6.1:GHC.Types.D# ww_s8pl ->
              $wf_s8pq ww_s8pl w_s8ps
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8fN of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8pr [Occ=Once] :: Double)
                 (w_s8ps [Occ=Once] :: Integer) ->
                 case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
                 }}]
$s^_s8et
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8pC [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8pC
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8py lvl_s8fV
      of wild_a8hF {
        __DEFAULT ->
          case $w$s^_s8pw
                 w_s8px (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8py)
          of ww_s8pv
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Prim./## 1.0## ww_s8pv
          };
        1# -> $w$s^_s8pw w_s8px w_s8py
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8px [Occ=Once] :: Double)
                 (w_s8py [Occ=Once] :: Integer) ->
                 case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
                 }}]
$s^^_s8eL
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of wild_a825 [Dmd=<L,A>] {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 [Dmd=<S,H>] xs_a829 [Dmd=<S,U>] ->
          case x_a828 of ds1_a81V [Dmd=<L,A>]
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X [Dmd=<L,A>] ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId]
lvl_s8fY = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sG :: [Char]
[LclId]
lvl_s8sG = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of ds_a7XE
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case go_s8eP f_a1W7 of wild_a7Us { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of ds_X80B
      { (# ipv_X80F, ipv1_X80H [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dF :: Integer
          [LclId]
          duration_s8dF
            = case ipv1_X80H of wild_a7XJ [Dmd=<L,A>]
              { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
              case ipv1_a7XH of wild_X80U [Dmd=<L,A>]
              { (ds1_X80Y [Dmd=<L,A>], y_X810 [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7Yr
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X805
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X809 ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fZ = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g0 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8g1 = lvl_s8fY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sH [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8sH = lvl_s8sG

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of ds_a7XE
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of ds1_a82k [Dmd=<L,A>]
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of ds_X80H
      { (# ipv_X80L, ipv1_X80N [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dz :: Integer
          [LclId]
          duration_s8dz
            = case ipv1_X80N of wild_a7XJ [Dmd=<L,A>]
              { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
              case ipv1_a7XH of wild_X810 [Dmd=<L,A>]
              { (ds1_X814 [Dmd=<L,A>], y_X816 [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7Yr
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80b
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80f ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8g4 = lvl_s8fY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sI [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8sI = lvl_s8sG

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of ds_a7XE
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of ds1_a82v [Dmd=<L,A>] { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of ds_X80J
      { (# ipv_X80N, ipv1_X80P [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dv :: Integer
          [LclId]
          duration_s8dv
            = case ipv1_X80P of wild_a7XJ [Dmd=<L,A>]
              { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
              case ipv1_a7XH of wild_X812 [Dmd=<L,A>]
              { (ds1_X816 [Dmd=<L,A>], y_X818 [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7Yr
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80d
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80h ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g7 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8g7 = lvl_s8fY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sJ [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8sJ = lvl_s8sG

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of ds_a7XE
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of wild_a7Us
      { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of ds_X80Q
      { (# ipv_X80U, ipv1_X80W [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8ds :: Integer
          [LclId]
          duration_s8ds
            = case ipv1_X80W of wild_a7XJ [Dmd=<L,A>]
              { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
              case ipv1_a7XH of wild_X819 [Dmd=<L,A>]
              { (ds1_X81d [Dmd=<L,A>], y_X81f [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7Yr
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80k
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80o ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s802
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sK :: Integer
[LclId]
lvl_s8sK = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sL :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sL = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sM :: [Char]
[LclId]
lvl_s8sM = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sL

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8sK
      lvl_s8sM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sN :: Integer
[LclId]
lvl_s8sN = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sO [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8sO = lvl_s8sK

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8sN lvl_s8sK

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sP :: Double
[LclId]
lvl_s8sP = ghc-prim-0.6.1:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sQ :: Integer
[LclId]
lvl_s8sQ = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8pC lvl_s8sP lvl_s8sQ of ww_s8pB { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sZ = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8t0 :: [Char]
[LclId]
lvl_s8t0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sX = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sY :: [Char]
[LclId]
lvl_s8sY = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sV :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sV = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sW :: [Char]
[LclId]
lvl_s8sW = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sT :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sT = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sU :: [Char]
[LclId]
lvl_s8sU = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sT

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sR :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sR = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sS :: [Char]
[LclId]
lvl_s8sS = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sR

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM lvl_s8sS testStimes s_a81O of ds1_a81P
      { (# ipv_a81R, ipv1_a81S [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sU testFractionalPower ipv_a81R
      of ds1_X82f
      { (# ipv_X82j, ipv1_X82l [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sW testFractionalPower ipv_X82j
      of ds1_X82k
      { (# ipv_X82o, ipv1_X82q [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sY testFractionalPower ipv_X82o
      of ds1_X82p
      { (# ipv_X82t, ipv1_X82v [Dmd=<L,A>] #) ->
      $smeasure_s8dw lvl_s8t0 testIntegralPower ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82z
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82z
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8d9 = GHC.TopHandler.runMainIO1 @ () main

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8d9
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Liberate case ====================
2019-11-05 16:47:55.759747826 UTC

Result size of Liberate case
  = {terms: 577, types: 566, coercions: 77, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId]
lvl_s8fV = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sF :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sF = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId, Str=b]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sF)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId]
lvl_s8fB = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fF [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fF = lvl_s8fD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fH [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fH = lvl_s8fD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fp [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fp = lvl_s8fB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fJ = lvl_s8fD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fd [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fd = lvl_s8fV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fb [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8fb = lvl_s8fV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8eZ [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8eZ = lvl_s8fD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8f1 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8f1 = lvl_s8fV

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8es [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8fD)
                        lvl_s8fV
                 of wild_a8gP [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
                 }}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8fD)
             lvl_s8fV
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8pg [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><S,U><L,U>]
$wg1_s8pg
  = \ (ww_s8p7 :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8p3 :: Integer)
      (ww_s8pb :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8p3 lvl_s8fD)
             lvl_s8fV
      of wild_a8gP {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8p3 lvl_s8fB
          of wild_X8jl {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb);
            1# -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb
          };
        1# ->
          $wg1_s8pg
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
            ww_s8pb
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8pq [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8pq
  = \ (ww_s8pl :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8pi :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8pi lvl_s8fD)
             lvl_s8fV
      of wild_a8gP {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8pi lvl_s8fB
          of wild_X8jl {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fD)
                ww_s8pl;
            1# -> ww_s8pl
          };
        1# ->
          $wf_s8pq
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fD)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8pw [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8pw
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8ps lvl_s8fV
      of wild_a8hw {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8ps lvl_s8fV
          of wild_a8gP {
            __DEFAULT ->
              case w_s8pr of ww_s8pk { ghc-prim-0.6.1:GHC.Types.D# ww_s8pl ->
              $wf_s8pq ww_s8pl w_s8ps
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8fN of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8pr [Occ=Once] :: Double)
                 (w_s8ps [Occ=Once] :: Integer) ->
                 case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
                 }}]
$s^_s8et
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8pC [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8pC
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8py lvl_s8fV
      of wild_a8hF {
        __DEFAULT ->
          case $w$s^_s8pw
                 w_s8px (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8py)
          of ww_s8pv
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Prim./## 1.0## ww_s8pv
          };
        1# -> $w$s^_s8pw w_s8px w_s8py
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8px [Occ=Once] :: Double)
                 (w_s8py [Occ=Once] :: Integer) ->
                 case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
                 }}]
$s^^_s8eL
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of wild_a825 [Dmd=<L,A>] {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 [Dmd=<S,H>] xs_a829 [Dmd=<S,U>] ->
          case x_a828 of ds1_a81V [Dmd=<L,A>]
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X [Dmd=<L,A>] ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId]
lvl_s8fY = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sG :: [Char]
[LclId]
lvl_s8sG = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of ds_a7XE
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case go_s8eP f_a1W7 of wild_a7Us { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of ds_X80B
      { (# ipv_X80F, ipv1_X80H [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dF :: Integer
          [LclId]
          duration_s8dF
            = case ipv1_X80H of wild_a7XJ [Dmd=<L,A>]
              { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
              case ipv1_a7XH of wild_X80U [Dmd=<L,A>]
              { (ds1_X80Y [Dmd=<L,A>], y_X810 [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7Yr
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X805
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X809 ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fZ = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g0 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8g1 = lvl_s8fY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sH [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8sH = lvl_s8sG

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of ds_a7XE
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of ds1_a82k [Dmd=<L,A>]
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of ds_X80H
      { (# ipv_X80L, ipv1_X80N [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dz :: Integer
          [LclId]
          duration_s8dz
            = case ipv1_X80N of wild_a7XJ [Dmd=<L,A>]
              { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
              case ipv1_a7XH of wild_X810 [Dmd=<L,A>]
              { (ds1_X814 [Dmd=<L,A>], y_X816 [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7Yr
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80b
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80f ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8g4 = lvl_s8fY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sI [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8sI = lvl_s8sG

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of ds_a7XE
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of ds1_a82v [Dmd=<L,A>] { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of ds_X80J
      { (# ipv_X80N, ipv1_X80P [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dv :: Integer
          [LclId]
          duration_s8dv
            = case ipv1_X80P of wild_a7XJ [Dmd=<L,A>]
              { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
              case ipv1_a7XH of wild_X812 [Dmd=<L,A>]
              { (ds1_X816 [Dmd=<L,A>], y_X818 [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7Yr
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80d
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80h ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g7 [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8g7 = lvl_s8fY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sJ [InlPrag=NOUSERINLINE[2]] :: [Char]
[LclId]
lvl_s8sJ = lvl_s8sG

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of ds_a7XE
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of wild_a7Us
      { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of ds_X80Q
      { (# ipv_X80U, ipv1_X80W [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8ds :: Integer
          [LclId]
          duration_s8ds
            = case ipv1_X80W of wild_a7XJ [Dmd=<L,A>]
              { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
              case ipv1_a7XH of wild_X819 [Dmd=<L,A>]
              { (ds1_X81d [Dmd=<L,A>], y_X81f [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7Yr
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80k
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80o ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s802
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sK :: Integer
[LclId]
lvl_s8sK = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sL :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sL = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sM :: [Char]
[LclId]
lvl_s8sM = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sL

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8sK
      lvl_s8sM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sN :: Integer
[LclId]
lvl_s8sN = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sO [InlPrag=NOUSERINLINE[2]] :: Integer
[LclId]
lvl_s8sO = lvl_s8sK

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8sN lvl_s8sK

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sP :: Double
[LclId]
lvl_s8sP = ghc-prim-0.6.1:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sQ :: Integer
[LclId]
lvl_s8sQ = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8pC lvl_s8sP lvl_s8sQ of ww_s8pB { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sZ = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8t0 :: [Char]
[LclId]
lvl_s8t0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sX = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sY :: [Char]
[LclId]
lvl_s8sY = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sV :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sV = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sW :: [Char]
[LclId]
lvl_s8sW = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sT :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sT = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sU :: [Char]
[LclId]
lvl_s8sU = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sT

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sR :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sR = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sS :: [Char]
[LclId]
lvl_s8sS = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sR

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM lvl_s8sS testStimes s_a81O of ds1_a81P
      { (# ipv_a81R, ipv1_a81S [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sU testFractionalPower ipv_a81R
      of ds1_X82f
      { (# ipv_X82j, ipv1_X82l [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sW testFractionalPower ipv_X82j
      of ds1_X82k
      { (# ipv_X82o, ipv1_X82q [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sY testFractionalPower ipv_X82o
      of ds1_X82p
      { (# ipv_X82t, ipv1_X82v [Dmd=<L,A>] #) ->
      $smeasure_s8dw lvl_s8t0 testIntegralPower ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82z
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82z
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8d9 = GHC.TopHandler.runMainIO1 @ () main

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8d9
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Simplifier ====================
2019-11-05 16:47:55.794748481 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-liberate-case],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 535, types: 542, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fV = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sF :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8sF = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sF)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fB = 1

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8es [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8fD)
                        lvl_s8fV
                 of wild_a8gP [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
                 }}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8fD)
             lvl_s8fV
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8pg [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8pg
  = \ (ww_s8p7 :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8p3 :: Integer)
      (ww_s8pb :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8p3 lvl_s8fD)
             lvl_s8fV
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8p3 lvl_s8fB
          of {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb);
            1# -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb
          };
        1# ->
          $wg1_s8pg
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
            ww_s8pb
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8pq [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8pq
  = \ (ww_s8pl :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8pi :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8pi lvl_s8fD)
             lvl_s8fV
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8pi lvl_s8fB
          of {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fD)
                ww_s8pl;
            1# -> ww_s8pl
          };
        1# ->
          $wf_s8pq
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fD)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8pw [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8pw
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8ps lvl_s8fV
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8ps lvl_s8fV
          of {
            __DEFAULT ->
              case w_s8pr of { ghc-prim-0.6.1:GHC.Types.D# ww_s8pl ->
              $wf_s8pq ww_s8pl w_s8ps
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8fN of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8pr [Occ=Once] :: Double)
                 (w_s8ps [Occ=Once] :: Integer) ->
                 case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
                 }}]
$s^_s8et
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8pC [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8pC
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8py lvl_s8fV
      of {
        __DEFAULT ->
          case $w$s^_s8pw
                 w_s8px (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8py)
          of ww_s8pv
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Prim./## 1.0## ww_s8pv
          };
        1# -> $w$s^_s8pw w_s8px w_s8py
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8px [Occ=Once] :: Double)
                 (w_s8py [Occ=Once] :: Integer) ->
                 case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
                 }}]
$s^^_s8eL
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 [Dmd=<S,H>] xs_a829 [Dmd=<S,U>] ->
          case x_a828 of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X [Dmd=<L,A>] ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fY = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sG :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sG = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case go_s8eP f_a1W7 of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80F, ipv1_X80H [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dF
          = case ipv1_X80H of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X80Y [Dmd=<L,A>], y_X810 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X809 ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80L, ipv1_X80N [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dz
          = case ipv1_X80N of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X814 [Dmd=<L,A>], y_X816 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80f ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80N, ipv1_X80P [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dv
          = case ipv1_X80P of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X816 [Dmd=<L,A>], y_X818 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80h ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80U, ipv1_X80W [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ds :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ds
          = case ipv1_X80W of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X81d [Dmd=<L,A>], y_X81f [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80o ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s802
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sK :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8sK = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sL :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sL = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sM :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sM = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sL

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8sK
      lvl_s8sM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sN :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8sN = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = GHC.Real.^_$s^ lvl_s8sN lvl_s8sK

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sP :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8sP = ghc-prim-0.6.1:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sQ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8sQ = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $w$s^^_s8pC lvl_s8sP lvl_s8sQ of ww_s8pB { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8sZ = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8t0 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8t0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8sX = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sY :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sY = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sV :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8sV = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sW :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sW = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sT :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8sT = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sU :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sU = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sT

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sR :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8sR = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sS :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sS = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sR

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM lvl_s8sS testStimes s_a81O of
      { (# ipv_a81R, ipv1_a81S [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sU testFractionalPower ipv_a81R of
      { (# ipv_X82j, ipv1_X82l [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sW testFractionalPower ipv_X82j of
      { (# ipv_X82o, ipv1_X82q [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sY testFractionalPower ipv_X82o of
      { (# ipv_X82t, ipv1_X82v [Dmd=<L,A>] #) ->
      $smeasure_s8dw lvl_s8t0 testIntegralPower ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82z
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82z
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8d9
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== Simplifier ====================
2019-11-05 16:47:55.850307028 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [final],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 535, types: 542, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fV = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sF :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8sF = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sF)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fB = 1

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8es [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8fD)
                        lvl_s8fV
                 of wild_a8gP [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
                 }}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8fD)
             lvl_s8fV
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8pg [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8pg
  = \ (ww_s8p7 :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8p3 :: Integer)
      (ww_s8pb :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8p3 lvl_s8fD)
             lvl_s8fV
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8p3 lvl_s8fB
          of {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb);
            1# -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb
          };
        1# ->
          $wg1_s8pg
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
            ww_s8pb
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8pq [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8pq
  = \ (ww_s8pl :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8pi :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8pi lvl_s8fD)
             lvl_s8fV
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8pi lvl_s8fB
          of {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fD)
                ww_s8pl;
            1# -> ww_s8pl
          };
        1# ->
          $wf_s8pq
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fD)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8pw [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8pw
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8ps lvl_s8fV
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8ps lvl_s8fV
          of {
            __DEFAULT ->
              case w_s8pr of { ghc-prim-0.6.1:GHC.Types.D# ww_s8pl ->
              $wf_s8pq ww_s8pl w_s8ps
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8fN of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8pr [Occ=Once] :: Double)
                 (w_s8ps [Occ=Once] :: Integer) ->
                 case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
                 }}]
$s^_s8et
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8pC [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8pC
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8py lvl_s8fV
      of {
        __DEFAULT ->
          case $w$s^_s8pw
                 w_s8px (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8py)
          of ww_s8pv
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Prim./## 1.0## ww_s8pv
          };
        1# -> $w$s^_s8pw w_s8px w_s8py
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8px [Occ=Once] :: Double)
                 (w_s8py [Occ=Once] :: Integer) ->
                 case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
                 }}]
$s^^_s8eL
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 [Dmd=<S,H>] xs_a829 [Dmd=<S,U>] ->
          case x_a828 of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X [Dmd=<L,A>] ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8fY = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sG :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sG = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case go_s8eP f_a1W7 of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80F, ipv1_X80H [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dF :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dF
          = case ipv1_X80H of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X80Y [Dmd=<L,A>], y_X810 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X809 ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80L, ipv1_X80N [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dz :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dz
          = case ipv1_X80N of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X814 [Dmd=<L,A>], y_X816 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80f ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80N, ipv1_X80P [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dv :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dv
          = case ipv1_X80P of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X816 [Dmd=<L,A>], y_X818 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80h ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80U, ipv1_X80W [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ds :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ds
          = case ipv1_X80W of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X81d [Dmd=<L,A>], y_X81f [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80o ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s802
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sK :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8sK = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sL :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sL = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sM :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sM = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sL

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8sK
      lvl_s8sM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sN :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8sN = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = GHC.Real.^_$s^ lvl_s8sN lvl_s8sK

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sP :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8sP = ghc-prim-0.6.1:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sQ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8sQ = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $w$s^^_s8pC lvl_s8sP lvl_s8sQ of ww_s8pB { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8sZ = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8t0 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8t0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8sX = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sY :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sY = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sV :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8sV = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sW :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sW = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sT :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8sT = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sU :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sU = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sT

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sR :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8sR = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sS :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8sS = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sR

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM lvl_s8sS testStimes s_a81O of
      { (# ipv_a81R, ipv1_a81S [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sU testFractionalPower ipv_a81R of
      { (# ipv_X82j, ipv1_X82l [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sW testFractionalPower ipv_X82j of
      { (# ipv_X82o, ipv1_X82q [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sY testFractionalPower ipv_X82o of
      { (# ipv_X82t, ipv1_X82v [Dmd=<L,A>] #) ->
      $smeasure_s8dw lvl_s8t0 testIntegralPower ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82z
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82z
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8d9
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL

