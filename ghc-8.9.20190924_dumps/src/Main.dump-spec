
==================== Specialise ====================
2019-11-05 16:47:55.37929546 UTC

Result size of Specialise
  = {terms: 600, types: 554, coercions: 84, joins: 4/27}

Rec {
-- RHS size: {terms: 15, types: 14, coercions: 4, joins: 1/1}
$dNFData_s8dD :: NFData String
[LclId]
$dNFData_s8dD
  = (\ (eta_a822 :: [Char]) ->
       joinrec {
         go_s8dq [Occ=LoopBreaker] :: [Char] -> ()
         [LclId[JoinId(1)], Arity=1, Str=<L,U>]
         go_s8dq (ds_a824 :: [Char])
           = case ds_a824 of {
               [] -> ghc-prim-0.6.1:GHC.Tuple.();
               : x_a828 xs_a829 ->
                 case x_a828 of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X ->
                 jump go_s8dq xs_a829
                 }
             }; } in
       jump go_s8dq eta_a822)
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
            :: ([Char] -> ()) ~R# NFData [Char])

-- RHS size: {terms: 5, types: 3, coercions: 3, joins: 0/0}
$dNFData_s8dx :: NFData Double
[LclId]
$dNFData_s8dx
  = (\ (ds_a82j :: Double) ->
       case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
       ghc-prim-0.6.1:GHC.Tuple.()
       })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
            :: (Double -> ()) ~R# NFData Double)

-- RHS size: {terms: 5, types: 2, coercions: 3, joins: 0/0}
$dNFData_s8dt :: NFData Integer
[LclId]
$dNFData_s8dt
  = (\ (ds_a82u :: Integer) ->
       case ds_a82u of { __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.() })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
            :: (Integer -> ()) ~R# NFData Integer)

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8dN [Occ=OnceL*] :: Num Double
[LclId]
$dNum1_s8dN
  = GHC.Real.$p1Fractional @ Double GHC.Float.$fFractionalDouble

-- RHS size: {terms: 24, types: 17, coercions: 0, joins: 0/4}
$seven_s8eG :: Integer -> Bool
[LclId, Arity=1]
$seven_s8eG
  = let {
      $dReal_s8eF :: Real Integer
      [LclId]
      $dReal_s8eF
        = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger } in
    let {
      $dNum_s8eE :: Num Integer
      [LclId]
      $dNum_s8eE = GHC.Real.$p1Real @ Integer $dReal_s8eF } in
    let {
      $dEq_s8eD [Occ=OnceL] :: Ord Integer
      [LclId]
      $dEq_s8eD = GHC.Real.$p2Real @ Integer $dReal_s8eF } in
    let {
      $dEq1_s8eC [Occ=OnceL] :: Eq Integer
      [LclId]
      $dEq1_s8eC
        = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Integer $dEq_s8eD } in
    \ (n_a8es [Occ=Once] :: Integer) ->
      ==
        @ Integer
        $dEq1_s8eC
        (rem
           @ Integer
           GHC.Real.$fIntegralInteger
           n_a8es
           (fromInteger @ Integer $dNum_s8eE 2))
        (fromInteger @ Integer $dNum_s8eE 0)

-- RHS size: {terms: 157, types: 83, coercions: 0, joins: 2/14}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId, Arity=2]
$s^_s8et
  = let {
      $dReal_s8e7 :: Real Integer
      [LclId]
      $dReal_s8e7
        = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger } in
    let {
      $dNum1_s8e6 :: Num Integer
      [LclId]
      $dNum1_s8e6 = GHC.Real.$p1Real @ Integer $dReal_s8e7 } in
    let {
      $dOrd_s8e5 :: Ord Integer
      [LclId]
      $dOrd_s8e5 = GHC.Real.$p2Real @ Integer $dReal_s8e7 } in
    let {
      $dEq_s8e4 [Occ=OnceL] :: Eq Integer
      [LclId]
      $dEq_s8e4
        = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Integer $dOrd_s8e5 } in
    \ (x0_a7VB [Occ=Once] :: Double) (y0_a7VC :: Integer) ->
      case < @ Integer
             $dOrd_s8e5
             y0_a7VC
             (fromInteger @ Integer $dNum1_s8e6 0)
      of {
        False ->
          case ==
                 @ Integer $dEq_s8e4 y0_a7VC (fromInteger @ Integer $dNum1_s8e6 0)
          of {
            False ->
              let {
                $dReal1_s8eh :: Real Integer
                [LclId]
                $dReal1_s8eh
                  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger } in
              let {
                $dNum2_s8eg :: Num Integer
                [LclId]
                $dNum2_s8eg = GHC.Real.$p1Real @ Integer $dReal1_s8eh } in
              let {
                $dEq1_s8ef [Occ=OnceL] :: Ord Integer
                [LclId]
                $dEq1_s8ef = GHC.Real.$p2Real @ Integer $dReal1_s8eh } in
              let {
                $dEq2_s8ee [Occ=OnceL] :: Eq Integer
                [LclId]
                $dEq2_s8ee
                  = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Integer $dEq1_s8ef } in
              joinrec {
                f_s8e3 [Occ=LoopBreakerT[2]] :: Double -> Integer -> Double
                [LclId[JoinId(2)], Arity=2, Str=<L,U><L,U>]
                f_s8e3 (x_a7VO :: Double) (y_a7VP :: Integer)
                  = case even @ Integer GHC.Real.$fIntegralInteger y_a7VP of {
                      False ->
                        case ==
                               @ Integer $dEq2_s8ee y_a7VP (fromInteger @ Integer $dNum2_s8eg 1)
                        of {
                          False ->
                            let {
                              $dReal2_s8el :: Real Integer
                              [LclId]
                              $dReal2_s8el
                                = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger } in
                            let {
                              $dNum3_s8ek :: Num Integer
                              [LclId]
                              $dNum3_s8ek = GHC.Real.$p1Real @ Integer $dReal2_s8el } in
                            let {
                              $dEq3_s8ej [Occ=OnceL] :: Ord Integer
                              [LclId]
                              $dEq3_s8ej = GHC.Real.$p2Real @ Integer $dReal2_s8el } in
                            let {
                              $dEq4_s8ei [Occ=OnceL] :: Eq Integer
                              [LclId]
                              $dEq4_s8ei
                                = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Integer $dEq3_s8ej } in
                            joinrec {
                              g1_s8ed [Occ=LoopBreakerT[3]]
                                :: Double -> Integer -> Double -> Double
                              [LclId[JoinId(3)], Arity=3, Str=<L,U><L,U><L,U>]
                              g1_s8ed (x1_a7W3 :: Double)
                                      (y1_a7W4 :: Integer)
                                      (z_a7W5 [Occ=Once*] :: Double)
                                = case even @ Integer GHC.Real.$fIntegralInteger y1_a7W4 of {
                                    False ->
                                      case ==
                                             @ Integer
                                             $dEq4_s8ei
                                             y1_a7W4
                                             (fromInteger @ Integer $dNum3_s8ek 1)
                                      of {
                                        False ->
                                          jump g1_s8ed
                                            (* @ Double $dNum1_s8dN x1_a7W3 x1_a7W3)
                                            (quot
                                               @ Integer
                                               GHC.Real.$fIntegralInteger
                                               y1_a7W4
                                               (fromInteger @ Integer $dNum3_s8ek 2))
                                            (* @ Double $dNum1_s8dN x1_a7W3 z_a7W5);
                                        True -> * @ Double $dNum1_s8dN x1_a7W3 z_a7W5
                                      };
                                    True ->
                                      jump g1_s8ed
                                        (* @ Double $dNum1_s8dN x1_a7W3 x1_a7W3)
                                        (quot
                                           @ Integer
                                           GHC.Real.$fIntegralInteger
                                           y1_a7W4
                                           (fromInteger @ Integer $dNum3_s8ek 2))
                                        z_a7W5
                                  }; } in
                            jump g1_s8ed
                              (* @ Double $dNum1_s8dN x_a7VO x_a7VO)
                              (quot
                                 @ Integer
                                 GHC.Real.$fIntegralInteger
                                 y_a7VP
                                 (fromInteger @ Integer $dNum2_s8eg 2))
                              x_a7VO;
                          True -> x_a7VO
                        };
                      True ->
                        jump f_s8e3
                          (* @ Double $dNum1_s8dN x_a7VO x_a7VO)
                          (quot
                             @ Integer
                             GHC.Real.$fIntegralInteger
                             y_a7VP
                             (fromInteger @ Integer $dNum2_s8eg 2))
                    }; } in
              jump f_s8e3 x0_a7VB y0_a7VC;
            True -> fromInteger @ Double $dNum1_s8dN 1
          };
        True ->
          errorWithoutStackTrace
            @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
            @ Double
            (ghc-prim-0.6.1:GHC.CString.unpackCString# "Negative exponent"#)
      }

-- RHS size: {terms: 34, types: 20, coercions: 0, joins: 0/3}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId, Arity=2]
$s^^_s8eL
  = let {
      $dReal_s8dQ :: Real Integer
      [LclId]
      $dReal_s8dQ
        = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger } in
    let {
      $dNum_s8dP :: Num Integer
      [LclId]
      $dNum_s8dP = GHC.Real.$p1Real @ Integer $dReal_s8dQ } in
    let {
      $dOrd_s8dO [Occ=OnceL] :: Ord Integer
      [LclId]
      $dOrd_s8dO = GHC.Real.$p2Real @ Integer $dReal_s8dQ } in
    \ (x_a7Vm [Occ=Once*] :: Double) (n_a7Vn :: Integer) ->
      case >=
             @ Integer $dOrd_s8dO n_a7Vn (fromInteger @ Integer $dNum_s8dP 0)
      of {
        False ->
          recip
            @ Double
            GHC.Float.$fFractionalDouble
            (^ @ Double
               @ Integer
               $dNum1_s8dN
               GHC.Real.$fIntegralInteger
               x_a7Vm
               (negate @ Integer $dNum_s8dP n_a7Vn));
        True ->
          ^ @ Double
            @ Integer
            $dNum1_s8dN
            GHC.Real.$fIntegralInteger
            x_a7Vm
            n_a7Vn
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Xu
      of
      { (# ipv_a7Xx, ipv1_a7Xy #) ->
      case ((case ($dNFData_s8dD
                   `cast` (Control.DeepSeq.N:NFData[0] <String>_N
                           :: NFData String ~R# (String -> ())))
                    f_a1W7
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Xx
      of
      { (# ipv_X7XY, ipv1_X7Y0 #) ->
      let {
        duration_s8dF :: Integer
        [LclId]
        duration_s8dF
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              " milli seconds -- "#
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 " pico seconds"# c_a7Z6 n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dF
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8dF 1000000000)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7XY
      }
      }

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Xu
      of
      { (# ipv_a7Xx, ipv1_a7Xy #) ->
      case ((case ($dNFData_s8dx
                   `cast` (Control.DeepSeq.N:NFData[0] <Double>_N
                           :: NFData Double ~R# (Double -> ())))
                    f_a1W7
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Xx
      of
      { (# ipv_X7XY, ipv1_X7Y0 #) ->
      let {
        duration_s8dz :: Integer
        [LclId]
        duration_s8dz
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              " milli seconds -- "#
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 " pico seconds"# c_a7Z6 n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dz
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8dz 1000000000)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7XY
      }
      }

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Xu
      of
      { (# ipv_a7Xx, ipv1_a7Xy #) ->
      case ((case ($dNFData_s8dt
                   `cast` (Control.DeepSeq.N:NFData[0] <Integer>_N
                           :: NFData Integer ~R# (Integer -> ())))
                    f_a1W7
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Xx
      of
      { (# ipv_X7XY, ipv1_X7Y0 #) ->
      let {
        duration_s8dv :: Integer
        [LclId]
        duration_s8dv
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              " milli seconds -- "#
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 " pico seconds"# c_a7Z6 n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dv
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8dv 1000000000)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7XY
      }
      }

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 730 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_s8dD :: NFData String).
              measure_s802 @ String $dNFData_s8dD
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_s8dx :: NFData Double).
              measure_s802 @ Double $dNFData_s8dx
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_s8dt :: NFData Integer).
              measure_s802 @ Integer $dNFData_s8dt
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Xu
      of
      { (# ipv_a7Xx, ipv1_a7Xy #) ->
      case ((case ($dNFData_a5I0
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                           :: NFData a_a5HY ~R# (a_a5HY -> ())))
                    f_a1W7
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Xx
      of
      { (# ipv_X7XY, ipv1_X7Y0 #) ->
      let {
        duration_s8ds :: Integer
        [LclId]
        duration_s8ds
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Y0 ipv1_a7Xy } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Z5)
                      (c_a7Z6 [OS=OneShot] :: Char -> b_a7Z5 -> b_a7Z5)
                      (n_a7Z7 [OS=OneShot] :: b_a7Z5) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Z5
                        c_a7Z6
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Z5
                           c_a7Z6
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Z5
                              " milli seconds -- "#
                              c_a7Z6
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Z5
                                 c_a7Z6
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Z5 " pico seconds"# c_a7Z6 n_a7Z7)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8ds
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8ds 1000000000)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a1W6))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7XY
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YL) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YL "foo"#))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      441

-- RHS size: {terms: 79, types: 96, coercions: 16, joins: 1/1}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case measure_s802
             @ String
             ((\ (eta_a822 :: [Char]) ->
                 joinrec {
                   go_s8dq [Occ=LoopBreaker] :: [Char] -> ()
                   [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                   go_s8dq (ds_a824 :: [Char])
                     = case ds_a824 of {
                         [] -> ghc-prim-0.6.1:GHC.Tuple.();
                         : x_a828 xs_a829 ->
                           case x_a828 of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X ->
                           jump go_s8dq xs_a829
                           }
                       }; } in
                 jump go_s8dq eta_a822)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "stimes : "#))
             testStimes
             s_a81O
      of
      { (# ipv_a81R, ipv1_a81S #) ->
      case measure_s802
             @ Double
             ((\ (ds_a82j :: Double) ->
                 case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "fractional power 1 : "#))
             testFractionalPower
             ipv_a81R
      of
      { (# ipv_X82j, ipv1_X82l #) ->
      case measure_s802
             @ Double
             ((\ (ds_a82j :: Double) ->
                 case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "fractional power 2 : "#))
             testFractionalPower
             ipv_X82j
      of
      { (# ipv_X82o, ipv1_X82q #) ->
      case measure_s802
             @ Double
             ((\ (ds_a82j :: Double) ->
                 case ds_a82j of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YL) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YL "fractional power 3 : "#))
             testFractionalPower
             ipv_X82o
      of
      { (# ipv_X82t, ipv1_X82v #) ->
      measure_s802
        @ Integer
        ((\ (ds_a82u :: Integer) ->
            case ds_a82u of { __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.() })
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        (GHC.Base.build
           @ Char
           (\ (@ b_a7YL) ->
              ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                @ b_a7YL "integral power : "#))
        testIntegralPower
        ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL


==================== SpecConstr ====================
2019-11-05 16:47:55.806594445 UTC

Result size of SpecConstr
  = {terms: 535, types: 542, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Integer
[LclId]
lvl_s8fV = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sF :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sF = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8fN :: Double
[LclId, Str=b]
lvl_s8fN
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sF)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fD :: Integer
[LclId]
lvl_s8fD = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fB :: Integer
[LclId]
lvl_s8fB = 1

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eG :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8es [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8fD)
                        lvl_s8fV
                 of wild_a8gP [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
                 }}]
$seven_s8eG
  = \ (n_a8es :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8es lvl_s8fD)
             lvl_s8fV
      of wild_a8gP
      { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Prim.tagToEnum# @ Bool wild_a8gP
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8pg [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><S,U><L,U>]
$wg1_s8pg
  = \ (ww_s8p7 :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8p3 :: Integer)
      (ww_s8pb :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8p3 lvl_s8fD)
             lvl_s8fV
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8p3 lvl_s8fB
          of {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb);
            1# -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8pb
          };
        1# ->
          $wg1_s8pg
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8p7 ww_s8p7)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8p3 lvl_s8fD)
            ww_s8pb
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8pq [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8pq
  = \ (ww_s8pl :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (w_s8pi :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8pi lvl_s8fD)
             lvl_s8fV
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8pi lvl_s8fB
          of {
            __DEFAULT ->
              $wg1_s8pg
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fD)
                ww_s8pl;
            1# -> ww_s8pl
          };
        1# ->
          $wf_s8pq
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8pl ww_s8pl)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8pi lvl_s8fD)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8pw [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8pw
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8ps lvl_s8fV
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8ps lvl_s8fV
          of {
            __DEFAULT ->
              case w_s8pr of { ghc-prim-0.6.1:GHC.Types.D# ww_s8pl ->
              $wf_s8pq ww_s8pl w_s8ps
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8fN of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8et [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8pr [Occ=Once] :: Double)
                 (w_s8ps [Occ=Once] :: Integer) ->
                 case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
                 }}]
$s^_s8et
  = \ (w_s8pr :: Double) (w_s8ps :: Integer) ->
      case $w$s^_s8pw w_s8pr w_s8ps of ww_s8pv { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pv
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8pC [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8pC
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8py lvl_s8fV
      of {
        __DEFAULT ->
          case $w$s^_s8pw
                 w_s8px (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8py)
          of ww_s8pv
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Prim./## 1.0## ww_s8pv
          };
        1# -> $w$s^_s8pw w_s8px w_s8py
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8eL [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8px [Occ=Once] :: Double)
                 (w_s8py [Occ=Once] :: Integer) ->
                 case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
                 }}]
$s^^_s8eL
  = \ (w_s8px :: Double) (w_s8py :: Integer) ->
      case $w$s^^_s8pC w_s8px w_s8py of ww_s8pB { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8eP [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8eP
  = \ (ds_a824 :: [Char]) ->
      case ds_a824 of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a828 [Dmd=<S,H>] xs_a829 [Dmd=<S,U>] ->
          case x_a828 of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81X [Dmd=<L,A>] ->
          go_s8eP xs_a829
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7WW = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WX :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7WX = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WY :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7WY = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7WZ :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7WZ = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7WY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7WX $trModule_s7WZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fW = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8fX = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId]
lvl_s8fY = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sG :: [Char]
[LclId]
lvl_s8sG = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8fX

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8eM
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8eM
  = \ (description_a1W6 :: String)
      (f_a1W7 :: String)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case go_s8eP f_a1W7 of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80F, ipv1_X80H [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dF :: Integer
        [LclId]
        duration_s8dF
          = case ipv1_X80H of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X80Y [Dmd=<L,A>], y_X810 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X810
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dF lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dF (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X809, ww4_X80b #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X809 ww4_X80b
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80F
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8dA
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8dA
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Double)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82m [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80L, ipv1_X80N [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dz :: Integer
        [LclId]
        duration_s8dz
          = case ipv1_X80N of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X814 [Dmd=<L,A>], y_X816 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X816
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dz lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dz (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80f, ww4_X80h #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80f ww4_X80h
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80L
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dw
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8dw
  = \ (description_a1W6 :: String)
      (f_a1W7 :: Integer)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case f_a1W7 of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80N, ipv1_X80P [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dv :: Integer
        [LclId]
        duration_s8dv
          = case ipv1_X80P of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X816 [Dmd=<L,A>], y_X818 [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X818
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dv lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dv (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80h, ww4_X80j #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80h ww4_X80j
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80N
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s802
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dT :: NFData String).
              measure_s802 @ String $dNFData_X8dT
              = $smeasure_s8eM
        "SPEC measure @ Double"
            forall ($dNFData_X8dN :: NFData Double).
              measure_s802 @ Double $dNFData_X8dN
              = $smeasure_s8dA
        "SPEC measure @ Integer"
            forall ($dNFData_X8dJ :: NFData Integer).
              measure_s802 @ Integer $dNFData_X8dJ
              = $smeasure_s8dw]
measure_s802
  = \ (@ a_a5HY)
      ($dNFData_a5I0 :: NFData a_a5HY)
      (description_a1W6 :: String)
      (f_a1W7 :: a_a5HY)
      (s_a7Xu
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Xu
      of
      { (# ipv_a7XG, ipv1_a7XH [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5I0
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5HY>_N
                    :: NFData a_a5HY ~R# (a_a5HY -> ())))
             f_a1W7
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XG
      of
      { (# ipv_X80U, ipv1_X80W [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ds :: Integer
        [LclId]
        duration_s8ds
          = case ipv1_X80W of { (ds1_a7XL [Dmd=<L,A>], y_a7XM [Dmd=<S,U>]) ->
            case ipv1_a7XH of { (ds1_X81d [Dmd=<L,A>], y_X81f [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7XM y_X81f
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1W6
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ds lvl_s8fY)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Yt, ww4_a7Yu #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8fW
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ds (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80o, ww4_X80q #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8sG ww3_X80o ww4_X80q
                          }))
                      ww3_a7Yt
                      ww4_a7Yu
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X80U
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s802
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s802
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sK :: Integer
[LclId]
lvl_s8sK = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sL :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sL = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sM :: [Char]
[LclId]
lvl_s8sM = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sL

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.6.1:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.13.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8sK
      lvl_s8sM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sN :: Integer
[LclId]
lvl_s8sN = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8sN lvl_s8sK

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sP :: Double
[LclId]
lvl_s8sP = ghc-prim-0.6.1:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sQ :: Integer
[LclId]
lvl_s8sQ = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8pC lvl_s8sP lvl_s8sQ of ww_s8pB { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8pB
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sZ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sZ = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8t0 :: [Char]
[LclId]
lvl_s8t0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sX :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sX = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sY :: [Char]
[LclId]
lvl_s8sY = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sV :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sV = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sW :: [Char]
[LclId]
lvl_s8sW = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sT :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sT = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sU :: [Char]
[LclId]
lvl_s8sU = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sT

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8sR :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8sR = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8sS :: [Char]
[LclId]
lvl_s8sS = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8sR

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82z
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s82z
  = \ (s_a81O
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8eM lvl_s8sS testStimes s_a81O of
      { (# ipv_a81R, ipv1_a81S [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sU testFractionalPower ipv_a81R of
      { (# ipv_X82j, ipv1_X82l [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sW testFractionalPower ipv_X82j of
      { (# ipv_X82o, ipv1_X82q [Dmd=<L,A>] #) ->
      case $smeasure_s8dA lvl_s8sY testFractionalPower ipv_X82o of
      { (# ipv_X82t, ipv1_X82v [Dmd=<L,A>] #) ->
      $smeasure_s8dw lvl_s8t0 testIntegralPower ipv_X82t
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82z
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82z
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8d9
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82z
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8d9
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82z
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8d9
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8d9
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8ex :: Integral Integer).
      even @ Integer $dIntegral_s8ex
      = $seven_s8eG
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dNum_s8dS :: Num Double)
           ($dIntegral_s8dT :: Integral Integer).
      ^ @ Double @ Integer $dNum_s8dS $dIntegral_s8dT
      = $s^_s8et
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dFractional_s8dH :: Fractional Double)
           ($dIntegral_s8dI :: Integral Integer).
      ^^ @ Double @ Integer $dFractional_s8dH $dIntegral_s8dI
      = $s^^_s8eL

