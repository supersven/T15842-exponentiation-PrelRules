
==================== STG: ====================
2019-11-05 16:48:15.941543189 UTC

Rec {
$wg1_r8HH
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Word#
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []] =
    \r [w_s8HS ww_s8HT w3_s8HU]
        case remWord# [ww_s8HT 2##] of {
          __DEFAULT ->
              case ww_s8HT of wild1_s8HW [Occ=Once] {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger w_s8HS w3_s8HU
                    of
                    sat_s8HZ [Occ=Once]
                    {
                    __DEFAULT ->
                    case quotWord# [wild1_s8HW 2##] of sat_s8HY [Occ=Once] {
                    __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger w_s8HS w_s8HS
                    of
                    sat_s8HX [Occ=Once]
                    {
                    __DEFAULT -> $wg1_r8HH sat_s8HX sat_s8HY sat_s8HZ;
                    };
                    };
                    };
                1## -> GHC.Integer.Type.timesInteger w_s8HS w3_s8HU;
              };
          0## ->
              case quotWord# [ww_s8HT 2##] of sat_s8I1 [Occ=Once] {
              __DEFAULT ->
              case
                  GHC.Integer.Type.timesInteger w_s8HS w_s8HS
              of
              sat_s8I0 [Occ=Once]
              {
              __DEFAULT -> $wg1_r8HH sat_s8I0 sat_s8I1 w3_s8HU;
              };
              };
        };
end Rec }

Rec {
Main.$wf [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Word# -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    \r [w_s8I2 ww_s8I3]
        case remWord# [ww_s8I3 2##] of {
          __DEFAULT ->
              case ww_s8I3 of wild1_s8I5 [Occ=Once] {
                __DEFAULT ->
                    case quotWord# [wild1_s8I5 2##] of sat_s8I7 [Occ=Once] {
                    __DEFAULT ->
                    case
                        GHC.Integer.Type.timesInteger w_s8I2 w_s8I2
                    of
                    sat_s8I6 [Occ=Once]
                    {
                    __DEFAULT -> $wg1_r8HH sat_s8I6 sat_s8I7 w_s8I2;
                    };
                    };
                1## -> w_s8I2;
              };
          0## ->
              case quotWord# [ww_s8I3 2##] of sat_s8I9 [Occ=Once] {
              __DEFAULT ->
              case
                  GHC.Integer.Type.timesInteger w_s8I2 w_s8I2
              of
              sat_s8I8 [Occ=Once]
              {
              __DEFAULT -> Main.$wf sat_s8I8 sat_s8I9;
              };
              };
        };
end Rec }

Rec {
$wg2_r8HI
  :: GHC.Prim.Double#
     -> GHC.Prim.Word# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [ww_s8Ia ww1_s8Ib ww2_s8Ic]
        case remWord# [ww1_s8Ib 2##] of {
          __DEFAULT ->
              case ww1_s8Ib of wild1_s8Ie [Occ=Once] {
                __DEFAULT ->
                    case *## [ww_s8Ia ww2_s8Ic] of sat_s8Ih [Occ=Once] {
                    __DEFAULT ->
                    case quotWord# [wild1_s8Ie 2##] of sat_s8Ig [Occ=Once] {
                    __DEFAULT ->
                    case *## [ww_s8Ia ww_s8Ia] of sat_s8If [Occ=Once] {
                    __DEFAULT -> $wg2_r8HI sat_s8If sat_s8Ig sat_s8Ih;
                    };
                    };
                    };
                1## -> *## [ww_s8Ia ww2_s8Ic];
              };
          0## ->
              case quotWord# [ww1_s8Ib 2##] of sat_s8Ij [Occ=Once] {
              __DEFAULT ->
              case *## [ww_s8Ia ww_s8Ia] of sat_s8Ii [Occ=Once] {
              __DEFAULT -> $wg2_r8HI sat_s8Ii sat_s8Ij ww2_s8Ic;
              };
              };
        };
end Rec }

Rec {
Main.$wf1 [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: GHC.Prim.Double# -> GHC.Prim.Word# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    \r [ww_s8Ik ww1_s8Il]
        case remWord# [ww1_s8Il 2##] of {
          __DEFAULT ->
              case ww1_s8Il of wild1_s8In [Occ=Once] {
                __DEFAULT ->
                    case quotWord# [wild1_s8In 2##] of sat_s8Ip [Occ=Once] {
                    __DEFAULT ->
                    case *## [ww_s8Ik ww_s8Ik] of sat_s8Io [Occ=Once] {
                    __DEFAULT -> $wg2_r8HI sat_s8Io sat_s8Ip ww_s8Ik;
                    };
                    };
                1## -> ww_s8Ik;
              };
          0## ->
              case quotWord# [ww1_s8Il 2##] of sat_s8Ir [Occ=Once] {
              __DEFAULT ->
              case *## [ww_s8Ik ww_s8Ik] of sat_s8Iq [Occ=Once] {
              __DEFAULT -> Main.$wf1 sat_s8Iq sat_s8Ir;
              };
              };
        };
end Rec }

Rec {
Main.main_go [Occ=LoopBreaker] :: [GHC.Types.Char] -> ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    \r [ds_s8Is]
        case ds_s8Is of {
          [] -> () [];
          : x_s8Iu [Occ=Once!] xs_s8Iv [Occ=Once] ->
              case x_s8Iu of {
              GHC.Types.C# _ [Occ=Dead] -> Main.main_go xs_s8Iv;
              };
        };
end Rec }

Main.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "main"#;

Main.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Main.$trModule4];

Main.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Main"#;

Main.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Main.$trModule2];

Main.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Main.$trModule3 Main.$trModule1];

Main.main6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " milli seconds -- "#;

Main.main5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " pico seconds"#;

Main.main7 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [1000000000#];

Main.main4 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main5;

Main.main_$smeasure2
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    \r [description_s8Iy f_s8Iz s_s8IA]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8IA
        of
        {
        (#,#) ipv_s8IC [Occ=Once] ipv1_s8ID [Occ=Once!] ->
        case Main.main_go f_s8Iz of {
        () ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8IC
        of
        {
        (#,#) ipv2_s8IG [Occ=Once] ipv3_s8IH [Occ=Once!] ->
        let {
          duration_s8II :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv3_s8IH of {
                  (,) _ [Occ=Dead] y_s8IL [Occ=Once] ->
                  case ipv1_s8ID of {
                  (,) _ [Occ=Dead] y1_s8IO [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8IL y1_s8IO;
                  };
                  }; } in
        let {
          sat_s8J0 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8IY [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8II Main.main7
                            of
                            sat_s8IP [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8IP GHC.Types.[] of {
                            (#,#) ww3_s8IR [Occ=Once] ww4_s8IS [Occ=Once] ->
                            let {
                              sat_s8IX [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8IW [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8II GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8IU [Occ=Once] ww6_s8IV [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8IU ww6_s8IV;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8IW;
                            } in  GHC.Base.++_$s++ sat_s8IX ww3_s8IR ww4_s8IS;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8Iy sat_s8IY of sat_s8IZ [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8IZ GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8J1 [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8J0];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8J1 GHC.Types.True ipv2_s8IG;
        };
        };
        };

Main.main_$smeasure1
  :: GHC.Base.String
     -> GHC.Types.Double
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*H><L,U>, Unf=OtherCon []] =
    \r [description_s8J2 f_s8J3 s_s8J4]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8J4
        of
        {
        (#,#) ipv_s8J6 [Occ=Once] ipv1_s8J7 [Occ=Once!] ->
        case f_s8J3 of {
        GHC.Types.D# _ [Occ=Dead] ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8J6
        of
        {
        (#,#) ipv3_s8Jb [Occ=Once] ipv4_s8Jc [Occ=Once!] ->
        let {
          duration_s8Jd :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv4_s8Jc of {
                  (,) _ [Occ=Dead] y_s8Jg [Occ=Once] ->
                  case ipv1_s8J7 of {
                  (,) _ [Occ=Dead] y1_s8Jj [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8Jg y1_s8Jj;
                  };
                  }; } in
        let {
          sat_s8Jv [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8Jt [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8Jd Main.main7
                            of
                            sat_s8Jk [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8Jk GHC.Types.[] of {
                            (#,#) ww3_s8Jm [Occ=Once] ww4_s8Jn [Occ=Once] ->
                            let {
                              sat_s8Js [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8Jr [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8Jd GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8Jp [Occ=Once] ww6_s8Jq [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8Jp ww6_s8Jq;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8Jr;
                            } in  GHC.Base.++_$s++ sat_s8Js ww3_s8Jm ww4_s8Jn;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8J2 sat_s8Jt of sat_s8Ju [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8Ju GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8Jw [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8Jv];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8Jw GHC.Types.True ipv3_s8Jb;
        };
        };
        };

Main.main_$smeasure
  :: GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,1*U><L,1*U><L,U>, Unf=OtherCon []] =
    \r [description_s8Jx f_s8Jy s_s8Jz]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8Jz
        of
        {
        (#,#) ipv_s8JB [Occ=Once] ipv1_s8JC [Occ=Once!] ->
        case f_s8Jy of {
        __DEFAULT ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8JB
        of
        {
        (#,#) ipv2_s8JF [Occ=Once] ipv3_s8JG [Occ=Once!] ->
        let {
          duration_s8JH :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv3_s8JG of {
                  (,) _ [Occ=Dead] y_s8JK [Occ=Once] ->
                  case ipv1_s8JC of {
                  (,) _ [Occ=Dead] y1_s8JN [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8JK y1_s8JN;
                  };
                  }; } in
        let {
          sat_s8JZ [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8JX [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8JH Main.main7
                            of
                            sat_s8JO [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8JO GHC.Types.[] of {
                            (#,#) ww3_s8JQ [Occ=Once] ww4_s8JR [Occ=Once] ->
                            let {
                              sat_s8JW [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8JV [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8JH GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8JT [Occ=Once] ww6_s8JU [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8JT ww6_s8JU;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8JV;
                            } in  GHC.Base.++_$s++ sat_s8JW ww3_s8JQ ww4_s8JR;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8Jx sat_s8JX of sat_s8JY [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8JY GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8K0 [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8JZ];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8K0 GHC.Types.True ipv2_s8JF;
        };
        };
        };

Main.measure1
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [$dNFData_s8K1 description_s8K2 f_s8K3 s_s8K4]
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 s_s8K4
        of
        {
        (#,#) ipv_s8K6 [Occ=Once] ipv1_s8K7 [Occ=Once!] ->
        case $dNFData_s8K1 f_s8K3 of {
        () ->
        case
            System.CPUTime.Posix.ClockGetTime.getCPUTime4
                System.CPUTime.Posix.ClockGetTime.getCPUTime2 ipv_s8K6
        of
        {
        (#,#) ipv2_s8Ka [Occ=Once] ipv3_s8Kb [Occ=Once!] ->
        let {
          duration_s8Kc :: GHC.Integer.Type.Integer
          [LclId] =
              \u []
                  case ipv3_s8Kb of {
                  (,) _ [Occ=Dead] y_s8Kf [Occ=Once] ->
                  case ipv1_s8K7 of {
                  (,) _ [Occ=Dead] y1_s8Ki [Occ=Once] ->
                  GHC.Integer.Type.minusInteger y_s8Kf y1_s8Ki;
                  };
                  }; } in
        let {
          sat_s8Ku [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              \u []
                  let {
                    sat_s8Ks [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                    [LclId] =
                        \s []
                            case
                                GHC.Integer.Type.divInteger duration_s8Kc Main.main7
                            of
                            sat_s8Kj [Occ=Once]
                            {
                            __DEFAULT ->
                            case GHC.Show.$w$cshowsPrec4 0# sat_s8Kj GHC.Types.[] of {
                            (#,#) ww3_s8Kl [Occ=Once] ww4_s8Km [Occ=Once] ->
                            let {
                              sat_s8Kr [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                              [LclId] =
                                  \s []
                                      let {
                                        sat_s8Kq [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            \u []
                                                case
                                                    GHC.Show.$w$cshowsPrec4
                                                        0# duration_s8Kc GHC.Types.[]
                                                of
                                                {
                                                (#,#) ww5_s8Ko [Occ=Once] ww6_s8Kp [Occ=Once] ->
                                                GHC.Base.++_$s++ Main.main4 ww5_s8Ko ww6_s8Kp;
                                                };
                                      } in  GHC.CString.unpackAppendCString# Main.main6 sat_s8Kq;
                            } in  GHC.Base.++_$s++ sat_s8Kr ww3_s8Kl ww4_s8Km;
                            };
                            };
                  } in 
                    case GHC.Base.++ description_s8K2 sat_s8Ks of sat_s8Kt [Occ=Once] {
                    __DEFAULT -> GHC.Show.showLitString sat_s8Kt GHC.Show.$fShow[]1;
                    }; } in
        let {
          sat_s8Kv [Occ=Once] :: GHC.Base.String
          [LclId] =
              CCCS :! [GHC.Show.$fShow(,)3 sat_s8Ku];
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_s8Kv GHC.Types.True ipv2_s8Ka;
        };
        };
        };

Main.measure
  :: forall a.
     Control.DeepSeq.NFData a =>
     GHC.Base.String -> a -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Main.measure1 eta_B4 eta_B3 eta_B2 eta_B1;

w1_r8HJ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "foo"#;

w2_r8HK :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# w1_r8HJ;

Rec {
Main.$wrep [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: GHC.Prim.Word# -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    \r [ww_s8Kw]
        case ww_s8Kw of wild_s8Kx [Occ=Once] {
          __DEFAULT ->
              let {
                sat_s8Kz [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    \s []
                        case minusWord# [wild_s8Kx 1##] of sat_s8Ky [Occ=Once] {
                        __DEFAULT -> Main.$wrep sat_s8Ky;
                        };
              } in  GHC.Base.++ w2_r8HK sat_s8Kz;
          0## -> [] [];
        };
end Rec }

Main.testStimes :: GHC.Base.String
[GblId] =
    \u [] Main.$wrep 1000000##;

Main.testIntegralPower1 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.S#! [3#];

Main.testIntegralPower :: GHC.Integer.Type.Integer
[GblId] =
    \u [] Main.$wf Main.testIntegralPower1 1000000##;

Main.testFractionalPower :: GHC.Types.Double
[GblId] =
    \u []
        case Main.$wf1 5.0## 441## of ww_s8KA [Occ=Once] {
        __DEFAULT -> GHC.Types.D# [ww_s8KA];
        };

Main.main3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integral power : "#;

Main.main2 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main3;

Main.main9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 3 : "#;

Main.main8 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main9;

Main.main11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 2 : "#;

Main.main10 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main11;

Main.main13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "fractional power 1 : "#;

Main.main12 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main13;

Main.main15 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "stimes : "#;

Main.main14 :: [GHC.Types.Char]
[GblId] =
    \u [] GHC.CString.unpackCString# Main.main15;

Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [s_s8KB]
        case Main.main_$smeasure2 Main.main14 Main.testStimes s_s8KB of {
        (#,#) ipv_s8KD [Occ=Once] _ [Occ=Dead] ->
        case
            Main.main_$smeasure1 Main.main12 Main.testFractionalPower ipv_s8KD
        of
        {
        (#,#) ipv2_s8KG [Occ=Once] _ [Occ=Dead] ->
        case
            Main.main_$smeasure1 Main.main10 Main.testFractionalPower ipv2_s8KG
        of
        {
        (#,#) ipv4_s8KJ [Occ=Once] _ [Occ=Dead] ->
        case
            Main.main_$smeasure1 Main.main8 Main.testFractionalPower ipv4_s8KJ
        of
        {
        (#,#) ipv6_s8KM [Occ=Once] _ [Occ=Dead] ->
        Main.main_$smeasure Main.main2 Main.testIntegralPower ipv6_s8KM;
        };
        };
        };
        };

Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [eta_B1] Main.main1 eta_B1;

Main.main16
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [eta_B1] GHC.TopHandler.runMainIO1 Main.main1 eta_B1;

:Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r [eta_B1] Main.main16 eta_B1;

