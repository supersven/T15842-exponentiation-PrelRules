
==================== Simplifier iteration=1 ====================
2019-11-05 16:48:15.286381396 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     274
  
  74 PreInlineUnconditionally
    8 a_a7YV
    4 xs_a7Yh
    4 ys_a7Yi
    4 c_a7Yn
    4 n_a7Yo
    4 g_a7Zf
    4 h_a7Zh
    4 ds_a81A
    4 k_a81B
    3 n_a7Zl
    3 s_a81C
    2 ds_a7XG
    2 k_a7XH
    2 x_a7Yv
    1 end_a29K
    1 f_a7Hz
    1 x_a7HA
    1 $dShow_a7HC
    1 x_a7HD
    1 $dNFData_a7UE
    1 a1_a7UF
    1 b1_a7UG
    1 $dShow_a7Xg
    1 s_a7XI
    1 x_a7Y7
    1 ds_a7YR
    1 ds1_a7YS
    1 k_a80c
    1 z_a80d
    1 g_a80e
    1 $dSemigroup_a80k
    1 n_a80l
    1 x_a80m
    1 $dNum_a81l
    1 $dFractional_a81x
    1 ds_a81I
  6 PostInlineUnconditionally
    3 c_a7Zk
    1 start_a29I
    1 $dShow_a5JO
    1 r_a81P
  33 UnfoldingDone
    5 measure
    4 GHC.Base.$fApplicativeIO2
    3 Control.DeepSeq.$fNFDataDouble
    2 getCPUTime
    2 GHC.Base.$fMonadIO1
    2 GHC.Show.$fShowInteger_$cshow
    1 print
    1 GHC.TopHandler.runMainIO
    1 $
    1 numWordExponentiation
    1 fractionalWordExponentiation
    1 base-4.13.0.0:Data.Semigroup.Internal.wordStimes
    1 deepseq
    1 Control.DeepSeq.$fNFData1NonEmpty_$cliftRnf1
    1 Control.DeepSeq.$fNFDataChar
    1 Control.DeepSeq.$fNFDataInteger
    1 Control.DeepSeq.$fNFData[]
    1 GHC.Real.$fIntegralInteger_$cdiv
    1 main
    1 GHC.Show.$fShow[]_$s$cshow1
    1 r_s823
  34 RuleFired
    8 unpack
    4 ++
    4 Class op >>
    4 augment/build
    3 Class op show
    2 Class op >>=
    1 Class op -
    1 Class op div
    1 Class op stimes
    1 SPEC $fShow[]
    1 eqInteger#
    1 fold/build
    1 fractionalExponentiation_IntegerToWord
    1 numExponentiation_IntegerToWord
    1 stimes_IntegerToWord
  5 LetFloatFromLet 5
  120 BetaReduction
    8 a_a7YV
    4 a_a7Yg
    4 xs_a7Yh
    4 ys_a7Yi
    4 b_a7Ym
    4 c_a7Yn
    4 n_a7Yo
    4 a_a7Ze
    4 g_a7Zf
    4 h_a7Zh
    4 a_a81y
    4 b_a81z
    4 ds_a81A
    4 k_a81B
    3 b_a7Zj
    3 c_a7Zk
    3 n_a7Zl
    3 s_a81C
    2 a_a7XE
    2 b_a7XF
    2 ds_a7XG
    2 k_a7XH
    2 x_a7Yv
    2 b_a7YZ
    1 start_a29I
    1 end_a29K
    1 r_a7Hw
    1 a_a7Hx
    1 b_a7Hy
    1 f_a7Hz
    1 x_a7HA
    1 a_a7HB
    1 $dShow_a7HC
    1 x_a7HD
    1 a_a7UC
    1 b_a7UD
    1 $dNFData_a7UE
    1 a1_a7UF
    1 b1_a7UG
    1 $dShow_a7Xg
    1 s_a7XI
    1 x_a7Y7
    1 ds_a7YR
    1 ds1_a7YS
    1 b_a80a
    1 a_a80b
    1 k_a80c
    1 z_a80d
    1 g_a80e
    1 a_a80j
    1 $dSemigroup_a80k
    1 n_a80l
    1 x_a80m
    1 a_a81k
    1 $dNum_a81l
    1 a_a81w
    1 $dFractional_a81x
    1 ds_a81I
    1 a_a81O
    1 r_a81P
  2 KnownBranch
    1 wild_a7YT
    1 wild1_a81Z
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 191, types: 218, coercions: 47, joins: 1/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 730 0}]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7XI
      of
      { (# ipv_a7XL, ipv1_a7XM #) ->
      case ((case ($dNFData_a5Ic
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                           :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
                    f_a29H
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7XL
      of
      { (# ipv_X7Yc, ipv1_X7Ye #) ->
      let {
        duration_a29L :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
        duration_a29L
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Ye ipv1_a7XM } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              " milli seconds -- "#
                              c_a7Zk
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj " pico seconds"# c_a7Zk n_a7Zl)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_a29L
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_a29L 1000000000)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Yc
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 8, types: 6, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 90 0}]
testStimes
  = base-4.13.0.0:Data.Semigroup.Internal.$fSemigroup[]_$cstimes
      @ Char
      @ Word
      GHC.Real.$fIntegralWord
      (ghc-prim-0.6.1:GHC.Types.W# 1000000##)
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YZ) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ "foo"#))

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testIntegralPower
  = ^ @ Integer
      @ Word
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralWord
      3
      (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 70 0}]
testFractionalPower
  = ^^
      @ Double
      @ Word
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralWord
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 85, types: 101, coercions: 16, joins: 1/2}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case measure_s80g
             @ String
             (let {
                r_s823 :: Char -> ()
                [LclId,
                 Arity=1,
                 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                         WorkFree=True, Expandable=True,
                         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
                r_s823
                  = \ (ds_a81I :: Char) ->
                      case ds_a81I of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
                      ghc-prim-0.6.1:GHC.Tuple.()
                      } } in
              (\ (eta_a81Q :: [Char]) ->
                 joinrec {
                   go_a81R [Occ=LoopBreaker] :: [Char] -> ()
                   [LclId[JoinId(1)],
                    Arity=1,
                    Str=<L,U>,
                    Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                            WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 34 10}]
                   go_a81R (ds_a81S :: [Char])
                     = case ds_a81S of {
                         [] -> ghc-prim-0.6.1:GHC.Tuple.();
                         : x_a81W xs_a81X ->
                           case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
                           jump go_a81R xs_a81X
                           }
                       }; } in
                 jump go_a81R eta_a81Q)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "stimes : "#))
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case measure_s80g
             @ Double
             ((\ (ds_a827 :: Double) ->
                 case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 1 : "#))
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case measure_s80g
             @ Double
             ((\ (ds_a827 :: Double) ->
                 case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 2 : "#))
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case measure_s80g
             @ Double
             ((\ (ds_a827 :: Double) ->
                 case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 3 : "#))
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      measure_s80g
        @ Integer
        ((\ (ds_a82i :: Integer) ->
            case ds_a82i of { __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.() })
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        (GHC.Base.build
           @ Char
           (\ (@ b_a7YZ) ->
              ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                @ b_a7YZ "integral power : "#))
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())



==================== Simplifier iteration=1 ====================
2019-11-05 16:48:15.42856905 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     682
  
  152 PreInlineUnconditionally
    22 i_a8hR
    8 s_a7XO
    8 w_a7Yx
    8 w1_a7Yy
    8 w2_a7Yz
    8 ds_a8ih
    8 y_a8ii
    4 $dIntegral_s8el
    3 $dNFData_X8dC
    2 a_a7YV
    2 n_a8eg
    1 $dNFData_X8dy
    1 $dNFData_X8dI
    1 xs_a7Yh
    1 ys_a7Yi
    1 $dIntegral_a80u
    1 eta_a81Q
    1 ds_a827
    1 ds_a82i
    1 x_a8hI
    1 ds_a8iL
    1 y_a8iM
    1 i_a8jl
    1 x_a8jA
    1 ds_a8jG
    1 w_a8mJ
    1 w1_a8mK
    1 w2_a8mL
    1 ww2_a8ns
    1 ds_a8nO
    1 ds1_a8nP
    1 lvl_s8fi
    1 lvl_s8fk
    1 lvl_s8fu
    1 lvl_s8fw
    1 lvl_s8fI
    1 lvl_s8fU
    1 lvl_s8fW
    1 lvl_s8fY
    1 lvl_s8g0
    1 lvl_s8g2
    1 lvl_s8g4
    1 lvl_s8g6
    1 lvl_s8ge
    1 lvl_s8go
    1 lvl_s8gq
    1 lvl_s8gC
    1 lvl_s8gO
    1 lvl_s8gQ
    1 lvl_s8gS
    1 lvl_s8gU
    1 lvl_s8gW
    1 lvl_s8gY
    1 lvl_s8h0
    1 lvl_s8he
    1 lvl_s8hf
    1 lvl_s8hg
    1 lvl_s8hh
    1 lvl_s8hi
    1 lvl_s8hj
    1 lvl_s8hk
    1 lvl_s8hl
    1 lvl_s8ho
    1 lvl_s8hp
    1 lvl_s8hq
    1 lvl_s8hr
    1 lvl_s8hs
    1 lvl_s8ht
    1 lvl_s8hu
    1 lvl_s8hv
    1 lvl_s8hw
    1 lvl_s8hx
    1 lvl_s8hy
    1 lvl_s8hz
    1 lvl_s8hA
    1 lvl_s8hB
    1 lvl_s8hC
    1 lvl_s8hD
    1 lvl_s8hE
    1 lvl_s8hF
    1 lvl_s8hG
    1 lvl_s8hH
  87 PostInlineUnconditionally
    22 wild_a8hS
    8 ww1_a7YD
    8 y#_a8ip
    8 wild2_a8ir
    8 wild3_a8is
    4 ipv_X7Yc
    4 ipv1_X7Ye
    4 ipv_a7XL
    4 ipv1_a7XM
    4 x#_a8il
    1 y#_a8iT
    1 wild2_a8iV
    1 wild3_a8iW
    1 wild_a8jm
    1 ww1_a8mO
    1 ww11_a8n0
    1 ww12_a8n1
    1 ww15_a8n7
    1 ww17_a8n9
    1 ww24_a8nl
    1 ww_a8nq
    1 ww1_a8nr
    1 y#_a8nW
  125 UnfoldingDone
    22 GHC.Num.$fNumWord_$cfromInteger
    9 $dNum1_s8dB
    8 base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
    8 GHC.Real.$fIntegralWord_$cquot
    8 GHC.Show.$fShowInteger_$cshowsPrec
    3 $dNum2_s8fB
    3 $dNum3_s8fN
    3 $dNum2_s8gv
    3 $dNum3_s8gH
    2 $seven_s8eu
    2 $dReal_s8fb
    2 $dNum_s8fd
    2 $dReal_s8fn
    2 $dNum1_s8fp
    2 $dOrd_s8fr
    2 $dReal1_s8fz
    2 $dReal2_s8fL
    2 $dReal_s8g9
    2 $dNum_s8gb
    2 $dReal_s8gh
    2 $dNum1_s8gj
    2 $dOrd_s8gl
    2 $dReal1_s8gt
    2 $dReal2_s8gF
    1 GHC.Real.$fIntegralWord_$crem
    1 GHC.Float.$fFractionalDouble_$crecip
    1 GHC.Float.$fNumDouble_$cfromInteger
    1 base-4.13.0.0:Data.Semigroup.Internal.stimesList
    1 base-4.13.0.0:Data.Semigroup.Internal.$fSemigroup[]_$cstimes
    1 base-4.13.0.0:Data.Semigroup.Internal.$wstimesList
    1 GHC.Num.$fNumInteger_$cfromInteger
    1 GHC.Num.$fNumWord_$c-
    1 GHC.Num.$fNumWord_$cnegate
    1 $dNFData_s8dh
    1 $dNFData_s8dl
    1 $dNFData_s8dr
    1 $dEq_s8ff
    1 $dEq1_s8fh
    1 $dEq_s8ft
    1 $dEq1_s8fD
    1 $dEq2_s8fF
    1 $dEq3_s8fP
    1 $dEq4_s8fR
    1 $dOrd_s8gd
    1 $dEq_s8gn
    1 $dEq1_s8gx
    1 $dEq2_s8gz
    1 $dEq3_s8gJ
    1 $dEq4_s8gL
    1 $dNFData_s8jP
    1 $dNFData_s8jR
    1 $dNFData_s8jU
  125 RuleFired
    24 Class op fromInteger
    22 integerToWord
    12 Class op *
    8 Class op $p1Integral
    8 Class op $p1Real
    8 Class op $p2Real
    8 Class op quot
    7 Class op $p1Ord
    7 Class op ==
    4 SPEC/Main even @ Word
    3 SPEC measure @ Double
    2 Class op <
    2 unpack
    1 ++
    1 Class op $p1Fractional
    1 Class op -
    1 Class op >=
    1 Class op negate
    1 Class op recip
    1 Class op rem
    1 SPEC measure @ Integer
    1 SPEC measure @ String
    1 doubleFromInteger
  4 LetFloatFromLet 4
  112 BetaReduction
    22 i_a8hR
    8 s_a7XO
    8 w_a7Yx
    8 w1_a7Yy
    8 w2_a7Yz
    8 ds_a8ih
    8 y_a8ii
    4 $dIntegral_s8el
    3 $dNFData_X8dC
    2 a_a7YV
    2 n_a8eg
    1 $dNFData_X8dy
    1 $dNFData_X8dI
    1 a_a7Yg
    1 xs_a7Yh
    1 ys_a7Yi
    1 a_a80s
    1 b_a80t
    1 $dIntegral_a80u
    1 eta_a81Q
    1 ds_a827
    1 ds_a82i
    1 x_a8hI
    1 ds_a8iL
    1 y_a8iM
    1 i_a8jl
    1 x_a8jA
    1 ds_a8jG
    1 b_a8mH
    1 a_a8mI
    1 w_a8mJ
    1 w1_a8mK
    1 w2_a8mL
    1 b_a8no
    1 a_a8np
    1 ww_a8nq
    1 ww1_a8nr
    1 ww2_a8ns
    1 w_a8nt
    1 w1_a8nu
    1 ds_a8nO
    1 ds1_a8nP
  68 KnownBranch
    22 wild_a8hS
    8 ww_a7YA
    8 wild1_a8in
    8 wild2_a8ir
    4 ds1_X7Y8
    4 ds1_a7XJ
    4 wild_a8ij
    2 wild_a7UH
    1 wild1_a8iR
    1 wild2_a8iV
    1 wild_a8jm
    1 ww_a8mM
    1 ww10_a8mY
    1 ww14_a8n5
    1 ww23_a8ng
    1 wild1_a8nU
  9 CaseElim
    8 wild3_a8is
    1 wild3_a8iW
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 889, types: 773, coercions: 90, joins: 0/7}

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8h1 :: Integer
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8h1
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Integer
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YZ) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
              @ b_a7YZ "Negative exponent"#))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal2_s8gF :: Real Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal2_s8gF = GHC.Real.$fRealWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum3_s8gH :: Num Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum3_s8gH = GHC.Num.$fNumWord

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gR :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gR = ghc-prim-0.6.1:GHC.Types.W# 2##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gP :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gP = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gT :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gT = ghc-prim-0.6.1:GHC.Types.W# 2##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq3_s8gJ :: Ord Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq3_s8gJ = ghc-prim-0.6.1:GHC.Classes.$fOrdWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq4_s8gL :: Eq Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq4_s8gL = ghc-prim-0.6.1:GHC.Classes.$fEqWord

Rec {
-- RHS size: {terms: 43, types: 9, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 40 0] 332 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case $seven_s8eu y1_a7Wj of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y1_a7Wj lvl_s8gP of {
            False ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                (case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8il ->
                 ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8il 2##)
                 })
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk);
            True ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
          };
        True ->
          g1_s8gN
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
            (case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8il ->
             ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8il 2##)
             })
            z_a7Wk
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal1_s8gt :: Real Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal1_s8gt = GHC.Real.$fRealWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum2_s8gv :: Num Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum2_s8gv = GHC.Num.$fNumWord

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gV :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gV = ghc-prim-0.6.1:GHC.Types.W# 2##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gD :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gD = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gX :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gX = ghc-prim-0.6.1:GHC.Types.W# 2##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq1_s8gx :: Ord Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq1_s8gx = ghc-prim-0.6.1:GHC.Classes.$fOrdWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq2_s8gz :: Eq Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq2_s8gz = ghc-prim-0.6.1:GHC.Classes.$fEqWord

Rec {
-- RHS size: {terms: 37, types: 8, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 40] 262 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case $seven_s8eu y_a7W4 of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y_a7W4 lvl_s8gD of {
            False ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                (case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8il ->
                 ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8il 2##)
                 })
                x_a7W3;
            True -> x_a7W3
          };
        True ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8il ->
             ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8il 2##)
             })
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal_s8gh :: Real Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal_s8gh = GHC.Real.$fRealWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum1_s8gj :: Num Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum1_s8gj = GHC.Num.$fNumWord

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gr :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gr = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gp :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gp = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dOrd_s8gl :: Ord Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dOrd_s8gl = ghc-prim-0.6.1:GHC.Classes.$fOrdWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq_s8gn :: Eq Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq_s8gn = ghc-prim-0.6.1:GHC.Classes.$fEqWord

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.ltWord y0_a7VR lvl_s8gp of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y0_a7VR lvl_s8gr of {
            False -> f_s8gB x0_a7VQ y0_a7VR;
            True -> lvl_s8gZ
          };
        True -> lvl_s8h1
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal_s8g9 :: Real Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal_s8g9 = GHC.Real.$fRealWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_s8gb :: Num Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum_s8gb = GHC.Num.$fNumWord

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gf :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gf = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dOrd_s8gd :: Ord Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dOrd_s8gd = ghc-prim-0.6.1:GHC.Classes.$fOrdWord

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8g7 :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8g7
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YZ) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
              @ b_a7YZ "Negative exponent"#))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal2_s8fL :: Real Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal2_s8fL = GHC.Real.$fRealWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum3_s8fN :: Num Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum3_s8fN = GHC.Num.$fNumWord

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fX :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fX = ghc-prim-0.6.1:GHC.Types.W# 2##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fV = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fZ :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fZ = ghc-prim-0.6.1:GHC.Types.W# 2##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq3_s8fP :: Ord Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq3_s8fP = ghc-prim-0.6.1:GHC.Classes.$fOrdWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq4_s8fR :: Eq Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq4_s8fR = ghc-prim-0.6.1:GHC.Classes.$fEqWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal1_s8fz :: Real Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal1_s8fz = GHC.Real.$fRealWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum2_s8fB :: Num Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum2_s8fB = GHC.Num.$fNumWord

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g1 :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g1 = ghc-prim-0.6.1:GHC.Types.W# 2##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fJ = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g3 :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g3 = ghc-prim-0.6.1:GHC.Types.W# 2##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq1_s8fD :: Ord Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq1_s8fD = ghc-prim-0.6.1:GHC.Classes.$fOrdWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq2_s8fF :: Eq Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq2_s8fF = ghc-prim-0.6.1:GHC.Classes.$fEqWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal_s8fn :: Real Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal_s8fn = GHC.Real.$fRealWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum1_s8fp :: Num Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum1_s8fp = GHC.Num.$fNumWord

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fx :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fx = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fv :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fv = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dOrd_s8fr :: Ord Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dOrd_s8fr = ghc-prim-0.6.1:GHC.Classes.$fOrdWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq_s8ft :: Eq Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq_s8ft = ghc-prim-0.6.1:GHC.Classes.$fEqWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal_s8fb :: Real Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal_s8fb = GHC.Real.$fRealWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_s8fd :: Num Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum_s8fd = GHC.Num.$fNumWord

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fj :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fj = ghc-prim-0.6.1:GHC.Types.W# 2##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fl :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fl = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq_s8ff :: Ord Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq_s8ff = ghc-prim-0.6.1:GHC.Classes.$fOrdWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq1_s8fh :: Eq Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq1_s8fh = ghc-prim-0.6.1:GHC.Classes.$fEqWord

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 51 0}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      ghc-prim-0.6.1:GHC.Classes.eqWord
        (ghc-prim-0.6.1:GHC.Types.W#
           (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
        lvl_s8fl
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum1_s8dB :: Num Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum1_s8dB = GHC.Float.$fNumDouble

Rec {
-- RHS size: {terms: 44, types: 7, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 343 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y1_a7Wj lvl_s8fV of {
            False ->
              g1_s8fT
                (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                (GHC.Float.timesDouble x1_a7Wi z_a7Wk);
            True -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
          };
        True ->
          g1_s8fT
            (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 38, types: 6, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 273 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y_a7W4 lvl_s8fJ of {
            False ->
              g1_s8fT
                (GHC.Float.timesDouble x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                x_a7W3;
            True -> x_a7W3
          };
        True ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.ltWord y0_a7VR lvl_s8fv of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y0_a7VR lvl_s8fx of {
            False -> f_s8fH x0_a7VQ y0_a7VR;
            True -> lvl_s8g5
          };
        True -> lvl_s8g7
      }

-- RHS size: {terms: 34, types: 12, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 192 20}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.geWord n_a7VC lvl_s8gf of {
        False ->
          case ^ @ Double
                 @ Word
                 GHC.Float.$fNumDouble
                 GHC.Real.$fIntegralWord
                 x_a7VB
                 (case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x#_a8jJ ->
                  ghc-prim-0.6.1:GHC.Types.W#
                    (ghc-prim-0.6.1:GHC.Prim.int2Word#
                       (ghc-prim-0.6.1:GHC.Prim.negateInt#
                          (ghc-prim-0.6.1:GHC.Prim.word2Int# x#_a8jJ)))
                  })
          of
          { ghc-prim-0.6.1:GHC.Types.D# y_a8jD ->
          case ghc-prim-0.6.1:GHC.Prim./## 1.0## y_a8jD of wild1_a8jF
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# wild1_a8jF
          }
          };
        True ->
          ^ @ Double
            @ Word
            GHC.Float.$fNumDouble
            GHC.Real.$fIntegralWord
            x_a7VB
            n_a7VC
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$dNFData_s8jP :: Integer -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
$dNFData_s8jP
  = \ (ds_a82i :: Integer) ->
      case ds_a82i of { __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.() }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$dNFData_s8dh :: NFData Integer
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNFData_s8dh
  = $dNFData_s8jP
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
            :: (Integer -> ()) ~R# NFData Integer)

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
$dNFData_s8jR :: Double -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
$dNFData_s8jR
  = \ (ds_a827 :: Double) ->
      case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      ghc-prim-0.6.1:GHC.Tuple.()
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$dNFData_s8dl :: NFData Double
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNFData_s8dl
  = $dNFData_s8jR
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
            :: (Double -> ()) ~R# NFData Double)

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$dNFData_s8jU :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
$dNFData_s8jU = \ (eta_a81Q :: [Char]) -> go_s8f9 eta_a81Q

-- RHS size: {terms: 1, types: 0, coercions: 4, joins: 0/0}
$dNFData_s8dr :: NFData String
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNFData_s8dr
  = $dNFData_s8jU
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
            :: ([Char] -> ()) ~R# NFData [Char])

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 73, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 600 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dt lvl_s8h4)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h2
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_a7YH, ww4_a7YI #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h3 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 72, types: 87, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dn lvl_s8h7)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h5
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_a7YH, ww4_a7YI #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h6 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 72, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dj lvl_s8ha)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h8
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_a7YH, ww4_a7YI #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h9 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 75, types: 90, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 600 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dg lvl_s8hd)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8hb
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_a7YH, ww4_a7YI #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8hc c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w_a8nt :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
w_a8nt = ghc-prim-0.6.1:GHC.Types.W# 1000000##

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 40}]
w1_a8nu
  = GHC.Base.build
      @ Char
      (\ (@ b_a7YZ) ->
         ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ "foo"#)

-- RHS size: {terms: 41, types: 21, coercions: 0, joins: 0/3}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 291 0}]
testStimes
  = case ghc-prim-0.6.1:GHC.Classes.ltWord
           w_a8nt (ghc-prim-0.6.1:GHC.Types.W# 0##)
    of {
      False ->
        let {
          lvl16_a8ny :: Word
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
          lvl16_a8ny = ghc-prim-0.6.1:GHC.Types.W# 1## } in
        let {
          lvl17_a8nB :: Word
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
          lvl17_a8nB = ghc-prim-0.6.1:GHC.Types.W# 0## } in
        letrec {
          rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
          [LclId,
           Arity=1,
           Str=<L,U>,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 151 50}]
          rep_a8nC
            = \ (ds_a8nD :: Word) ->
                case ghc-prim-0.6.1:GHC.Classes.eqWord ds_a8nD lvl17_a8nB of {
                  False ->
                    GHC.Base.augment
                      @ Char
                      (\ (@ b_a7Ym)
                         (c_a7Yn [OS=OneShot] :: Char -> b_a7Ym -> b_a7Ym)
                         (n_a7Yo [OS=OneShot] :: b_a7Ym) ->
                         GHC.Base.foldr @ Char @ b_a7Ym c_a7Yn n_a7Yo w1_a8nu)
                      (rep_a8nC
                         (case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x#_a8nS ->
                          ghc-prim-0.6.1:GHC.Types.W#
                            (ghc-prim-0.6.1:GHC.Prim.minusWord# x#_a8nS 1##)
                          }));
                  True -> ghc-prim-0.6.1:GHC.Types.[] @ Char
                }; } in
        rep_a8nC w_a8nt;
      True -> base-4.13.0.0:Data.Semigroup.Internal.stimesList1 @ Char
    }

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testIntegralPower
  = ^ @ Integer
      @ Word
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralWord
      3
      (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 70 0}]
testFractionalPower
  = ^^
      @ Double
      @ Word
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralWord
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8hn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8hn
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8hn xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 44, types: 66, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "stimes : "#))
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 1 : "#))
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 2 : "#))
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 3 : "#))
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (GHC.Base.build
           @ Char
           (\ (@ b_a7YZ) ->
              ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                @ b_a7YZ "integral power : "#))
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier iteration=2 ====================
2019-11-05 16:48:15.454174786 UTC
  ---- Simplifier counts for Simplifier iteration=2
  Total ticks:     16
  
  4 PreInlineUnconditionally
    2 n_a8eg
    1 y_a7W4
    1 y1_a7Wj
  4 PostInlineUnconditionally 4 x#_a8il
  2 UnfoldingDone 2 $seven_s8eu
  2 BetaReduction 2 n_a8eg
  4 KnownBranch 4 wild_a8ij
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=2
Result size of Simplifier iteration=2
  = {terms: 763, types: 663, coercions: 80, joins: 0/6}

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 70 0}]
testFractionalPower
  = ^^
      @ Double
      @ Word
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralWord
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testIntegralPower
  = ^ @ Integer
      @ Word
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralWord
      3
      (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 40}]
w1_a8nu
  = GHC.Base.build
      @ Char
      (\ (@ b_a7YZ) ->
         ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ "foo"#)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w_a8nt :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
w_a8nt = ghc-prim-0.6.1:GHC.Types.W# 1000000##

-- RHS size: {terms: 38, types: 20, coercions: 0, joins: 0/2}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 271 0}]
testStimes
  = case ghc-prim-0.6.1:GHC.Classes.ltWord
           w_a8nt (ghc-prim-0.6.1:GHC.Types.W# 0##)
    of {
      False ->
        let {
          lvl17_a8nB :: Word
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
          lvl17_a8nB = ghc-prim-0.6.1:GHC.Types.W# 0## } in
        letrec {
          rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
          [LclId,
           Arity=1,
           Str=<L,U>,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 151 50}]
          rep_a8nC
            = \ (ds_a8nD :: Word) ->
                case ghc-prim-0.6.1:GHC.Classes.eqWord ds_a8nD lvl17_a8nB of {
                  False ->
                    GHC.Base.augment
                      @ Char
                      (\ (@ b_a7Ym)
                         (c_a7Yn [OS=OneShot] :: Char -> b_a7Ym -> b_a7Ym)
                         (n_a7Yo [OS=OneShot] :: b_a7Ym) ->
                         GHC.Base.foldr @ Char @ b_a7Ym c_a7Yn n_a7Yo w1_a8nu)
                      (rep_a8nC
                         (case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x#_a8nS ->
                          ghc-prim-0.6.1:GHC.Types.W#
                            (ghc-prim-0.6.1:GHC.Prim.minusWord# x#_a8nS 1##)
                          }));
                  True -> ghc-prim-0.6.1:GHC.Types.[] @ Char
                }; } in
        rep_a8nC w_a8nt;
      True -> base-4.13.0.0:Data.Semigroup.Internal.stimesList1 @ Char
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 72, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dj lvl_s8ha)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h8
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80d, ww4_X80f #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h9 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80d ww4_X80f)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 72, types: 87, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dn lvl_s8h7)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h5
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80j, ww4_X80l #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h6 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80j ww4_X80l)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 73, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 600 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dt lvl_s8h4)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h2
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80r, ww4_X80t #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h3 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80r ww4_X80t)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 75, types: 90, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 600 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dg lvl_s8hd)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8hb
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80v, ww4_X80x #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8hc c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80v ww4_X80x)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 44, types: 66, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "stimes : "#))
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 1 : "#))
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 2 : "#))
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 3 : "#))
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (GHC.Base.build
           @ Char
           (\ (@ b_a7YZ) ->
              ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                @ b_a7YZ "integral power : "#))
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fl :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fl = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 51 0}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      ghc-prim-0.6.1:GHC.Classes.eqWord
        (ghc-prim-0.6.1:GHC.Types.W#
           (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
        lvl_s8fl
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fv :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fv = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fx :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fx = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fJ = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fV = ghc-prim-0.6.1:GHC.Types.W# 1##

Rec {
-- RHS size: {terms: 44, types: 7, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 343 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord wild_a8iN lvl_s8fV of {
            False ->
              g1_s8fT
                (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                (GHC.Float.timesDouble x1_a7Wi z_a7Wk);
            True -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
          };
        True ->
          g1_s8fT
            (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 38, types: 6, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 273 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord wild_a8iN lvl_s8fJ of {
            False ->
              g1_s8fT
                (GHC.Float.timesDouble x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                x_a7W3;
            True -> x_a7W3
          };
        True ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8g7 :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8g7
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YZ) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
              @ b_a7YZ "Negative exponent"#))

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.ltWord y0_a7VR lvl_s8fv of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y0_a7VR lvl_s8fx of {
            False -> f_s8fH x0_a7VQ y0_a7VR;
            True -> lvl_s8g5
          };
        True -> lvl_s8g7
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gf :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gf = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 34, types: 12, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 192 20}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.geWord n_a7VC lvl_s8gf of {
        False ->
          case ^ @ Double
                 @ Word
                 GHC.Float.$fNumDouble
                 GHC.Real.$fIntegralWord
                 x_a7VB
                 (case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x#_a8jJ ->
                  ghc-prim-0.6.1:GHC.Types.W#
                    (ghc-prim-0.6.1:GHC.Prim.int2Word#
                       (ghc-prim-0.6.1:GHC.Prim.negateInt#
                          (ghc-prim-0.6.1:GHC.Prim.word2Int# x#_a8jJ)))
                  })
          of
          { ghc-prim-0.6.1:GHC.Types.D# y_a8jD ->
          case ghc-prim-0.6.1:GHC.Prim./## 1.0## y_a8jD of wild1_a8jF
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# wild1_a8jF
          }
          };
        True ->
          ^ @ Double
            @ Word
            GHC.Float.$fNumDouble
            GHC.Real.$fIntegralWord
            x_a7VB
            n_a7VC
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gp :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gp = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gr :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gr = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gD :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gD = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gP :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gP = ghc-prim-0.6.1:GHC.Types.W# 1##

Rec {
-- RHS size: {terms: 44, types: 7, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 343 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y1_a7Wj lvl_s8gP of {
            False ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk);
            True ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
          };
        True ->
          g1_s8gN
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 38, types: 6, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 273 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y_a7W4 lvl_s8gD of {
            False ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                x_a7W3;
            True -> x_a7W3
          };
        True ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8h1 :: Integer
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8h1
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Integer
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YZ) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
              @ b_a7YZ "Negative exponent"#))

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.ltWord y0_a7VR lvl_s8gp of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y0_a7VR lvl_s8gr of {
            False -> f_s8gB x0_a7VQ y0_a7VR;
            True -> lvl_s8gZ
          };
        True -> lvl_s8h1
      }


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier iteration=3 ====================
2019-11-05 16:48:15.475137017 UTC
  ---- Simplifier counts for Simplifier iteration=3
  Total ticks:     2
  
  2 PreInlineUnconditionally
    1 y_a7W4
    1 y1_a7Wj
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=3
Result size of Simplifier iteration=3
  = {terms: 763, types: 663, coercions: 80, joins: 0/6}

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 70 0}]
testFractionalPower
  = ^^
      @ Double
      @ Word
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralWord
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testIntegralPower
  = ^ @ Integer
      @ Word
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralWord
      3
      (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 40}]
w1_a8nu
  = GHC.Base.build
      @ Char
      (\ (@ b_a7YZ) ->
         ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ "foo"#)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w_a8nt :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
w_a8nt = ghc-prim-0.6.1:GHC.Types.W# 1000000##

-- RHS size: {terms: 38, types: 20, coercions: 0, joins: 0/2}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 271 0}]
testStimes
  = case ghc-prim-0.6.1:GHC.Classes.ltWord
           w_a8nt (ghc-prim-0.6.1:GHC.Types.W# 0##)
    of {
      False ->
        let {
          lvl17_a8nB :: Word
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
          lvl17_a8nB = ghc-prim-0.6.1:GHC.Types.W# 0## } in
        letrec {
          rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
          [LclId,
           Arity=1,
           Str=<L,U>,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 151 50}]
          rep_a8nC
            = \ (ds_a8nD :: Word) ->
                case ghc-prim-0.6.1:GHC.Classes.eqWord ds_a8nD lvl17_a8nB of {
                  False ->
                    GHC.Base.augment
                      @ Char
                      (\ (@ b_a7Ym)
                         (c_a7Yn [OS=OneShot] :: Char -> b_a7Ym -> b_a7Ym)
                         (n_a7Yo [OS=OneShot] :: b_a7Ym) ->
                         GHC.Base.foldr @ Char @ b_a7Ym c_a7Yn n_a7Yo w1_a8nu)
                      (rep_a8nC
                         (case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x#_a8nS ->
                          ghc-prim-0.6.1:GHC.Types.W#
                            (ghc-prim-0.6.1:GHC.Prim.minusWord# x#_a8nS 1##)
                          }));
                  True -> ghc-prim-0.6.1:GHC.Types.[] @ Char
                }; } in
        rep_a8nC w_a8nt;
      True -> base-4.13.0.0:Data.Semigroup.Internal.stimesList1 @ Char
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 72, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dj lvl_s8ha)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h8
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80d, ww4_X80f #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h9 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80d ww4_X80f)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 72, types: 87, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dn lvl_s8h7)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h5
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80j, ww4_X80l #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h6 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80j ww4_X80l)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 73, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 600 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dt lvl_s8h4)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h2
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80r, ww4_X80t #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h3 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80r ww4_X80t)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 75, types: 90, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 600 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dg lvl_s8hd)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8hb
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80v, ww4_X80x #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8hc c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80v ww4_X80x)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 44, types: 66, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "stimes : "#))
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 1 : "#))
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 2 : "#))
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 3 : "#))
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (GHC.Base.build
           @ Char
           (\ (@ b_a7YZ) ->
              ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                @ b_a7YZ "integral power : "#))
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fl :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fl = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 51 0}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      ghc-prim-0.6.1:GHC.Classes.eqWord
        (ghc-prim-0.6.1:GHC.Types.W#
           (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
        lvl_s8fl
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fv :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fv = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fx :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fx = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fJ = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fV = ghc-prim-0.6.1:GHC.Types.W# 1##

Rec {
-- RHS size: {terms: 44, types: 7, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 343 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord wild_a8iN lvl_s8fV of {
            False ->
              g1_s8fT
                (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                (GHC.Float.timesDouble x1_a7Wi z_a7Wk);
            True -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
          };
        True ->
          g1_s8fT
            (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 38, types: 6, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 273 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord wild_a8iN lvl_s8fJ of {
            False ->
              g1_s8fT
                (GHC.Float.timesDouble x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                x_a7W3;
            True -> x_a7W3
          };
        True ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8g7 :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8g7
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YZ) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
              @ b_a7YZ "Negative exponent"#))

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.ltWord y0_a7VR lvl_s8fv of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y0_a7VR lvl_s8fx of {
            False -> f_s8fH x0_a7VQ y0_a7VR;
            True -> lvl_s8g5
          };
        True -> lvl_s8g7
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gf :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gf = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 34, types: 12, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 192 20}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.geWord n_a7VC lvl_s8gf of {
        False ->
          case ^ @ Double
                 @ Word
                 GHC.Float.$fNumDouble
                 GHC.Real.$fIntegralWord
                 x_a7VB
                 (case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x#_a8jJ ->
                  ghc-prim-0.6.1:GHC.Types.W#
                    (ghc-prim-0.6.1:GHC.Prim.int2Word#
                       (ghc-prim-0.6.1:GHC.Prim.negateInt#
                          (ghc-prim-0.6.1:GHC.Prim.word2Int# x#_a8jJ)))
                  })
          of
          { ghc-prim-0.6.1:GHC.Types.D# y_a8jD ->
          case ghc-prim-0.6.1:GHC.Prim./## 1.0## y_a8jD of wild1_a8jF
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# wild1_a8jF
          }
          };
        True ->
          ^ @ Double
            @ Word
            GHC.Float.$fNumDouble
            GHC.Real.$fIntegralWord
            x_a7VB
            n_a7VC
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gp :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gp = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gr :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gr = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gD :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gD = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gP :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gP = ghc-prim-0.6.1:GHC.Types.W# 1##

Rec {
-- RHS size: {terms: 44, types: 7, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 343 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case y1_a7Wj of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord wild_a8iN lvl_s8gP of {
            False ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk);
            True ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
          };
        True ->
          g1_s8gN
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 38, types: 6, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 273 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case y_a7W4 of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord wild_a8iN lvl_s8gD of {
            False ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                x_a7W3;
            True -> x_a7W3
          };
        True ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8h1 :: Integer
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8h1
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Integer
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YZ) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
              @ b_a7YZ "Negative exponent"#))

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.ltWord y0_a7VR lvl_s8gp of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y0_a7VR lvl_s8gr of {
            False -> f_s8gB x0_a7VQ y0_a7VR;
            True -> lvl_s8gZ
          };
        True -> lvl_s8h1
      }


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier iteration=1 ====================
2019-11-05 16:48:15.539076372 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     528
  
  115 PreInlineUnconditionally
    13 ys_a808
    12 g_a7Z2
    12 a_a7Z4
    12 ds_a8i6
    12 ds1_a8i7
    8 sc_a7Yc
    8 sc1_a7Yd
    8 sc2_a7Ye
    4 a_a7Z5
    4 n_a7Z6
    4 n_a7Zl
    3 ds_a8iz
    3 ds1_a8iA
    1 c_a7Yn
    1 n_a7Yo
    1 g_a7Z8
    1 xs_a7Za
    1 ds_a8jp
    1 ds1_a8jq
    1 $dFractional_s8dv
    1 $dIntegral_s8dw
    1 $dNum_s8dG
    1 $dIntegral_s8dH
    1 $dNum_s8ex
    1 $dIntegral_s8ey
  49 PostInlineUnconditionally
    13 xs_a809
    12 y_a8ie
    11 x_a8ia
    4 c_a7Zk
    3 y_a8iH
    1 x_X8ko
    1 x0_a7VQ
    1 y0_a7VR
    1 x_a8iD
    1 y_a8jx
    1 x#_a8nS
  30 UnfoldingDone
    12 GHC.Base.build
    12 ghc-prim-0.6.1:GHC.Classes.eqWord
    3 ghc-prim-0.6.1:GHC.Classes.ltWord
    1 GHC.Base.augment
    1 ghc-prim-0.6.1:GHC.Classes.geWord
    1 $s^_s8eh
  84 RuleFired
    28 tagToEnum#
    13 foldr/app
    12 eqWord#
    12 unpack-list
    8 SC:++0
    4 unpack-append
    3 ltWord#
    1 SPEC/Main ^ @ Double @ Word
    1 SPEC/Main ^ @ Integer @ Word
    1 SPEC/Main ^^ @ Double @ Word
    1 geWord#
  2 LetFloatFromLet 2
  181 BetaReduction
    13 a_a807
    13 ys_a808
    13 xs_a809
    12 a_a7Z1
    12 g_a7Z2
    12 a_a7Z4
    12 ds_a8i6
    12 ds1_a8i7
    8 b_a7Yb
    8 sc_a7Yc
    8 sc1_a7Yd
    8 sc2_a7Ye
    8 b_a7YZ
    4 a_a7Z5
    4 n_a7Z6
    4 b_a7Zj
    4 c_a7Zk
    4 n_a7Zl
    3 ds_a8iz
    3 ds1_a8iA
    1 x0_a7VQ
    1 y0_a7VR
    1 b_a7Ym
    1 c_a7Yn
    1 n_a7Yo
    1 a_a7Z7
    1 g_a7Z8
    1 xs_a7Za
    1 ds_a8jp
    1 ds1_a8jq
    1 $dFractional_s8dv
    1 $dIntegral_s8dw
    1 $dNum_s8dG
    1 $dIntegral_s8dH
    1 $dNum_s8ex
    1 $dIntegral_s8ey
  11 CaseOfCase
    2 wild1_a7VV
    2 wild2_a7W7
    2 wild3_a7Wa
    2 wild4_a7Wl
    2 wild5_a7Wo
    1 wild1_a8nE
  56 KnownBranch
    12 wild1_a8ic
    11 wild_a8i8
    4 wild1_a7VV
    4 wild2_a7W7
    4 wild3_a7Wa
    4 wild4_a7Wl
    4 wild5_a7Wo
    3 wild1_a8iF
    2 wild_a7VS
    2 wild_a8iB
    2 wild1_a8nE
    1 wild_a7VD
    1 wild1_a8jv
    1 wild_a8nw
    1 wild_a8nQ
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 650, types: 568, coercions: 80, joins: 10/14}

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testFractionalPower
  = $s^^_s8f4
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testIntegralPower
  = $s^_s8f5 3 (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w_a8nt :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
w_a8nt = ghc-prim-0.6.1:GHC.Types.W# 1000000##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl17_a8nB :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl17_a8nB = ghc-prim-0.6.1:GHC.Types.W# 0##

Rec {
-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 91 10}]
rep_a8nC
  = \ (ds_a8nD :: Word) ->
      case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x_a8ia ->
      case x_a8ia of {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            (rep_a8nC
               (ghc-prim-0.6.1:GHC.Types.W#
                  (ghc-prim-0.6.1:GHC.Prim.minusWord# x_a8ia 1##)));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
testStimes = rep_a8nC w_a8nt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fl :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fl = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 31 20}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fv :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fv = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fx :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fx = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fJ = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fV = ghc-prim-0.6.1:GHC.Types.W# 1##

Rec {
-- RHS size: {terms: 45, types: 10, coercions: 0, joins: 3/3}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 279 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      join {
        $j_s8s3 :: Double
        [LclId[JoinId(0)]]
        $j_s8s3
          = join {
              $j_s8s1 :: Double
              [LclId[JoinId(0)]]
              $j_s8s1
                = g1_s8fT
                    (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                    (ghc-prim-0.6.1:GHC.Types.W#
                       (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                    (GHC.Float.timesDouble x1_a7Wi z_a7Wk) } in
            case x#_a8iP of {
              __DEFAULT -> jump $j_s8s1;
              1## -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
            } } in
      join {
        $j_s8s4 :: Double
        [LclId[JoinId(0)]]
        $j_s8s4
          = g1_s8fT
              (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
              (ghc-prim-0.6.1:GHC.Types.W#
                 (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
              z_a7Wk } in
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> jump $j_s8s3;
        0## -> jump $j_s8s4
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 37, types: 8, coercions: 0, joins: 2/2}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 207 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      join {
        $j_s8s9 :: Double
        [LclId[JoinId(0)]]
        $j_s8s9
          = join {
              $j_s8s7 :: Double
              [LclId[JoinId(0)]]
              $j_s8s7
                = g1_s8fT
                    (GHC.Float.timesDouble x_a7W3 x_a7W3)
                    (ghc-prim-0.6.1:GHC.Types.W#
                       (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                    x_a7W3 } in
            case x#_a8iP of {
              __DEFAULT -> jump $j_s8s7;
              1## -> x_a7W3
            } } in
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> jump $j_s8s9;
        0## ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8g7 :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8g7
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
      case x_X8ko of {
        __DEFAULT -> f_s8fH x0_a7VQ y0_a7VR;
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gf :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gf = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
      case x_a8jt of {
        __DEFAULT -> f_s8fH x_a7VB n_a7VC;
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gp :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gp = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gr :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gr = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gD :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gD = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gP :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gP = ghc-prim-0.6.1:GHC.Types.W# 1##

Rec {
-- RHS size: {terms: 45, types: 10, coercions: 0, joins: 3/3}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 279 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case y1_a7Wj of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      join {
        $j_s8si :: Integer
        [LclId[JoinId(0)]]
        $j_s8si
          = join {
              $j_s8sg :: Integer
              [LclId[JoinId(0)]]
              $j_s8sg
                = g1_s8gN
                    (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                    (ghc-prim-0.6.1:GHC.Types.W#
                       (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                    (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger
                       x1_a7Wi z_a7Wk) } in
            case x#_a8iP of {
              __DEFAULT -> jump $j_s8sg;
              1## ->
                integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
            } } in
      join {
        $j_s8sj :: Integer
        [LclId[JoinId(0)]]
        $j_s8sj
          = g1_s8gN
              (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
              (ghc-prim-0.6.1:GHC.Types.W#
                 (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
              z_a7Wk } in
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> jump $j_s8si;
        0## -> jump $j_s8sj
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 37, types: 8, coercions: 0, joins: 2/2}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 207 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case y_a7W4 of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      join {
        $j_s8so :: Integer
        [LclId[JoinId(0)]]
        $j_s8so
          = join {
              $j_s8sm :: Integer
              [LclId[JoinId(0)]]
              $j_s8sm
                = g1_s8gN
                    (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                    (ghc-prim-0.6.1:GHC.Types.W#
                       (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                    x_a7W3 } in
            case x#_a8iP of {
              __DEFAULT -> jump $j_s8sm;
              1## -> x_a7W3
            } } in
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> jump $j_s8so;
        0## ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8h1 :: Integer
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8h1
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Integer
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
      case x_X8kz of {
        __DEFAULT -> f_s8gB x0_a7VQ y0_a7VR;
        0## -> lvl_s8gZ
      }
      }


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier iteration=2 ====================
2019-11-05 16:48:15.555940283 UTC
  ---- Simplifier counts for Simplifier iteration=2
  Total ticks:     33
  
  19 PreInlineUnconditionally
    3 y0_a7VR
    2 n_a7VC
    1 x_a7VB
    1 x0_a7VQ
    1 x_a8ia
    1 w_a8nt
    1 $j_s8s1
    1 $j_s8s3
    1 $j_s8s4
    1 $j_s8s7
    1 $j_s8s9
    1 $j_s8sg
    1 $j_s8si
    1 $j_s8sj
    1 $j_s8sm
    1 $j_s8so
  4 PostInlineUnconditionally
    1 x_X8kz
    1 wild_a8iB
    1 wild_a8jr
    1 x_a8jt
  2 UnfoldingDone
    1 $s^^_s8f4
    1 $s^_s8f5
  4 BetaReduction
    1 x_a7VB
    1 n_a7VC
    1 x0_a7VQ
    1 y0_a7VR
  4 KnownBranch
    1 wild_X1S
    1 wild_X23
    1 wild_a8iB
    1 wild_a8jr
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=2
Result size of Simplifier iteration=2
  = {terms: 587, types: 540, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8gN
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
      case x_X8kz of {
        __DEFAULT -> f_s8gB x0_a7VQ wild_a8iB;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                (GHC.Float.timesDouble x1_a7Wi z_a7Wk);
            1## -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8fT
            (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 31 20}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
      case x_X8ko of {
        __DEFAULT -> f_s8fH x0_a7VQ wild_a8iB;
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of wild_a8jr { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
      case x_a8jt of {
        __DEFAULT -> f_s8fH x_a7VB wild_a8jr;
        0## -> lvl_s8g5
      }
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 91 10}]
rep_a8nC
  = \ (ds_a8nD :: Word) ->
      case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x_a8ia ->
      case x_a8ia of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            (rep_a8nC
               (ghc-prim-0.6.1:GHC.Types.W#
                  (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##)));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testStimes = rep_a8nC (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testIntegralPower
  = f_s8gB 3 (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testFractionalPower
  = f_s8fH
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier iteration=3 ====================
2019-11-05 16:48:15.572703725 UTC
  ---- Simplifier counts for Simplifier iteration=3
  Total ticks:     4
  
  4 PreInlineUnconditionally 4 x#_a8iP
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=3
Result size of Simplifier iteration=3
  = {terms: 587, types: 540, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X24 {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##))
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8gN
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X24 {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
      case x_X8kz of {
        __DEFAULT -> f_s8gB x0_a7VQ wild_a8iB;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X1U {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##))
                (GHC.Float.timesDouble x1_a7Wi z_a7Wk);
            1## -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8fT
            (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X1U {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 31 20}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
      case x_X8ko of {
        __DEFAULT -> f_s8fH x0_a7VQ wild_a8iB;
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of wild_a8jr { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
      case x_a8jt of {
        __DEFAULT -> f_s8fH x_a7VB wild_a8jr;
        0## -> lvl_s8g5
      }
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 91 10}]
rep_a8nC
  = \ (ds_a8nD :: Word) ->
      case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x_a8ia ->
      case x_a8ia of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            (rep_a8nC
               (ghc-prim-0.6.1:GHC.Types.W#
                  (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##)));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testStimes = rep_a8nC (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testIntegralPower
  = f_s8gB 3 (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testFractionalPower
  = f_s8fH
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier iteration=1 ====================
2019-11-05 16:48:15.691091801 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     248
  
  65 PreInlineUnconditionally
    7 w_s8xF
    7 w_s8xG
    6 ds_a8j8
    6 ds1_a8j9
    5 w_s8xg
    4 w_s8x8
    4 w_s8xf
    4 w_s8xm
    4 w_s8xn
    4 w_s8xo
    3 w_s8x7
    3 w_s8x9
    3 w_s8y8
    2 y_a7W4
    2 y1_a7Wj
    1 ds_a8nD
  52 PostInlineUnconditionally
    6 x_a8jc
    6 y_a8jg
    6 ww_s8xN
    4 x#_a8iP
    4 ww_s8xj
    3 ww_s8xc
    3 ww_s8xr
    3 ww_s8xv
    3 ww_s8xz
    3 ww_s8xR
    2 z_a7Wk
    2 ww_s8xD
    2 ww_s8xJ
    2 ww_s8yb
    1 x_a7W3
    1 x1_a7Wi
    1 x_a8ia
  24 UnfoldingDone
    6 GHC.Float.timesDouble
    6 f_s8fH
    4 f_s8gB
    3 g1_s8fT
    3 g1_s8gN
    2 rep_a8nC
  52 BetaReduction
    6 ds_a8j8
    6 ds1_a8j9
    6 w_s8xF
    6 w_s8xG
    4 w_s8xf
    4 w_s8xg
    3 w_s8x7
    3 w_s8x8
    3 w_s8x9
    3 w_s8xm
    3 w_s8xn
    3 w_s8xo
    2 w_s8y8
  2 CaseOfCase
    1 ww_s8xC
    1 ww_s8xQ
  49 KnownBranch
    6 wild_a8ja
    6 wild1_a8je
    6 ww_s8xM
    4 wild_a8iN
    4 ww_s8xi
    3 ww_s8xb
    3 ww_s8xq
    3 ww_s8xu
    3 ww_s8xy
    3 ww_s8xC
    3 ww_s8xQ
    2 ww_s8xI
    2 ww_s8ya
    1 wild_a8i8
  4 CaseIdentity
    3 ww_s8xD
    1 ww_s8xR
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 649, types: 586, coercions: 80, joins: 0/7}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/0}
g1_s8gN [InlPrag=NOUSERINLINE[2]]
  :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<S,U><S,U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8x7 [Occ=Once] :: Integer)
                 (w_s8x8 [Occ=Once!] :: Word)
                 (w_s8x9 [Occ=Once] :: Integer) ->
                 case w_s8x8 of { ghc-prim-0.6.1:GHC.Types.W# ww_s8xc [Occ=Once] ->
                 $wg1_s8xe w_s8x7 ww_s8xc w_s8x9
                 }}]
g1_s8gN
  = \ (w_s8x7 :: Integer) (w_s8x8 :: Word) (w_s8x9 :: Integer) ->
      case w_s8x8 of { ghc-prim-0.6.1:GHC.Types.W# ww_s8xc ->
      $wg1_s8xe w_s8x7 ww_s8xc w_s8x9
      }

-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xe [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<S,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 243 0}]
$wg1_s8xe
  = \ (w_s8x7 :: Integer)
      (ww_s8xc :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (w_s8x9 :: Integer) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xc 2## of {
        __DEFAULT ->
          case ww_s8xc of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      }
end Rec }

Rec {
-- RHS size: {terms: 8, types: 4, coercions: 0, joins: 0/0}
f_s8gB [InlPrag=NOUSERINLINE[2]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<S,U><S,U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8xf [Occ=Once] :: Integer)
                 (w_s8xg [Occ=Once!] :: Word) ->
                 case w_s8xg of { ghc-prim-0.6.1:GHC.Types.W# ww_s8xj [Occ=Once] ->
                 $wf_s8xl w_s8xf ww_s8xj
                 }}]
f_s8gB
  = \ (w_s8xf :: Integer) (w_s8xg :: Word) ->
      case w_s8xg of { ghc-prim-0.6.1:GHC.Types.W# ww_s8xj ->
      $wf_s8xl w_s8xf ww_s8xj
      }

-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer
[LclId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 173 0}]
$wf_s8xl
  = \ (w_s8xf :: Integer)
      (ww_s8xj :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xj 2## of {
        __DEFAULT ->
          case ww_s8xj of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once] :: Integer)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
                 case x_X8kz of {
                   __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
                   0## -> lvl_s8gZ
                 }
                 }}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB [Dmd=<L,U(U)>]
      { ghc-prim-0.6.1:GHC.Types.W# x_X8kz [Dmd=<S,U>] ->
      case x_X8kz of {
        __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 20, types: 10, coercions: 0, joins: 0/0}
g1_s8fT [InlPrag=NOUSERINLINE[2]]
  :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<S,U(U)><S,U(U)><S,U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8xm [Occ=Once!] :: Double)
                 (w_s8xn [Occ=Once!] :: Word)
                 (w_s8xo [Occ=Once!] :: Double) ->
                 case w_s8xm of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xr [Occ=Once] ->
                 case w_s8xn of { ghc-prim-0.6.1:GHC.Types.W# ww_s8xv [Occ=Once] ->
                 case w_s8xo of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xz [Occ=Once] ->
                 case $wg1_s8xE ww_s8xr ww_s8xv ww_s8xz of ww_s8xD [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8xD
                 }
                 }
                 }
                 }}]
g1_s8fT
  = \ (w_s8xm :: Double) (w_s8xn :: Word) (w_s8xo :: Double) ->
      case w_s8xm of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xr ->
      case w_s8xn of { ghc-prim-0.6.1:GHC.Types.W# ww_s8xv ->
      case w_s8xo of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xz ->
      case $wg1_s8xE ww_s8xr ww_s8xv ww_s8xz of ww_s8xD { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8xD
      }
      }
      }
      }

-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/2}
$wg1_s8xE [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 31 0] 147 0}]
$wg1_s8xE
  = \ (ww_s8xr :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xv :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (ww_s8xz :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      let {
        x1_a7Wi :: Double
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
        x1_a7Wi = ghc-prim-0.6.1:GHC.Types.D# ww_s8xr } in
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xv 2## of {
        __DEFAULT ->
          case ww_s8xv of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz);
            1## ->
              let {
                ww_s8xD :: ghc-prim-0.6.1:GHC.Prim.Double#
                [LclId,
                 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 1 0}]
                ww_s8xD = ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz } in
              ww_s8xD
          };
        0## ->
          $wg1_s8xE
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      }
end Rec }

Rec {
-- RHS size: {terms: 15, types: 7, coercions: 0, joins: 0/0}
f_s8fH [InlPrag=NOUSERINLINE[2]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<S,U(U)><S,U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8xF [Occ=Once!] :: Double)
                 (w_s8xG [Occ=Once!] :: Word) ->
                 case w_s8xF of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                 case w_s8xG of { ghc-prim-0.6.1:GHC.Types.W# ww_s8xN [Occ=Once] ->
                 case $wf_s8xS ww_s8xJ ww_s8xN of ww_s8xR [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                 }
                 }
                 }}]
f_s8fH
  = \ (w_s8xF :: Double) (w_s8xG :: Word) ->
      case w_s8xF of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
      case w_s8xG of { ghc-prim-0.6.1:GHC.Types.W# ww_s8xN ->
      case $wf_s8xS ww_s8xJ ww_s8xN of ww_s8xR { __DEFAULT ->
      ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
      }
      }
      }

-- RHS size: {terms: 31, types: 5, coercions: 0, joins: 0/1}
$wf_s8xS [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word# -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 135 0}]
$wf_s8xS
  = \ (ww_s8xJ :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xN :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      let {
        x_a7W3 :: Double
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
        x_a7W3 = ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ } in
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xN 2## of {
        __DEFAULT ->
          case ww_s8xN of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8eg [Occ=Once!] :: Word) ->
                 case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP [Occ=Once] ->
                 case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
                   __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
                   0## -> ghc-prim-0.6.1:GHC.Types.True
                 }
                 }}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once!] :: Double)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
                 case x_X8ko of {
                   __DEFAULT ->
                     case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB [Dmd=<L,U(U)>]
      { ghc-prim-0.6.1:GHC.Types.W# x_X8ko [Dmd=<S,U>] ->
      case x_X8ko of {
        __DEFAULT ->
          case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a7VB [Occ=Once!] :: Double)
                 (n_a7VC [Occ=Once!] :: Word) ->
                 case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
                 case x_a8jt of {
                   __DEFAULT ->
                     case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of wild_a8jr [Dmd=<L,U(U)>]
      { ghc-prim-0.6.1:GHC.Types.W# x_a8jt [Dmd=<S,U>] ->
      case x_a8jt of {
        __DEFAULT ->
          case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W [Dmd=<S,H>] xs_a81X [Dmd=<S,U>] ->
          case x_a81W of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L [Dmd=<L,A>] ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82a [Dmd=<L,A>], y_X82c [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82g [Dmd=<L,A>], y_X82i [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82i [Dmd=<L,A>], y_X82k [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82p [Dmd=<L,A>], y_X82r [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s80g
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
rep_a8nC [InlPrag=NOUSERINLINE[2]] :: Word -> [Char]
[LclId,
 Arity=1,
 Str=<S(S),U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8y8 [Occ=Once!] :: Word) ->
                 case w_s8y8 of
                 { ghc-prim-0.6.1:GHC.Types.W# ww_s8yb [Occ=Once, Dmd=<S,1*U>] ->
                 $wrep_s8yd ww_s8yb
                 }}]
rep_a8nC
  = \ (w_s8y8 :: Word) ->
      case w_s8y8 of
      { ghc-prim-0.6.1:GHC.Types.W# ww_s8yb [Dmd=<S,1*U>] ->
      $wrep_s8yd ww_s8yb
      }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$wrep_s8yd [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Word# -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 71 10}]
$wrep_s8yd
  = \ (ww_s8yb :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ww_s8yb of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            ($wrep_s8yd (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
testStimes = $wrep_s8yd 1000000##

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
testIntegralPower = $wf_s8xl 3 1000000##

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $wf_s8xS 5.0## 441## of ww_s8xR { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
    }

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G [Dmd=<L,A>] #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 [Dmd=<L,A>] #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e [Dmd=<L,A>] #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j [Dmd=<L,A>] #) ->
      $smeasure_s8dk
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82n
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82n
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8cX
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier iteration=2 ====================
2019-11-05 16:48:15.710005989 UTC
  ---- Simplifier counts for Simplifier iteration=2
  Total ticks:     4
  
  4 PreInlineUnconditionally
    1 x_X8ko
    1 x_X8kz
    1 x_a8jt
    1 ww_s8xD
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=2
Result size of Simplifier iteration=2
  = {terms: 577, types: 537, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xe [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<S,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 243 0}]
$wg1_s8xe
  = \ (w_s8x7 :: Integer)
      (ww_s8xc :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (w_s8x9 :: Integer) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xc 2## of {
        __DEFAULT ->
          case ww_s8xc of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer
[LclId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 173 0}]
$wf_s8xl
  = \ (w_s8xf :: Integer)
      (ww_s8xj :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xj 2## of {
        __DEFAULT ->
          case ww_s8xj of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once] :: Integer)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
                 case x_X8kz of {
                   __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
                   0## -> lvl_s8gZ
                 }
                 }}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz [Dmd=<S,U>] ->
      case x_X8kz of wild_X23 [Dmd=<L,A>] {
        __DEFAULT -> $wf_s8xl x0_a7VQ wild_X23;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xE [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 31 0] 127 0}]
$wg1_s8xE
  = \ (ww_s8xr :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xv :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (ww_s8xz :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xv 2## of {
        __DEFAULT ->
          case ww_s8xv of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz);
            1## -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz
          };
        0## ->
          $wg1_s8xE
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xS [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word# -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 115 0}]
$wf_s8xS
  = \ (ww_s8xJ :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xN :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xN 2## of {
        __DEFAULT ->
          case ww_s8xN of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8eg [Occ=Once!] :: Word) ->
                 case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP [Occ=Once] ->
                 case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
                   __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
                   0## -> ghc-prim-0.6.1:GHC.Types.True
                 }
                 }}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once!] :: Double)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
                 case x_X8ko of {
                   __DEFAULT ->
                     case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko [Dmd=<S,U>] ->
      case x_X8ko of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ wild_X1S of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a7VB [Occ=Once!] :: Double)
                 (n_a7VC [Occ=Once!] :: Word) ->
                 case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
                 case x_a8jt of {
                   __DEFAULT ->
                     case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt [Dmd=<S,U>] ->
      case x_a8jt of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ wild_X1S of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W [Dmd=<S,H>] xs_a81X [Dmd=<S,U>] ->
          case x_a81W of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L [Dmd=<L,A>] ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82a [Dmd=<L,A>], y_X82c [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82g [Dmd=<L,A>], y_X82i [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82i [Dmd=<L,A>], y_X82k [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82p [Dmd=<L,A>], y_X82r [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s80g
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$wrep_s8yd [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Word# -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 71 10}]
$wrep_s8yd
  = \ (ww_s8yb :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ww_s8yb of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            ($wrep_s8yd (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
testStimes = $wrep_s8yd 1000000##

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
testIntegralPower = $wf_s8xl 3 1000000##

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $wf_s8xS 5.0## 441## of ww_s8xR { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
    }

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G [Dmd=<L,A>] #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 [Dmd=<L,A>] #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e [Dmd=<L,A>] #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j [Dmd=<L,A>] #) ->
      $smeasure_s8dk
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82n
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82n
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8cX
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier iteration=1 ====================
2019-11-05 16:48:15.81511337 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     11
  
  7 PreInlineUnconditionally
    1 x_X8ko
    1 x_X8kz
    1 ww_s8xc
    1 ww_s8xj
    1 ww_s8xv
    1 ww_s8xN
    1 ww_s8yb
  1 UnfoldingDone 1 main
  3 FillInCaseDefault
    2 wild_a7UH
    1 wild_a81T
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 561, types: 538, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xe [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<S,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 243 0}]
$wg1_s8xe
  = \ (w_s8x7 :: Integer)
      (ww_s8xc :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (w_s8x9 :: Integer) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xc 2## of {
        __DEFAULT ->
          case ww_s8xc of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer
[LclId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 173 0}]
$wf_s8xl
  = \ (w_s8xf :: Integer)
      (ww_s8xj :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xj 2## of {
        __DEFAULT ->
          case ww_s8xj of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once] :: Integer)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
                 case x_X8kz of {
                   __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
                   0## -> lvl_s8gZ
                 }
                 }}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz [Dmd=<S,U>] ->
      case x_X8kz of wild_X23 [Dmd=<L,A>] {
        __DEFAULT -> $wf_s8xl x0_a7VQ wild_X23;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xE [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 31 0] 127 0}]
$wg1_s8xE
  = \ (ww_s8xr :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xv :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (ww_s8xz :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xv 2## of {
        __DEFAULT ->
          case ww_s8xv of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz);
            1## -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz
          };
        0## ->
          $wg1_s8xE
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xS [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word# -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 115 0}]
$wf_s8xS
  = \ (ww_s8xJ :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xN :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xN 2## of {
        __DEFAULT ->
          case ww_s8xN of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8eg [Occ=Once!] :: Word) ->
                 case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP [Occ=Once] ->
                 case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
                   __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
                   0## -> ghc-prim-0.6.1:GHC.Types.True
                 }
                 }}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once!] :: Double)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
                 case x_X8ko of {
                   __DEFAULT ->
                     case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko [Dmd=<S,U>] ->
      case x_X8ko of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ wild_X1S of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a7VB [Occ=Once!] :: Double)
                 (n_a7VC [Occ=Once!] :: Word) ->
                 case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
                 case x_a8jt of {
                   __DEFAULT ->
                     case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^^_s8f4 = $s^_s8eh

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W [Dmd=<S,H>] xs_a81X [Dmd=<S,U>] ->
          case x_a81W of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L [Dmd=<L,A>] ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C0 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82a [Dmd=<L,A>], y_X82c [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80r ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82g [Dmd=<L,A>], y_X82i [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80j ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82i [Dmd=<L,A>], y_X82k [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80d ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82p [Dmd=<L,A>], y_X82r [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80v ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s80g
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$wrep_s8yd [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Word# -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 71 10}]
$wrep_s8yd
  = \ (ww_s8yb :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ww_s8yb of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            ($wrep_s8yd (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
testStimes = $wrep_s8yd 1000000##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8C4 = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = $wf_s8xl lvl_s8C4 1000000##

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $wf_s8xS 5.0## 441## of ww_s8xR { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cd :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8Cd = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ce :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Ce = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8Cb = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cc :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Cc = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8C9 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ca :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Ca = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C7 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8C7 = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C8 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C8 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8C5 = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C6 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C6 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C5

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6 lvl_s8C6 testStimes s_a81C of
      { (# ipv_a81F, ipv1_a81G [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8C8 testFractionalPower ipv_a81F of
      { (# ipv_X827, ipv1_X829 [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Ca testFractionalPower ipv_X827 of
      { (# ipv_X82c, ipv1_X82e [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Cc testFractionalPower ipv_X82c of
      { (# ipv_X82h, ipv1_X82j [Dmd=<L,A>] #) ->
      $smeasure_s8dk lvl_s8Ce testIntegralPower ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82n
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82n
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8cX
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier iteration=1 ====================
2019-11-05 16:48:15.874237272 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     11
  
  7 PreInlineUnconditionally
    1 x_X8ko
    1 x_X8kz
    1 ww_s8xc
    1 ww_s8xj
    1 ww_s8xv
    1 ww_s8xN
    1 ww_s8yb
  1 UnfoldingDone 1 main
  3 FillInCaseDefault
    2 wild_a7UH
    1 wild_a81T
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 561, types: 538, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xe [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<S,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 243 0}]
$wg1_s8xe
  = \ (w_s8x7 :: Integer)
      (ww_s8xc :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (w_s8x9 :: Integer) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xc 2## of {
        __DEFAULT ->
          case ww_s8xc of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer
[LclId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 173 0}]
$wf_s8xl
  = \ (w_s8xf :: Integer)
      (ww_s8xj :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xj 2## of {
        __DEFAULT ->
          case ww_s8xj of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once] :: Integer)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
                 case x_X8kz of {
                   __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
                   0## -> lvl_s8gZ
                 }
                 }}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz [Dmd=<S,U>] ->
      case x_X8kz of wild_X23 [Dmd=<L,A>] {
        __DEFAULT -> $wf_s8xl x0_a7VQ wild_X23;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xE [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 31 0] 127 0}]
$wg1_s8xE
  = \ (ww_s8xr :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xv :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (ww_s8xz :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xv 2## of {
        __DEFAULT ->
          case ww_s8xv of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz);
            1## -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz
          };
        0## ->
          $wg1_s8xE
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xS [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word# -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 115 0}]
$wf_s8xS
  = \ (ww_s8xJ :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xN :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xN 2## of {
        __DEFAULT ->
          case ww_s8xN of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8eg [Occ=Once!] :: Word) ->
                 case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP [Occ=Once] ->
                 case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
                   __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
                   0## -> ghc-prim-0.6.1:GHC.Types.True
                 }
                 }}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once!] :: Double)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
                 case x_X8ko of {
                   __DEFAULT ->
                     case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko [Dmd=<S,U>] ->
      case x_X8ko of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ wild_X1S of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a7VB [Occ=Once!] :: Double)
                 (n_a7VC [Occ=Once!] :: Word) ->
                 case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
                 case x_a8jt of {
                   __DEFAULT ->
                     case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^^_s8f4 = $s^_s8eh

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W [Dmd=<S,H>] xs_a81X [Dmd=<S,U>] ->
          case x_a81W of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L [Dmd=<L,A>] ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C0 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82a [Dmd=<L,A>], y_X82c [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80r ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82g [Dmd=<L,A>], y_X82i [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80j ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82i [Dmd=<L,A>], y_X82k [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80d ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82p [Dmd=<L,A>], y_X82r [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80v ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s80g
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$wrep_s8yd [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Word# -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 71 10}]
$wrep_s8yd
  = \ (ww_s8yb :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ww_s8yb of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            ($wrep_s8yd (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
testStimes = $wrep_s8yd 1000000##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8C4 = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = $wf_s8xl lvl_s8C4 1000000##

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $wf_s8xS 5.0## 441## of ww_s8xR { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cd :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8Cd = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ce :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Ce = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8Cb = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cc :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Cc = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8C9 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ca :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Ca = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C7 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8C7 = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C8 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C8 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8C5 = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C6 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C6 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C5

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6 lvl_s8C6 testStimes s_a81C of
      { (# ipv_a81F, ipv1_a81G [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8C8 testFractionalPower ipv_a81F of
      { (# ipv_X827, ipv1_X829 [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Ca testFractionalPower ipv_X827 of
      { (# ipv_X82c, ipv1_X82e [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Cc testFractionalPower ipv_X82c of
      { (# ipv_X82h, ipv1_X82j [Dmd=<L,A>] #) ->
      $smeasure_s8dk lvl_s8Ce testIntegralPower ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82n
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82n
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8cX
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5

