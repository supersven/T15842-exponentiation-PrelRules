
==================== Simplifier ====================
2019-11-05 16:48:15.296452771 UTC
  Max iterations = 4
  SimplMode {Phase = InitialPhase [Gentle],
             inline,
             rules,
             eta-expand,
             no case-of-case}
Result size of Simplifier
  = {terms: 185, types: 213, coercions: 47, joins: 1/2}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 730 0}]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7XI
      of
      { (# ipv_a7XL, ipv1_a7XM #) ->
      case ((case ($dNFData_a5Ic
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                           :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
                    f_a29H
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7XL
      of
      { (# ipv_X7Yc, ipv1_X7Ye #) ->
      let {
        duration_a29L :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
        duration_a29L
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Ye ipv1_a7XM } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              " milli seconds -- "#
                              c_a7Zk
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj " pico seconds"# c_a7Zk n_a7Zl)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_a29L
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_a29L 1000000000)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Yc
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 8, types: 6, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 90 0}]
testStimes
  = base-4.13.0.0:Data.Semigroup.Internal.$fSemigroup[]_$cstimes
      @ Char
      @ Word
      GHC.Real.$fIntegralWord
      (ghc-prim-0.6.1:GHC.Types.W# 1000000##)
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YZ) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ "foo"#))

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testIntegralPower
  = ^ @ Integer
      @ Word
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralWord
      3
      (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 70 0}]
testFractionalPower
  = ^^
      @ Double
      @ Word
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralWord
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 79, types: 96, coercions: 16, joins: 1/1}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case measure_s80g
             @ String
             ((\ (eta_a81Q :: [Char]) ->
                 joinrec {
                   go_a81R [Occ=LoopBreaker] :: [Char] -> ()
                   [LclId[JoinId(1)],
                    Arity=1,
                    Str=<L,U>,
                    Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                            WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 34 10}]
                   go_a81R (ds_a81S :: [Char])
                     = case ds_a81S of {
                         [] -> ghc-prim-0.6.1:GHC.Tuple.();
                         : x_a81W xs_a81X ->
                           case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
                           jump go_a81R xs_a81X
                           }
                       }; } in
                 jump go_a81R eta_a81Q)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "stimes : "#))
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case measure_s80g
             @ Double
             ((\ (ds_a827 :: Double) ->
                 case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 1 : "#))
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case measure_s80g
             @ Double
             ((\ (ds_a827 :: Double) ->
                 case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 2 : "#))
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case measure_s80g
             @ Double
             ((\ (ds_a827 :: Double) ->
                 case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
                 ghc-prim-0.6.1:GHC.Tuple.()
                 })
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 3 : "#))
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      measure_s80g
        @ Integer
        ((\ (ds_a82i :: Integer) ->
            case ds_a82i of { __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.() })
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        (GHC.Base.build
           @ Char
           (\ (@ b_a7YZ) ->
              ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                @ b_a7YZ "integral power : "#))
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())



==================== Levels added: ====================
2019-11-05 16:48:15.364607852 UTC

<$dNFData_s8dr,<0,0>>
<$dNFData_s8dr,<0,0>>
  = (\ <eta_a81Q,<1,0>> ->
       letrec {
         <go_s8f9,F<0,0>>
         <go_s8f9,F<0,0>>
           = \ <ds_a81S,<1,0>> ->
               case ds_a81S of <wild_a81T,<1,2>> {
                 [] -> GHC.Tuple.();
                 : <x_a81W,<1,2>> <xs_a81X,<1,2>> ->
                   case x_a81W of <ds1_a81J,<1,3>> { GHC.Types.C# <ipv_a81L,<1,3>> ->
                   go_s8f9 xs_a81X
                   }
               }; } in
       go_s8f9 eta_a81Q)
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[GHC.Types.Char]>_N)
            :: ([GHC.Types.Char] -> ())
               ~R# Control.DeepSeq.NFData [GHC.Types.Char]);
<$dNFData_s8dl,<0,0>>
<$dNFData_s8dl,<0,0>>
  = (\ <ds_a827,<1,0>> ->
       case ds_a827 of <ds1_a828,<1,2>> { GHC.Types.D# <ipv_a82a,<1,2>> ->
       GHC.Tuple.()
       })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
            :: (GHC.Types.Double -> ())
               ~R# Control.DeepSeq.NFData GHC.Types.Double);
<$dNFData_s8dh,<0,0>>
<$dNFData_s8dh,<0,0>>
  = (\ <ds_a82i,<1,0>> ->
       case ds_a82i of <ds1_a82j,<1,2>> { __DEFAULT -> GHC.Tuple.() })
    `cast` (Sym (Control.DeepSeq.N:NFData[0]
                     <GHC.Integer.Type.Integer>_N)
            :: (GHC.Integer.Type.Integer -> ())
               ~R# Control.DeepSeq.NFData GHC.Integer.Type.Integer);
<$dNum1_s8dB,<0,0>>
<$dNum1_s8dB,<0,0>>
  = GHC.Real.$p1Fractional
      @ GHC.Types.Double GHC.Float.$fFractionalDouble;
<$seven_s8eu,<0,0>>
<$seven_s8eu,<0,0>>
  = let {
      <$dReal_s8fb,F<0,0>>
      <$dReal_s8fb,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Types.Word GHC.Real.$fIntegralWord } in
    let {
      <$dNum_s8fd,F<0,0>>
      <$dNum_s8fd,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Types.Word $dReal_s8fb } in
    let {
      <$dEq_s8ff,F<0,0>>
      <$dEq_s8ff,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Types.Word $dReal_s8fb } in
    let {
      <$dEq1_s8fh,F<0,0>>
      <$dEq1_s8fh,F<0,0>>
        = GHC.Classes.$p1Ord @ GHC.Types.Word $dEq_s8ff } in
    \ <n_a8eg,<1,0>> ->
      GHC.Classes.==
        @ GHC.Types.Word
        $dEq1_s8fh
        (GHC.Real.rem
           @ GHC.Types.Word
           GHC.Real.$fIntegralWord
           n_a8eg
           (let {
              <lvl_s8fj,F<0,0>>
              <lvl_s8fj,F<0,0>>
                = GHC.Num.fromInteger
                    @ GHC.Types.Word
                    $dNum_s8fd
                    (let {
                       <lvl_s8fi,F<0,0>>
                       <lvl_s8fi,F<0,0>> = 2 } in
                     lvl_s8fi) } in
            lvl_s8fj))
        (let {
           <lvl_s8fl,F<0,0>>
           <lvl_s8fl,F<0,0>>
             = GHC.Num.fromInteger
                 @ GHC.Types.Word
                 $dNum_s8fd
                 (let {
                    <lvl_s8fk,F<0,0>>
                    <lvl_s8fk,F<0,0>> = 0 } in
                  lvl_s8fk) } in
         lvl_s8fl);
<$s^_s8eh,<0,0>>
<$s^_s8eh,<0,0>>
  = let {
      <$dReal_s8fn,F<0,0>>
      <$dReal_s8fn,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Types.Word GHC.Real.$fIntegralWord } in
    let {
      <$dNum1_s8fp,F<0,0>>
      <$dNum1_s8fp,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Types.Word $dReal_s8fn } in
    let {
      <$dOrd_s8fr,F<0,0>>
      <$dOrd_s8fr,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Types.Word $dReal_s8fn } in
    let {
      <$dEq_s8ft,F<0,0>>
      <$dEq_s8ft,F<0,0>>
        = GHC.Classes.$p1Ord @ GHC.Types.Word $dOrd_s8fr } in
    \ <x0_a7VQ,<1,0>> <y0_a7VR,<1,0>> ->
      case GHC.Classes.<
             @ GHC.Types.Word
             $dOrd_s8fr
             y0_a7VR
             (let {
                <lvl_s8fv,F<0,0>>
                <lvl_s8fv,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Types.Word
                      $dNum1_s8fp
                      (let {
                         <lvl_s8fu,F<0,0>>
                         <lvl_s8fu,F<0,0>> = 0 } in
                       lvl_s8fu) } in
              lvl_s8fv)
      of <wild_a7VS,<1,2>> {
        GHC.Types.False ->
          case GHC.Classes.==
                 @ GHC.Types.Word
                 $dEq_s8ft
                 y0_a7VR
                 (let {
                    <lvl_s8fx,F<0,0>>
                    <lvl_s8fx,F<0,0>>
                      = GHC.Num.fromInteger
                          @ GHC.Types.Word
                          $dNum1_s8fp
                          (let {
                             <lvl_s8fw,F<0,0>>
                             <lvl_s8fw,F<0,0>> = 0 } in
                           lvl_s8fw) } in
                  lvl_s8fx)
          of <wild1_a7VV,<1,3>> {
            GHC.Types.False ->
              let {
                <$dReal1_s8fz,F<0,0>>
                <$dReal1_s8fz,F<0,0>>
                  = GHC.Real.$p1Integral
                      @ GHC.Types.Word GHC.Real.$fIntegralWord } in
              let {
                <$dNum2_s8fB,F<0,0>>
                <$dNum2_s8fB,F<0,0>>
                  = GHC.Real.$p1Real @ GHC.Types.Word $dReal1_s8fz } in
              let {
                <$dEq1_s8fD,F<0,0>>
                <$dEq1_s8fD,F<0,0>>
                  = GHC.Real.$p2Real @ GHC.Types.Word $dReal1_s8fz } in
              let {
                <$dEq2_s8fF,F<0,0>>
                <$dEq2_s8fF,F<0,0>>
                  = GHC.Classes.$p1Ord @ GHC.Types.Word $dEq1_s8fD } in
              letrec {
                <f_s8fH,F<0,0>>
                <f_s8fH,F<0,0>>
                  = \ <x_a7W3,<1,0>> <y_a7W4,<1,0>> ->
                      case GHC.Real.even @ GHC.Types.Word GHC.Real.$fIntegralWord y_a7W4
                      of <wild2_a7W7,<1,2>> {
                        GHC.Types.False ->
                          case GHC.Classes.==
                                 @ GHC.Types.Word
                                 $dEq2_s8fF
                                 y_a7W4
                                 (let {
                                    <lvl_s8fJ,F<0,0>>
                                    <lvl_s8fJ,F<0,0>>
                                      = GHC.Num.fromInteger
                                          @ GHC.Types.Word
                                          $dNum2_s8fB
                                          (let {
                                             <lvl_s8fI,F<0,0>>
                                             <lvl_s8fI,F<0,0>> = 1 } in
                                           lvl_s8fI) } in
                                  lvl_s8fJ)
                          of <wild3_a7Wa,<1,3>> {
                            GHC.Types.False ->
                              let {
                                <$dReal2_s8fL,F<0,0>>
                                <$dReal2_s8fL,F<0,0>>
                                  = GHC.Real.$p1Integral
                                      @ GHC.Types.Word GHC.Real.$fIntegralWord } in
                              let {
                                <$dNum3_s8fN,F<0,0>>
                                <$dNum3_s8fN,F<0,0>>
                                  = GHC.Real.$p1Real @ GHC.Types.Word $dReal2_s8fL } in
                              let {
                                <$dEq3_s8fP,F<0,0>>
                                <$dEq3_s8fP,F<0,0>>
                                  = GHC.Real.$p2Real @ GHC.Types.Word $dReal2_s8fL } in
                              let {
                                <$dEq4_s8fR,F<0,0>>
                                <$dEq4_s8fR,F<0,0>>
                                  = GHC.Classes.$p1Ord @ GHC.Types.Word $dEq3_s8fP } in
                              letrec {
                                <g1_s8fT,F<0,0>>
                                <g1_s8fT,F<0,0>>
                                  = \ <x1_a7Wi,<1,0>> <y1_a7Wj,<1,0>> <z_a7Wk,<1,0>> ->
                                      case GHC.Real.even
                                             @ GHC.Types.Word GHC.Real.$fIntegralWord y1_a7Wj
                                      of <wild4_a7Wl,<1,2>> {
                                        GHC.Types.False ->
                                          case GHC.Classes.==
                                                 @ GHC.Types.Word
                                                 $dEq4_s8fR
                                                 y1_a7Wj
                                                 (let {
                                                    <lvl_s8fV,F<0,0>>
                                                    <lvl_s8fV,F<0,0>>
                                                      = GHC.Num.fromInteger
                                                          @ GHC.Types.Word
                                                          $dNum3_s8fN
                                                          (let {
                                                             <lvl_s8fU,F<0,0>>
                                                             <lvl_s8fU,F<0,0>> = 1 } in
                                                           lvl_s8fU) } in
                                                  lvl_s8fV)
                                          of <wild5_a7Wo,<1,3>> {
                                            GHC.Types.False ->
                                              g1_s8fT
                                                (GHC.Num.*
                                                   @ GHC.Types.Double $dNum1_s8dB x1_a7Wi x1_a7Wi)
                                                (GHC.Real.quot
                                                   @ GHC.Types.Word
                                                   GHC.Real.$fIntegralWord
                                                   y1_a7Wj
                                                   (let {
                                                      <lvl_s8fX,F<0,0>>
                                                      <lvl_s8fX,F<0,0>>
                                                        = GHC.Num.fromInteger
                                                            @ GHC.Types.Word
                                                            $dNum3_s8fN
                                                            (let {
                                                               <lvl_s8fW,F<0,0>>
                                                               <lvl_s8fW,F<0,0>> = 2 } in
                                                             lvl_s8fW) } in
                                                    lvl_s8fX))
                                                (GHC.Num.*
                                                   @ GHC.Types.Double $dNum1_s8dB x1_a7Wi z_a7Wk);
                                            GHC.Types.True ->
                                              GHC.Num.*
                                                @ GHC.Types.Double $dNum1_s8dB x1_a7Wi z_a7Wk
                                          };
                                        GHC.Types.True ->
                                          g1_s8fT
                                            (GHC.Num.*
                                               @ GHC.Types.Double $dNum1_s8dB x1_a7Wi x1_a7Wi)
                                            (GHC.Real.quot
                                               @ GHC.Types.Word
                                               GHC.Real.$fIntegralWord
                                               y1_a7Wj
                                               (let {
                                                  <lvl_s8fZ,F<0,0>>
                                                  <lvl_s8fZ,F<0,0>>
                                                    = GHC.Num.fromInteger
                                                        @ GHC.Types.Word
                                                        $dNum3_s8fN
                                                        (let {
                                                           <lvl_s8fY,F<0,0>>
                                                           <lvl_s8fY,F<0,0>> = 2 } in
                                                         lvl_s8fY) } in
                                                lvl_s8fZ))
                                            z_a7Wk
                                      }; } in
                              g1_s8fT
                                (GHC.Num.* @ GHC.Types.Double $dNum1_s8dB x_a7W3 x_a7W3)
                                (GHC.Real.quot
                                   @ GHC.Types.Word
                                   GHC.Real.$fIntegralWord
                                   y_a7W4
                                   (let {
                                      <lvl_s8g1,F<0,0>>
                                      <lvl_s8g1,F<0,0>>
                                        = GHC.Num.fromInteger
                                            @ GHC.Types.Word
                                            $dNum2_s8fB
                                            (let {
                                               <lvl_s8g0,F<0,0>>
                                               <lvl_s8g0,F<0,0>> = 2 } in
                                             lvl_s8g0) } in
                                    lvl_s8g1))
                                x_a7W3;
                            GHC.Types.True -> x_a7W3
                          };
                        GHC.Types.True ->
                          f_s8fH
                            (GHC.Num.* @ GHC.Types.Double $dNum1_s8dB x_a7W3 x_a7W3)
                            (GHC.Real.quot
                               @ GHC.Types.Word
                               GHC.Real.$fIntegralWord
                               y_a7W4
                               (let {
                                  <lvl_s8g3,F<0,0>>
                                  <lvl_s8g3,F<0,0>>
                                    = GHC.Num.fromInteger
                                        @ GHC.Types.Word
                                        $dNum2_s8fB
                                        (let {
                                           <lvl_s8g2,F<0,0>>
                                           <lvl_s8g2,F<0,0>> = 2 } in
                                         lvl_s8g2) } in
                                lvl_s8g3))
                      }; } in
              f_s8fH x0_a7VQ y0_a7VR;
            GHC.Types.True ->
              let {
                <lvl_s8g5,F<0,0>>
                <lvl_s8g5,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Types.Double
                      $dNum1_s8dB
                      (let {
                         <lvl_s8g4,F<0,0>>
                         <lvl_s8g4,F<0,0>> = 1 } in
                       lvl_s8g4) } in
              lvl_s8g5
          };
        GHC.Types.True ->
          let {
            <lvl_s8g7,F<0,0>>
            <lvl_s8g7,F<0,0>>
              = GHC.Err.errorWithoutStackTrace
                  @ 'GHC.Types.LiftedRep
                  @ GHC.Types.Double
                  (GHC.CString.unpackCString#
                     (let {
                        <lvl_s8g6,F<0,0>>
                        <lvl_s8g6,F<0,0>> = "Negative exponent"# } in
                      lvl_s8g6)) } in
          lvl_s8g7
      };
<$s^^_s8f4,<0,0>>
<$s^^_s8f4,<0,0>>
  = let {
      <$dReal_s8g9,F<0,0>>
      <$dReal_s8g9,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Types.Word GHC.Real.$fIntegralWord } in
    let {
      <$dNum_s8gb,F<0,0>>
      <$dNum_s8gb,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Types.Word $dReal_s8g9 } in
    let {
      <$dOrd_s8gd,F<0,0>>
      <$dOrd_s8gd,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Types.Word $dReal_s8g9 } in
    \ <x_a7VB,<1,0>> <n_a7VC,<1,0>> ->
      case GHC.Classes.>=
             @ GHC.Types.Word
             $dOrd_s8gd
             n_a7VC
             (let {
                <lvl_s8gf,F<0,0>>
                <lvl_s8gf,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Types.Word
                      $dNum_s8gb
                      (let {
                         <lvl_s8ge,F<0,0>>
                         <lvl_s8ge,F<0,0>> = 0 } in
                       lvl_s8ge) } in
              lvl_s8gf)
      of <wild_a7VD,<1,2>> {
        GHC.Types.False ->
          GHC.Real.recip
            @ GHC.Types.Double
            GHC.Float.$fFractionalDouble
            (GHC.Real.^
               @ GHC.Types.Double
               @ GHC.Types.Word
               $dNum1_s8dB
               GHC.Real.$fIntegralWord
               x_a7VB
               (GHC.Num.negate @ GHC.Types.Word $dNum_s8gb n_a7VC));
        GHC.Types.True ->
          GHC.Real.^
            @ GHC.Types.Double
            @ GHC.Types.Word
            $dNum1_s8dB
            GHC.Real.$fIntegralWord
            x_a7VB
            n_a7VC
      };
<$s^_s8f5,<0,0>>
<$s^_s8f5,<0,0>>
  = let {
      <$dReal_s8gh,F<0,0>>
      <$dReal_s8gh,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Types.Word GHC.Real.$fIntegralWord } in
    let {
      <$dNum1_s8gj,F<0,0>>
      <$dNum1_s8gj,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Types.Word $dReal_s8gh } in
    let {
      <$dOrd_s8gl,F<0,0>>
      <$dOrd_s8gl,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Types.Word $dReal_s8gh } in
    let {
      <$dEq_s8gn,F<0,0>>
      <$dEq_s8gn,F<0,0>>
        = GHC.Classes.$p1Ord @ GHC.Types.Word $dOrd_s8gl } in
    \ <x0_a7VQ,<1,0>> <y0_a7VR,<1,0>> ->
      case GHC.Classes.<
             @ GHC.Types.Word
             $dOrd_s8gl
             y0_a7VR
             (let {
                <lvl_s8gp,F<0,0>>
                <lvl_s8gp,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Types.Word
                      $dNum1_s8gj
                      (let {
                         <lvl_s8go,F<0,0>>
                         <lvl_s8go,F<0,0>> = 0 } in
                       lvl_s8go) } in
              lvl_s8gp)
      of <wild_a7VS,<1,2>> {
        GHC.Types.False ->
          case GHC.Classes.==
                 @ GHC.Types.Word
                 $dEq_s8gn
                 y0_a7VR
                 (let {
                    <lvl_s8gr,F<0,0>>
                    <lvl_s8gr,F<0,0>>
                      = GHC.Num.fromInteger
                          @ GHC.Types.Word
                          $dNum1_s8gj
                          (let {
                             <lvl_s8gq,F<0,0>>
                             <lvl_s8gq,F<0,0>> = 0 } in
                           lvl_s8gq) } in
                  lvl_s8gr)
          of <wild1_a7VV,<1,3>> {
            GHC.Types.False ->
              let {
                <$dReal1_s8gt,F<0,0>>
                <$dReal1_s8gt,F<0,0>>
                  = GHC.Real.$p1Integral
                      @ GHC.Types.Word GHC.Real.$fIntegralWord } in
              let {
                <$dNum2_s8gv,F<0,0>>
                <$dNum2_s8gv,F<0,0>>
                  = GHC.Real.$p1Real @ GHC.Types.Word $dReal1_s8gt } in
              let {
                <$dEq1_s8gx,F<0,0>>
                <$dEq1_s8gx,F<0,0>>
                  = GHC.Real.$p2Real @ GHC.Types.Word $dReal1_s8gt } in
              let {
                <$dEq2_s8gz,F<0,0>>
                <$dEq2_s8gz,F<0,0>>
                  = GHC.Classes.$p1Ord @ GHC.Types.Word $dEq1_s8gx } in
              letrec {
                <f_s8gB,F<0,0>>
                <f_s8gB,F<0,0>>
                  = \ <x_a7W3,<1,0>> <y_a7W4,<1,0>> ->
                      case GHC.Real.even @ GHC.Types.Word GHC.Real.$fIntegralWord y_a7W4
                      of <wild2_a7W7,<1,2>> {
                        GHC.Types.False ->
                          case GHC.Classes.==
                                 @ GHC.Types.Word
                                 $dEq2_s8gz
                                 y_a7W4
                                 (let {
                                    <lvl_s8gD,F<0,0>>
                                    <lvl_s8gD,F<0,0>>
                                      = GHC.Num.fromInteger
                                          @ GHC.Types.Word
                                          $dNum2_s8gv
                                          (let {
                                             <lvl_s8gC,F<0,0>>
                                             <lvl_s8gC,F<0,0>> = 1 } in
                                           lvl_s8gC) } in
                                  lvl_s8gD)
                          of <wild3_a7Wa,<1,3>> {
                            GHC.Types.False ->
                              let {
                                <$dReal2_s8gF,F<0,0>>
                                <$dReal2_s8gF,F<0,0>>
                                  = GHC.Real.$p1Integral
                                      @ GHC.Types.Word GHC.Real.$fIntegralWord } in
                              let {
                                <$dNum3_s8gH,F<0,0>>
                                <$dNum3_s8gH,F<0,0>>
                                  = GHC.Real.$p1Real @ GHC.Types.Word $dReal2_s8gF } in
                              let {
                                <$dEq3_s8gJ,F<0,0>>
                                <$dEq3_s8gJ,F<0,0>>
                                  = GHC.Real.$p2Real @ GHC.Types.Word $dReal2_s8gF } in
                              let {
                                <$dEq4_s8gL,F<0,0>>
                                <$dEq4_s8gL,F<0,0>>
                                  = GHC.Classes.$p1Ord @ GHC.Types.Word $dEq3_s8gJ } in
                              letrec {
                                <g1_s8gN,F<0,0>>
                                <g1_s8gN,F<0,0>>
                                  = \ <x1_a7Wi,<1,0>> <y1_a7Wj,<1,0>> <z_a7Wk,<1,0>> ->
                                      case GHC.Real.even
                                             @ GHC.Types.Word GHC.Real.$fIntegralWord y1_a7Wj
                                      of <wild4_a7Wl,<1,2>> {
                                        GHC.Types.False ->
                                          case GHC.Classes.==
                                                 @ GHC.Types.Word
                                                 $dEq4_s8gL
                                                 y1_a7Wj
                                                 (let {
                                                    <lvl_s8gP,F<0,0>>
                                                    <lvl_s8gP,F<0,0>>
                                                      = GHC.Num.fromInteger
                                                          @ GHC.Types.Word
                                                          $dNum3_s8gH
                                                          (let {
                                                             <lvl_s8gO,F<0,0>>
                                                             <lvl_s8gO,F<0,0>> = 1 } in
                                                           lvl_s8gO) } in
                                                  lvl_s8gP)
                                          of <wild5_a7Wo,<1,3>> {
                                            GHC.Types.False ->
                                              g1_s8gN
                                                (GHC.Num.*
                                                   @ GHC.Integer.Type.Integer
                                                   GHC.Num.$fNumInteger
                                                   x1_a7Wi
                                                   x1_a7Wi)
                                                (GHC.Real.quot
                                                   @ GHC.Types.Word
                                                   GHC.Real.$fIntegralWord
                                                   y1_a7Wj
                                                   (let {
                                                      <lvl_s8gR,F<0,0>>
                                                      <lvl_s8gR,F<0,0>>
                                                        = GHC.Num.fromInteger
                                                            @ GHC.Types.Word
                                                            $dNum3_s8gH
                                                            (let {
                                                               <lvl_s8gQ,F<0,0>>
                                                               <lvl_s8gQ,F<0,0>> = 2 } in
                                                             lvl_s8gQ) } in
                                                    lvl_s8gR))
                                                (GHC.Num.*
                                                   @ GHC.Integer.Type.Integer
                                                   GHC.Num.$fNumInteger
                                                   x1_a7Wi
                                                   z_a7Wk);
                                            GHC.Types.True ->
                                              GHC.Num.*
                                                @ GHC.Integer.Type.Integer
                                                GHC.Num.$fNumInteger
                                                x1_a7Wi
                                                z_a7Wk
                                          };
                                        GHC.Types.True ->
                                          g1_s8gN
                                            (GHC.Num.*
                                               @ GHC.Integer.Type.Integer
                                               GHC.Num.$fNumInteger
                                               x1_a7Wi
                                               x1_a7Wi)
                                            (GHC.Real.quot
                                               @ GHC.Types.Word
                                               GHC.Real.$fIntegralWord
                                               y1_a7Wj
                                               (let {
                                                  <lvl_s8gT,F<0,0>>
                                                  <lvl_s8gT,F<0,0>>
                                                    = GHC.Num.fromInteger
                                                        @ GHC.Types.Word
                                                        $dNum3_s8gH
                                                        (let {
                                                           <lvl_s8gS,F<0,0>>
                                                           <lvl_s8gS,F<0,0>> = 2 } in
                                                         lvl_s8gS) } in
                                                lvl_s8gT))
                                            z_a7Wk
                                      }; } in
                              g1_s8gN
                                (GHC.Num.*
                                   @ GHC.Integer.Type.Integer GHC.Num.$fNumInteger x_a7W3 x_a7W3)
                                (GHC.Real.quot
                                   @ GHC.Types.Word
                                   GHC.Real.$fIntegralWord
                                   y_a7W4
                                   (let {
                                      <lvl_s8gV,F<0,0>>
                                      <lvl_s8gV,F<0,0>>
                                        = GHC.Num.fromInteger
                                            @ GHC.Types.Word
                                            $dNum2_s8gv
                                            (let {
                                               <lvl_s8gU,F<0,0>>
                                               <lvl_s8gU,F<0,0>> = 2 } in
                                             lvl_s8gU) } in
                                    lvl_s8gV))
                                x_a7W3;
                            GHC.Types.True -> x_a7W3
                          };
                        GHC.Types.True ->
                          f_s8gB
                            (GHC.Num.*
                               @ GHC.Integer.Type.Integer GHC.Num.$fNumInteger x_a7W3 x_a7W3)
                            (GHC.Real.quot
                               @ GHC.Types.Word
                               GHC.Real.$fIntegralWord
                               y_a7W4
                               (let {
                                  <lvl_s8gX,F<0,0>>
                                  <lvl_s8gX,F<0,0>>
                                    = GHC.Num.fromInteger
                                        @ GHC.Types.Word
                                        $dNum2_s8gv
                                        (let {
                                           <lvl_s8gW,F<0,0>>
                                           <lvl_s8gW,F<0,0>> = 2 } in
                                         lvl_s8gW) } in
                                lvl_s8gX))
                      }; } in
              f_s8gB x0_a7VQ y0_a7VR;
            GHC.Types.True ->
              let {
                <lvl_s8gZ,F<0,0>>
                <lvl_s8gZ,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Integer.Type.Integer
                      GHC.Num.$fNumInteger
                      (let {
                         <lvl_s8gY,F<0,0>>
                         <lvl_s8gY,F<0,0>> = 1 } in
                       lvl_s8gY) } in
              lvl_s8gZ
          };
        GHC.Types.True ->
          let {
            <lvl_s8h1,F<0,0>>
            <lvl_s8h1,F<0,0>>
              = GHC.Err.errorWithoutStackTrace
                  @ 'GHC.Types.LiftedRep
                  @ GHC.Integer.Type.Integer
                  (GHC.CString.unpackCString#
                     (let {
                        <lvl_s8h0,F<0,0>>
                        <lvl_s8h0,F<0,0>> = "Negative exponent"# } in
                      lvl_s8h0)) } in
          lvl_s8h1
      };
<$trModule_s7Xa,<0,0>>
<$trModule_s7Xa,<0,0>> = "main"#
<$trModule_s7Xb,<0,0>>
<$trModule_s7Xb,<0,0>> = GHC.Types.TrNameS $trModule_s7Xa
<$trModule_s7Xc,<0,0>>
<$trModule_s7Xc,<0,0>> = "Main"#
<$trModule_s7Xd,<0,0>>
<$trModule_s7Xd,<0,0>> = GHC.Types.TrNameS $trModule_s7Xc
<Main.$trModule,<0,0>>
<Main.$trModule,<0,0>>
  = GHC.Types.Module $trModule_s7Xb $trModule_s7Xd
<$smeasure_s8f6,<0,0>>
<$smeasure_s8f6,<0,0>>
  = \ <description_a29G,<1,0>> <f_a29H,<1,0>> <s_a7XI,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7XI
      of <ds1_a7XJ,<1,2>>
      { (# <ipv_a7XL,<1,2>>, <ipv1_a7XM,<1,2>> #) ->
      case ((case ($dNFData_s8dr
                   `cast` (Control.DeepSeq.N:NFData[0] <GHC.Base.String>_N
                           :: Control.DeepSeq.NFData GHC.Base.String
                              ~R# (GHC.Base.String -> ())))
                    f_a29H
             of <wild_a7UH,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7XL
      of <ds1_X7Y8,<1,3>>
      { (# <ipv_X7Yc,<1,3>>, <ipv1_X7Ye,<1,3>> #) ->
      let {
        <duration_s8dt,<1,4>>
        <duration_s8dt,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7Ye ipv1_a7XM } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7Zj,<1,7>> <c_a7Zk,<1,7>> <n_a7Zl,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7Zj
                        c_a7Zk
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7Zj
                           c_a7Zk
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              (let {
                                 <lvl_s8h2,F<0,0>>
                                 <lvl_s8h2,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8h2)
                              c_a7Zk
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj
                                    (let {
                                       <lvl_s8h3,F<0,0>>
                                       <lvl_s8h3,F<0,0>> = " pico seconds"# } in
                                     lvl_s8h3)
                                    c_a7Zk
                                    n_a7Zl)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dt
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8dt
                                 (let {
                                    <lvl_s8h4,F<0,0>>
                                    <lvl_s8h4,F<0,0>> = 1000000000 } in
                                  lvl_s8h4))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a29G))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7Yc
      }
      }
<$smeasure_s8do,<0,0>>
<$smeasure_s8do,<0,0>>
  = \ <description_a29G,<1,0>> <f_a29H,<1,0>> <s_a7XI,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7XI
      of <ds1_a7XJ,<1,2>>
      { (# <ipv_a7XL,<1,2>>, <ipv1_a7XM,<1,2>> #) ->
      case ((case ($dNFData_s8dl
                   `cast` (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N
                           :: Control.DeepSeq.NFData GHC.Types.Double
                              ~R# (GHC.Types.Double -> ())))
                    f_a29H
             of <wild_a7UH,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7XL
      of <ds1_X7Y8,<1,3>>
      { (# <ipv_X7Yc,<1,3>>, <ipv1_X7Ye,<1,3>> #) ->
      let {
        <duration_s8dn,<1,4>>
        <duration_s8dn,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7Ye ipv1_a7XM } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7Zj,<1,7>> <c_a7Zk,<1,7>> <n_a7Zl,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7Zj
                        c_a7Zk
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7Zj
                           c_a7Zk
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              (let {
                                 <lvl_s8h5,F<0,0>>
                                 <lvl_s8h5,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8h5)
                              c_a7Zk
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj
                                    (let {
                                       <lvl_s8h6,F<0,0>>
                                       <lvl_s8h6,F<0,0>> = " pico seconds"# } in
                                     lvl_s8h6)
                                    c_a7Zk
                                    n_a7Zl)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dn
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8dn
                                 (let {
                                    <lvl_s8h7,F<0,0>>
                                    <lvl_s8h7,F<0,0>> = 1000000000 } in
                                  lvl_s8h7))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a29G))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7Yc
      }
      }
<$smeasure_s8dk,<0,0>>
<$smeasure_s8dk,<0,0>>
  = \ <description_a29G,<1,0>> <f_a29H,<1,0>> <s_a7XI,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7XI
      of <ds1_a7XJ,<1,2>>
      { (# <ipv_a7XL,<1,2>>, <ipv1_a7XM,<1,2>> #) ->
      case ((case ($dNFData_s8dh
                   `cast` (Control.DeepSeq.N:NFData[0] <GHC.Integer.Type.Integer>_N
                           :: Control.DeepSeq.NFData GHC.Integer.Type.Integer
                              ~R# (GHC.Integer.Type.Integer -> ())))
                    f_a29H
             of <wild_a7UH,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7XL
      of <ds1_X7Y8,<1,3>>
      { (# <ipv_X7Yc,<1,3>>, <ipv1_X7Ye,<1,3>> #) ->
      let {
        <duration_s8dj,<1,4>>
        <duration_s8dj,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7Ye ipv1_a7XM } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7Zj,<1,7>> <c_a7Zk,<1,7>> <n_a7Zl,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7Zj
                        c_a7Zk
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7Zj
                           c_a7Zk
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              (let {
                                 <lvl_s8h8,F<0,0>>
                                 <lvl_s8h8,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8h8)
                              c_a7Zk
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj
                                    (let {
                                       <lvl_s8h9,F<0,0>>
                                       <lvl_s8h9,F<0,0>> = " pico seconds"# } in
                                     lvl_s8h9)
                                    c_a7Zk
                                    n_a7Zl)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dj
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8dj
                                 (let {
                                    <lvl_s8ha,F<0,0>>
                                    <lvl_s8ha,F<0,0>> = 1000000000 } in
                                  lvl_s8ha))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a29G))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7Yc
      }
      }
<measure_s80g,<0,0>>
<measure_s80g,<0,0>>
  = \ <a_a5Ia,<1,0>>
      <$dNFData_a5Ic,<1,0>>
      <description_a29G,<1,0>>
      <f_a29H,<1,0>>
      <s_a7XI,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7XI
      of <ds1_a7XJ,<1,2>>
      { (# <ipv_a7XL,<1,2>>, <ipv1_a7XM,<1,2>> #) ->
      case ((case ($dNFData_a5Ic
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                           :: Control.DeepSeq.NFData a_a5Ia ~R# (a_a5Ia -> ())))
                    f_a29H
             of <wild_a7UH,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7XL
      of <ds1_X7Y8,<1,3>>
      { (# <ipv_X7Yc,<1,3>>, <ipv1_X7Ye,<1,3>> #) ->
      let {
        <duration_s8dg,<1,4>>
        <duration_s8dg,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7Ye ipv1_a7XM } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7Zj,<1,7>> <c_a7Zk,<1,7>> <n_a7Zl,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7Zj
                        c_a7Zk
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7Zj
                           c_a7Zk
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              (let {
                                 <lvl_s8hb,F<0,0>>
                                 <lvl_s8hb,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8hb)
                              c_a7Zk
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj
                                    (let {
                                       <lvl_s8hc,F<0,0>>
                                       <lvl_s8hc,F<0,0>> = " pico seconds"# } in
                                     lvl_s8hc)
                                    c_a7Zk
                                    n_a7Zl)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dg
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8dg
                                 (let {
                                    <lvl_s8hd,F<0,0>>
                                    <lvl_s8hd,F<0,0>> = 1000000000 } in
                                  lvl_s8hd))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a29G))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7Yc
      }
      }
<Main.measure,<0,0>>
<Main.measure,<0,0>>
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <Control.DeepSeq.NFData a>_R
            ->_R <GHC.Base.String>_R
            ->_R <a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Control.DeepSeq.NFData a
                -> GHC.Base.String
                -> a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# (forall a.
                    Control.DeepSeq.NFData a
                    -> GHC.Base.String -> a -> GHC.Types.IO ()))
<Main.testStimes,<0,0>>
<Main.testStimes,<0,0>>
  = Data.Semigroup.Internal.$fSemigroup[]_$cstimes
      @ GHC.Types.Char
      @ GHC.Types.Word
      GHC.Real.$fIntegralWord
      (let {
         <lvl_s8he,F<0,0>>
         <lvl_s8he,F<0,0>> = GHC.Types.W# 1000000## } in
       lvl_s8he)
      (let {
         <lvl_s8hh,F<0,0>>
         <lvl_s8hh,F<0,0>>
           = GHC.Base.build
               @ GHC.Types.Char
               (let {
                  <lvl_s8hg,F<0,0>>
                  <lvl_s8hg,F<0,0>>
                    = \ <b_a7YZ,<0,1>> ->
                        GHC.CString.unpackFoldrCString#
                          @ b_a7YZ
                          (let {
                             <lvl_s8hf,F<0,0>>
                             <lvl_s8hf,F<0,0>> = "foo"# } in
                           lvl_s8hf) } in
                lvl_s8hg) } in
       lvl_s8hh)
<Main.testIntegralPower,<0,0>>
<Main.testIntegralPower,<0,0>>
  = GHC.Real.^
      @ GHC.Integer.Type.Integer
      @ GHC.Types.Word
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralWord
      (let {
         <lvl_s8hi,F<0,0>>
         <lvl_s8hi,F<0,0>> = 3 } in
       lvl_s8hi)
      (let {
         <lvl_s8hj,F<0,0>>
         <lvl_s8hj,F<0,0>> = GHC.Types.W# 1000000## } in
       lvl_s8hj)
<Main.testFractionalPower,<0,0>>
<Main.testFractionalPower,<0,0>>
  = GHC.Real.^^
      @ GHC.Types.Double
      @ GHC.Types.Word
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralWord
      (let {
         <lvl_s8hk,F<0,0>>
         <lvl_s8hk,F<0,0>> = GHC.Types.D# 5.0## } in
       lvl_s8hk)
      (let {
         <lvl_s8hl,F<0,0>>
         <lvl_s8hl,F<0,0>> = GHC.Types.W# 441## } in
       lvl_s8hl)
<main_s82n,<0,0>>
<main_s82n,<0,0>>
  = \ <s_a81C,<0,1>> ->
      case measure_s80g
             @ GHC.Base.String
             ((let {
                 <lvl_s8ho,F<0,0>>
                 <lvl_s8ho,F<0,0>>
                   = \ <eta_a81Q,<1,0>> ->
                       letrec {
                         <go_s8hn,F<0,0>>
                         <go_s8hn,F<0,0>>
                           = \ <ds_a81S,<1,0>> ->
                               case ds_a81S of <wild_a81T,<1,2>> {
                                 [] -> GHC.Tuple.();
                                 : <x_a81W,<1,2>> <xs_a81X,<1,2>> ->
                                   case x_a81W of <ds1_a81J,<1,3>>
                                   { GHC.Types.C# <ipv_a81L,<1,3>> ->
                                   go_s8hn xs_a81X
                                   }
                               }; } in
                       go_s8hn eta_a81Q } in
               lvl_s8ho)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[GHC.Types.Char]>_N)
                      :: ([GHC.Types.Char] -> ())
                         ~R# Control.DeepSeq.NFData [GHC.Types.Char]))
             (let {
                <lvl_s8hr,F<0,0>>
                <lvl_s8hr,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8hq,F<0,0>>
                         <lvl_s8hq,F<0,0>>
                           = \ <b_a7YZ,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7YZ
                                 (let {
                                    <lvl_s8hp,F<0,0>>
                                    <lvl_s8hp,F<0,0>> = "stimes : "# } in
                                  lvl_s8hp) } in
                       lvl_s8hq) } in
              lvl_s8hr)
             Main.testStimes
             s_a81C
      of <ds1_a81D,<0,3>>
      { (# <ipv_a81F,<0,3>>, <ipv1_a81G,<0,3>> #) ->
      case measure_s80g
             @ GHC.Types.Double
             ((let {
                 <lvl_s8hs,F<0,0>>
                 <lvl_s8hs,F<0,0>>
                   = \ <ds_a827,<1,0>> ->
                       case ds_a827 of <ds1_a828,<1,2>> { GHC.Types.D# <ipv_a82a,<1,2>> ->
                       GHC.Tuple.()
                       } } in
               lvl_s8hs)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8hv,F<0,0>>
                <lvl_s8hv,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8hu,F<0,0>>
                         <lvl_s8hu,F<0,0>>
                           = \ <b_a7YZ,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7YZ
                                 (let {
                                    <lvl_s8ht,F<0,0>>
                                    <lvl_s8ht,F<0,0>> = "fractional power 1 : "# } in
                                  lvl_s8ht) } in
                       lvl_s8hu) } in
              lvl_s8hv)
             Main.testFractionalPower
             ipv_a81F
      of <ds1_X823,<0,4>>
      { (# <ipv_X827,<0,4>>, <ipv1_X829,<0,4>> #) ->
      case measure_s80g
             @ GHC.Types.Double
             ((let {
                 <lvl_s8hw,F<0,0>>
                 <lvl_s8hw,F<0,0>>
                   = \ <ds_a827,<1,0>> ->
                       case ds_a827 of <ds1_a828,<1,2>> { GHC.Types.D# <ipv_a82a,<1,2>> ->
                       GHC.Tuple.()
                       } } in
               lvl_s8hw)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8hz,F<0,0>>
                <lvl_s8hz,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8hy,F<0,0>>
                         <lvl_s8hy,F<0,0>>
                           = \ <b_a7YZ,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7YZ
                                 (let {
                                    <lvl_s8hx,F<0,0>>
                                    <lvl_s8hx,F<0,0>> = "fractional power 2 : "# } in
                                  lvl_s8hx) } in
                       lvl_s8hy) } in
              lvl_s8hz)
             Main.testFractionalPower
             ipv_X827
      of <ds1_X828,<0,5>>
      { (# <ipv_X82c,<0,5>>, <ipv1_X82e,<0,5>> #) ->
      case measure_s80g
             @ GHC.Types.Double
             ((let {
                 <lvl_s8hA,F<0,0>>
                 <lvl_s8hA,F<0,0>>
                   = \ <ds_a827,<1,0>> ->
                       case ds_a827 of <ds1_a828,<1,2>> { GHC.Types.D# <ipv_a82a,<1,2>> ->
                       GHC.Tuple.()
                       } } in
               lvl_s8hA)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8hD,F<0,0>>
                <lvl_s8hD,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8hC,F<0,0>>
                         <lvl_s8hC,F<0,0>>
                           = \ <b_a7YZ,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7YZ
                                 (let {
                                    <lvl_s8hB,F<0,0>>
                                    <lvl_s8hB,F<0,0>> = "fractional power 3 : "# } in
                                  lvl_s8hB) } in
                       lvl_s8hC) } in
              lvl_s8hD)
             Main.testFractionalPower
             ipv_X82c
      of <ds1_X82d,<0,6>>
      { (# <ipv_X82h,<0,6>>, <ipv1_X82j,<0,6>> #) ->
      measure_s80g
        @ GHC.Integer.Type.Integer
        ((let {
            <lvl_s8hE,F<0,0>>
            <lvl_s8hE,F<0,0>>
              = \ <ds_a82i,<1,0>> ->
                  case ds_a82i of <ds1_a82j,<1,2>> { __DEFAULT -> GHC.Tuple.() } } in
          lvl_s8hE)
         `cast` (Sym (Control.DeepSeq.N:NFData[0]
                          <GHC.Integer.Type.Integer>_N)
                 :: (GHC.Integer.Type.Integer -> ())
                    ~R# Control.DeepSeq.NFData GHC.Integer.Type.Integer))
        (let {
           <lvl_s8hH,F<0,0>>
           <lvl_s8hH,F<0,0>>
             = GHC.Base.build
                 @ GHC.Types.Char
                 (let {
                    <lvl_s8hG,F<0,0>>
                    <lvl_s8hG,F<0,0>>
                      = \ <b_a7YZ,<0,1>> ->
                          GHC.CString.unpackFoldrCString#
                            @ b_a7YZ
                            (let {
                               <lvl_s8hF,F<0,0>>
                               <lvl_s8hF,F<0,0>> = "integral power : "# } in
                             lvl_s8hF) } in
                  lvl_s8hG) } in
         lvl_s8hH)
        Main.testIntegralPower
        ipv_X82h
      }
      }
      }
      }
<Main.main,<0,0>>
<Main.main,<0,0>>
  = main_s82n
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())
<main_s8cX,<0,0>>
<main_s8cX,<0,0>>
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# GHC.Types.IO ()))
<:Main.main,<0,0>>
<:Main.main,<0,0>>
  = main_s8cX
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())


==================== Float out(FOS {Lam = Just 0, Consts = True, OverSatApps = False}) ====================
2019-11-05 16:48:15.38124149 UTC

Result size of Float out(FOS {Lam = Just 0,
                              Consts = True,
                              OverSatApps = False})
  = {terms: 932, types: 763, coercions: 84, joins: 0/4}

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<L,U>]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }

-- RHS size: {terms: 3, types: 2, coercions: 4, joins: 0/0}
$dNFData_s8dr :: NFData String
[LclId]
$dNFData_s8dr
  = (\ (eta_a81Q :: [Char]) -> go_s8f9 eta_a81Q)
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
            :: ([Char] -> ()) ~R# NFData [Char])

-- RHS size: {terms: 5, types: 3, coercions: 3, joins: 0/0}
$dNFData_s8dl :: NFData Double
[LclId]
$dNFData_s8dl
  = (\ (ds_a827 :: Double) ->
       case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
       ghc-prim-0.6.1:GHC.Tuple.()
       })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
            :: (Double -> ()) ~R# NFData Double)

-- RHS size: {terms: 5, types: 2, coercions: 3, joins: 0/0}
$dNFData_s8dh :: NFData Integer
[LclId]
$dNFData_s8dh
  = (\ (ds_a82i :: Integer) ->
       case ds_a82i of { __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.() })
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
            :: (Integer -> ()) ~R# NFData Integer)

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8dB [Occ=OnceL*] :: Num Double
[LclId]
$dNum1_s8dB
  = GHC.Real.$p1Fractional @ Double GHC.Float.$fFractionalDouble

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8fb :: Real Word
[LclId]
$dReal_s8fb = GHC.Real.$p1Integral @ Word GHC.Real.$fIntegralWord

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum_s8fd :: Num Word
[LclId]
$dNum_s8fd = GHC.Real.$p1Real @ Word $dReal_s8fb

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq_s8ff [Occ=OnceL] :: Ord Word
[LclId]
$dEq_s8ff = GHC.Real.$p2Real @ Word $dReal_s8fb

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq1_s8fh [Occ=OnceL] :: Eq Word
[LclId]
$dEq1_s8fh = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Word $dEq_s8ff

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fi :: Integer
[LclId]
lvl_s8fi = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fj :: Word
[LclId]
lvl_s8fj = fromInteger @ Word $dNum_s8fd lvl_s8fi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fk :: Integer
[LclId]
lvl_s8fk = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fl :: Word
[LclId]
lvl_s8fl = fromInteger @ Word $dNum_s8fd lvl_s8fk

-- RHS size: {terms: 8, types: 3, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId, Arity=1]
$seven_s8eu
  = \ (n_a8eg [Occ=Once] :: Word) ->
      ==
        @ Word
        $dEq1_s8fh
        (rem @ Word GHC.Real.$fIntegralWord n_a8eg lvl_s8fj)
        lvl_s8fl

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8fn :: Real Word
[LclId]
$dReal_s8fn = GHC.Real.$p1Integral @ Word GHC.Real.$fIntegralWord

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8fp :: Num Word
[LclId]
$dNum1_s8fp = GHC.Real.$p1Real @ Word $dReal_s8fn

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dOrd_s8fr :: Ord Word
[LclId]
$dOrd_s8fr = GHC.Real.$p2Real @ Word $dReal_s8fn

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq_s8ft [Occ=OnceL] :: Eq Word
[LclId]
$dEq_s8ft = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Word $dOrd_s8fr

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal1_s8fz :: Real Word
[LclId]
$dReal1_s8fz = GHC.Real.$p1Integral @ Word GHC.Real.$fIntegralWord

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum2_s8fB :: Num Word
[LclId]
$dNum2_s8fB = GHC.Real.$p1Real @ Word $dReal1_s8fz

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq1_s8fD [Occ=OnceL] :: Ord Word
[LclId]
$dEq1_s8fD = GHC.Real.$p2Real @ Word $dReal1_s8fz

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq2_s8fF [Occ=OnceL] :: Eq Word
[LclId]
$dEq2_s8fF = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Word $dEq1_s8fD

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal2_s8fL :: Real Word
[LclId]
$dReal2_s8fL = GHC.Real.$p1Integral @ Word GHC.Real.$fIntegralWord

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum3_s8fN :: Num Word
[LclId]
$dNum3_s8fN = GHC.Real.$p1Real @ Word $dReal2_s8fL

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq3_s8fP [Occ=OnceL] :: Ord Word
[LclId]
$dEq3_s8fP = GHC.Real.$p2Real @ Word $dReal2_s8fL

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq4_s8fR [Occ=OnceL] :: Eq Word
[LclId]
$dEq4_s8fR = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Word $dEq3_s8fP

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fW :: Integer
[LclId]
lvl_s8fW = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fX :: Word
[LclId]
lvl_s8fX = fromInteger @ Word $dNum3_s8fN lvl_s8fW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fU :: Integer
[LclId]
lvl_s8fU = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fV :: Word
[LclId]
lvl_s8fV = fromInteger @ Word $dNum3_s8fN lvl_s8fU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fY :: Integer
[LclId]
lvl_s8fY = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fZ :: Word
[LclId]
lvl_s8fZ = fromInteger @ Word $dNum3_s8fN lvl_s8fY

-- RHS size: {terms: 43, types: 13, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
g1_s8fT
  = \ (x1_a7Wi :: Double)
      (y1_a7Wj :: Word)
      (z_a7Wk [Occ=Once*] :: Double) ->
      case even @ Word GHC.Real.$fIntegralWord y1_a7Wj of {
        False ->
          case == @ Word $dEq4_s8fR y1_a7Wj lvl_s8fV of {
            False ->
              g1_s8fT
                (* @ Double $dNum1_s8dB x1_a7Wi x1_a7Wi)
                (quot @ Word GHC.Real.$fIntegralWord y1_a7Wj lvl_s8fX)
                (* @ Double $dNum1_s8dB x1_a7Wi z_a7Wk);
            True -> * @ Double $dNum1_s8dB x1_a7Wi z_a7Wk
          };
        True ->
          g1_s8fT
            (* @ Double $dNum1_s8dB x1_a7Wi x1_a7Wi)
            (quot @ Word GHC.Real.$fIntegralWord y1_a7Wj lvl_s8fZ)
            z_a7Wk
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g0 :: Integer
[LclId]
lvl_s8g0 = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8g1 :: Word
[LclId]
lvl_s8g1 = fromInteger @ Word $dNum2_s8fB lvl_s8g0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fI :: Integer
[LclId]
lvl_s8fI = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fJ :: Word
[LclId]
lvl_s8fJ = fromInteger @ Word $dNum2_s8fB lvl_s8fI

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g2 :: Integer
[LclId]
lvl_s8g2 = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8g3 :: Word
[LclId]
lvl_s8g3 = fromInteger @ Word $dNum2_s8fB lvl_s8g2

-- RHS size: {terms: 35, types: 10, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId, Arity=2, Str=<L,U><L,U>]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case even @ Word GHC.Real.$fIntegralWord y_a7W4 of {
        False ->
          case == @ Word $dEq2_s8fF y_a7W4 lvl_s8fJ of {
            False ->
              g1_s8fT
                (* @ Double $dNum1_s8dB x_a7W3 x_a7W3)
                (quot @ Word GHC.Real.$fIntegralWord y_a7W4 lvl_s8g1)
                x_a7W3;
            True -> x_a7W3
          };
        True ->
          f_s8fH
            (* @ Double $dNum1_s8dB x_a7W3 x_a7W3)
            (quot @ Word GHC.Real.$fIntegralWord y_a7W4 lvl_s8g3)
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g4 :: Integer
[LclId]
lvl_s8g4 = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId]
lvl_s8g5 = fromInteger @ Double $dNum1_s8dB lvl_s8g4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fw :: Integer
[LclId]
lvl_s8fw = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fx :: Word
[LclId]
lvl_s8fx = fromInteger @ Word $dNum1_s8fp lvl_s8fw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8g6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8g6 = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8g7 :: Double
[LclId, Str=b]
lvl_s8g7
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8g6)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8fu :: Integer
[LclId]
lvl_s8fu = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8fv :: Word
[LclId]
lvl_s8fv = fromInteger @ Word $dNum1_s8fp lvl_s8fu

-- RHS size: {terms: 21, types: 6, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId, Arity=2]
$s^_s8eh
  = \ (x0_a7VQ [Occ=Once] :: Double) (y0_a7VR :: Word) ->
      case < @ Word $dOrd_s8fr y0_a7VR lvl_s8fv of {
        False ->
          case == @ Word $dEq_s8ft y0_a7VR lvl_s8fx of {
            False -> f_s8fH x0_a7VQ y0_a7VR;
            True -> lvl_s8g5
          };
        True -> lvl_s8g7
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8g9 :: Real Word
[LclId]
$dReal_s8g9 = GHC.Real.$p1Integral @ Word GHC.Real.$fIntegralWord

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum_s8gb :: Num Word
[LclId]
$dNum_s8gb = GHC.Real.$p1Real @ Word $dReal_s8g9

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dOrd_s8gd [Occ=OnceL] :: Ord Word
[LclId]
$dOrd_s8gd = GHC.Real.$p2Real @ Word $dReal_s8g9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ge :: Integer
[LclId]
lvl_s8ge = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8gf :: Word
[LclId]
lvl_s8gf = fromInteger @ Word $dNum_s8gb lvl_s8ge

-- RHS size: {terms: 23, types: 10, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId, Arity=2]
$s^^_s8f4
  = \ (x_a7VB [Occ=Once*] :: Double) (n_a7VC :: Word) ->
      case >= @ Word $dOrd_s8gd n_a7VC lvl_s8gf of {
        False ->
          recip
            @ Double
            GHC.Float.$fFractionalDouble
            (^ @ Double
               @ Word
               $dNum1_s8dB
               GHC.Real.$fIntegralWord
               x_a7VB
               (negate @ Word $dNum_s8gb n_a7VC));
        True ->
          ^ @ Double @ Word $dNum1_s8dB GHC.Real.$fIntegralWord x_a7VB n_a7VC
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8gh :: Real Word
[LclId]
$dReal_s8gh = GHC.Real.$p1Integral @ Word GHC.Real.$fIntegralWord

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8gj :: Num Word
[LclId]
$dNum1_s8gj = GHC.Real.$p1Real @ Word $dReal_s8gh

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dOrd_s8gl :: Ord Word
[LclId]
$dOrd_s8gl = GHC.Real.$p2Real @ Word $dReal_s8gh

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq_s8gn [Occ=OnceL] :: Eq Word
[LclId]
$dEq_s8gn = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Word $dOrd_s8gl

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal1_s8gt :: Real Word
[LclId]
$dReal1_s8gt = GHC.Real.$p1Integral @ Word GHC.Real.$fIntegralWord

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum2_s8gv :: Num Word
[LclId]
$dNum2_s8gv = GHC.Real.$p1Real @ Word $dReal1_s8gt

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq1_s8gx [Occ=OnceL] :: Ord Word
[LclId]
$dEq1_s8gx = GHC.Real.$p2Real @ Word $dReal1_s8gt

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq2_s8gz [Occ=OnceL] :: Eq Word
[LclId]
$dEq2_s8gz = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Word $dEq1_s8gx

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal2_s8gF :: Real Word
[LclId]
$dReal2_s8gF = GHC.Real.$p1Integral @ Word GHC.Real.$fIntegralWord

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum3_s8gH :: Num Word
[LclId]
$dNum3_s8gH = GHC.Real.$p1Real @ Word $dReal2_s8gF

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq3_s8gJ [Occ=OnceL] :: Ord Word
[LclId]
$dEq3_s8gJ = GHC.Real.$p2Real @ Word $dReal2_s8gF

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq4_s8gL [Occ=OnceL] :: Eq Word
[LclId]
$dEq4_s8gL = ghc-prim-0.6.1:GHC.Classes.$p1Ord @ Word $dEq3_s8gJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gQ :: Integer
[LclId]
lvl_s8gQ = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8gR :: Word
[LclId]
lvl_s8gR = fromInteger @ Word $dNum3_s8gH lvl_s8gQ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gO :: Integer
[LclId]
lvl_s8gO = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8gP :: Word
[LclId]
lvl_s8gP = fromInteger @ Word $dNum3_s8gH lvl_s8gO

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gS :: Integer
[LclId]
lvl_s8gS = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8gT :: Word
[LclId]
lvl_s8gT = fromInteger @ Word $dNum3_s8gH lvl_s8gS

-- RHS size: {terms: 43, types: 13, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
g1_s8gN
  = \ (x1_a7Wi :: Integer)
      (y1_a7Wj :: Word)
      (z_a7Wk [Occ=Once*] :: Integer) ->
      case even @ Word GHC.Real.$fIntegralWord y1_a7Wj of {
        False ->
          case == @ Word $dEq4_s8gL y1_a7Wj lvl_s8gP of {
            False ->
              g1_s8gN
                (* @ Integer GHC.Num.$fNumInteger x1_a7Wi x1_a7Wi)
                (quot @ Word GHC.Real.$fIntegralWord y1_a7Wj lvl_s8gR)
                (* @ Integer GHC.Num.$fNumInteger x1_a7Wi z_a7Wk);
            True -> * @ Integer GHC.Num.$fNumInteger x1_a7Wi z_a7Wk
          };
        True ->
          g1_s8gN
            (* @ Integer GHC.Num.$fNumInteger x1_a7Wi x1_a7Wi)
            (quot @ Word GHC.Real.$fIntegralWord y1_a7Wj lvl_s8gT)
            z_a7Wk
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gU :: Integer
[LclId]
lvl_s8gU = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8gV :: Word
[LclId]
lvl_s8gV = fromInteger @ Word $dNum2_s8gv lvl_s8gU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gC :: Integer
[LclId]
lvl_s8gC = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8gD :: Word
[LclId]
lvl_s8gD = fromInteger @ Word $dNum2_s8gv lvl_s8gC

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gW :: Integer
[LclId]
lvl_s8gW = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8gX :: Word
[LclId]
lvl_s8gX = fromInteger @ Word $dNum2_s8gv lvl_s8gW

-- RHS size: {terms: 35, types: 10, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId, Arity=2, Str=<L,U><L,U>]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case even @ Word GHC.Real.$fIntegralWord y_a7W4 of {
        False ->
          case == @ Word $dEq2_s8gz y_a7W4 lvl_s8gD of {
            False ->
              g1_s8gN
                (* @ Integer GHC.Num.$fNumInteger x_a7W3 x_a7W3)
                (quot @ Word GHC.Real.$fIntegralWord y_a7W4 lvl_s8gV)
                x_a7W3;
            True -> x_a7W3
          };
        True ->
          f_s8gB
            (* @ Integer GHC.Num.$fNumInteger x_a7W3 x_a7W3)
            (quot @ Word GHC.Real.$fIntegralWord y_a7W4 lvl_s8gX)
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gY :: Integer
[LclId]
lvl_s8gY = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId]
lvl_s8gZ = fromInteger @ Integer GHC.Num.$fNumInteger lvl_s8gY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gq :: Integer
[LclId]
lvl_s8gq = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8gr :: Word
[LclId]
lvl_s8gr = fromInteger @ Word $dNum1_s8gj lvl_s8gq

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h0 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h0 = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8h1 :: Integer
[LclId, Str=b]
lvl_s8h1
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Integer
      (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h0)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8go :: Integer
[LclId]
lvl_s8go = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8gp :: Word
[LclId]
lvl_s8gp = fromInteger @ Word $dNum1_s8gj lvl_s8go

-- RHS size: {terms: 21, types: 6, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId, Arity=2]
$s^_s8f5
  = \ (x0_a7VQ [Occ=Once] :: Integer) (y0_a7VR :: Word) ->
      case < @ Word $dOrd_s8gl y0_a7VR lvl_s8gp of {
        False ->
          case == @ Word $dEq_s8gn y0_a7VR lvl_s8gr of {
            False -> f_s8gB x0_a7VQ y0_a7VR;
            True -> lvl_s8gZ
          };
        True -> lvl_s8h1
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7XI
      of
      { (# ipv_a7XL, ipv1_a7XM #) ->
      case ((case ($dNFData_s8dr
                   `cast` (Control.DeepSeq.N:NFData[0] <String>_N
                           :: NFData String ~R# (String -> ())))
                    f_a29H
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7XL
      of
      { (# ipv_X7Yc, ipv1_X7Ye #) ->
      let {
        duration_s8dt :: Integer
        [LclId]
        duration_s8dt
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Ye ipv1_a7XM } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h2
                              c_a7Zk
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h3 c_a7Zk n_a7Zl)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dt
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8dt lvl_s8h4)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Yc
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7XI
      of
      { (# ipv_a7XL, ipv1_a7XM #) ->
      case ((case ($dNFData_s8dl
                   `cast` (Control.DeepSeq.N:NFData[0] <Double>_N
                           :: NFData Double ~R# (Double -> ())))
                    f_a29H
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7XL
      of
      { (# ipv_X7Yc, ipv1_X7Ye #) ->
      let {
        duration_s8dn :: Integer
        [LclId]
        duration_s8dn
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Ye ipv1_a7XM } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h5
                              c_a7Zk
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h6 c_a7Zk n_a7Zl)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dn
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8dn lvl_s8h7)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Yc
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId]
lvl_s8ha = 1000000000

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7XI
      of
      { (# ipv_a7XL, ipv1_a7XM #) ->
      case ((case ($dNFData_s8dh
                   `cast` (Control.DeepSeq.N:NFData[0] <Integer>_N
                           :: NFData Integer ~R# (Integer -> ())))
                    f_a29H
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7XL
      of
      { (# ipv_X7Yc, ipv1_X7Ye #) ->
      let {
        duration_s8dj :: Integer
        [LclId]
        duration_s8dj
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Ye ipv1_a7XM } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h8
                              c_a7Zk
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h9 c_a7Zk n_a7Zl)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dj
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8dj lvl_s8ha)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Yc
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId]
lvl_s8hd = 1000000000

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7XI
      of
      { (# ipv_a7XL, ipv1_a7XM #) ->
      case ((case ($dNFData_a5Ic
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                           :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
                    f_a29H
             of
             { () ->
             base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                 ghc-prim-0.6.1:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                              ghc-prim-0.6.1:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                    ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7XL
      of
      { (# ipv_X7Yc, ipv1_X7Ye #) ->
      let {
        duration_s8dg :: Integer
        [LclId]
        duration_s8dg
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7Ye ipv1_a7XM } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8hb
                              c_a7Zk
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8hc c_a7Zk n_a7Zl)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8dg
                                    (ghc-prim-0.6.1:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8dg lvl_s8hd)
                              (ghc-prim-0.6.1:GHC.Types.[] @ Char)))
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Yc
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX, Arity=4]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8he :: Word
[LclId]
lvl_s8he = ghc-prim-0.6.1:GHC.Types.W# 1000000##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hf :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hf = "foo"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8hg :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8hg
  = \ (@ b_a7YZ) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ lvl_s8hf

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8hh :: [Char]
[LclId]
lvl_s8hh = GHC.Base.build @ Char lvl_s8hg

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = base-4.13.0.0:Data.Semigroup.Internal.$fSemigroup[]_$cstimes
      @ Char @ Word GHC.Real.$fIntegralWord lvl_s8he lvl_s8hh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hi :: Integer
[LclId]
lvl_s8hi = 3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8hj :: Word
[LclId]
lvl_s8hj = ghc-prim-0.6.1:GHC.Types.W# 1000000##

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower
  = ^ @ Integer
      @ Word
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralWord
      lvl_s8hi
      lvl_s8hj

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8hk :: Double
[LclId]
lvl_s8hk = ghc-prim-0.6.1:GHC.Types.D# 5.0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8hl :: Word
[LclId]
lvl_s8hl = ghc-prim-0.6.1:GHC.Types.W# 441##

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = ^^
      @ Double
      @ Word
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralWord
      lvl_s8hk
      lvl_s8hl

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
lvl_s8hE :: Integer -> ()
[LclId]
lvl_s8hE
  = \ (ds_a82i :: Integer) ->
      case ds_a82i of { __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.() }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hF :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hF = "integral power : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8hG :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8hG
  = \ (@ b_a7YZ) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ lvl_s8hF

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8hH :: [Char]
[LclId]
lvl_s8hH = GHC.Base.build @ Char lvl_s8hG

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl_s8hA :: Double -> ()
[LclId]
lvl_s8hA
  = \ (ds_a827 :: Double) ->
      case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      ghc-prim-0.6.1:GHC.Tuple.()
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hB :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hB = "fractional power 3 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8hC :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8hC
  = \ (@ b_a7YZ) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ lvl_s8hB

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8hD :: [Char]
[LclId]
lvl_s8hD = GHC.Base.build @ Char lvl_s8hC

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl_s8hw :: Double -> ()
[LclId]
lvl_s8hw
  = \ (ds_a827 :: Double) ->
      case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      ghc-prim-0.6.1:GHC.Tuple.()
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hx :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hx = "fractional power 2 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8hy :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8hy
  = \ (@ b_a7YZ) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ lvl_s8hx

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8hz :: [Char]
[LclId]
lvl_s8hz = GHC.Base.build @ Char lvl_s8hy

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl_s8hs :: Double -> ()
[LclId]
lvl_s8hs
  = \ (ds_a827 :: Double) ->
      case ds_a827 of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      ghc-prim-0.6.1:GHC.Tuple.()
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ht :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8ht = "fractional power 1 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8hu :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8hu
  = \ (@ b_a7YZ) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ lvl_s8ht

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8hv :: [Char]
[LclId]
lvl_s8hv = GHC.Base.build @ Char lvl_s8hu

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8hn [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<L,U>]
go_s8hn
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8hn xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8ho :: [Char] -> ()
[LclId]
lvl_s8ho = \ (eta_a81Q :: [Char]) -> go_s8hn eta_a81Q

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hp :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hp = "stimes : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8hq :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8hq
  = \ (@ b_a7YZ) ->
      ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ lvl_s8hp

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8hr :: [Char]
[LclId]
lvl_s8hr = GHC.Base.build @ Char lvl_s8hq

-- RHS size: {terms: 34, types: 51, coercions: 16, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case measure_s80g
             @ String
             (lvl_s8ho
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             lvl_s8hr
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case measure_s80g
             @ Double
             (lvl_s8hs
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8hv
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case measure_s80g
             @ Double
             (lvl_s8hw
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8hz
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case measure_s80g
             @ Double
             (lvl_s8hA
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8hD
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      measure_s80g
        @ Integer
        (lvl_s8hE
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        lvl_s8hH
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX, Arity=1]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX, Arity=1]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier ====================
2019-11-05 16:48:15.499669506 UTC
  Max iterations = 4
  SimplMode {Phase = 2 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 763, types: 663, coercions: 80, joins: 0/6}

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 70 0}]
testFractionalPower
  = ^^
      @ Double
      @ Word
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralWord
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testIntegralPower
  = ^ @ Integer
      @ Word
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralWord
      3
      (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 40}]
w1_a8nu
  = GHC.Base.build
      @ Char
      (\ (@ b_a7YZ) ->
         ghc-prim-0.6.1:GHC.CString.unpackFoldrCString# @ b_a7YZ "foo"#)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w_a8nt :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
w_a8nt = ghc-prim-0.6.1:GHC.Types.W# 1000000##

-- RHS size: {terms: 38, types: 20, coercions: 0, joins: 0/2}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 271 0}]
testStimes
  = case ghc-prim-0.6.1:GHC.Classes.ltWord
           w_a8nt (ghc-prim-0.6.1:GHC.Types.W# 0##)
    of {
      False ->
        let {
          lvl17_a8nB :: Word
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
          lvl17_a8nB = ghc-prim-0.6.1:GHC.Types.W# 0## } in
        letrec {
          rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
          [LclId,
           Arity=1,
           Str=<L,U>,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 151 50}]
          rep_a8nC
            = \ (ds_a8nD :: Word) ->
                case ghc-prim-0.6.1:GHC.Classes.eqWord ds_a8nD lvl17_a8nB of {
                  False ->
                    GHC.Base.augment
                      @ Char
                      (\ (@ b_a7Ym)
                         (c_a7Yn [OS=OneShot] :: Char -> b_a7Ym -> b_a7Ym)
                         (n_a7Yo [OS=OneShot] :: b_a7Ym) ->
                         GHC.Base.foldr @ Char @ b_a7Ym c_a7Yn n_a7Yo w1_a8nu)
                      (rep_a8nC
                         (case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x#_a8nS ->
                          ghc-prim-0.6.1:GHC.Types.W#
                            (ghc-prim-0.6.1:GHC.Prim.minusWord# x#_a8nS 1##)
                          }));
                  True -> ghc-prim-0.6.1:GHC.Types.[] @ Char
                }; } in
        rep_a8nC w_a8nt;
      True -> base-4.13.0.0:Data.Semigroup.Internal.stimesList1 @ Char
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 72, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dj lvl_s8ha)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h8
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80d, ww4_X80f #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h9 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80d ww4_X80f)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 72, types: 87, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dn lvl_s8h7)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h5
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80j, ww4_X80l #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h6 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80j ww4_X80l)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 73, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 600 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dt lvl_s8h4)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8h2
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80r, ww4_X80t #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8h3 c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80r ww4_X80t)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 75, types: 90, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 600 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7Zj)
                      (c_a7Zk [OS=OneShot] :: Char -> b_a7Zj -> b_a7Zj)
                      (n_a7Zl [OS=OneShot] :: b_a7Zj) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7Zj
                        c_a7Zk
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8dg lvl_s8hd)
                                (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7YH, ww4_a7YI #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7Zj
                           c_a7Zk
                           (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                              @ b_a7Zj
                              lvl_s8hb
                              c_a7Zk
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X80v, ww4_X80x #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7Zj
                                 c_a7Zk
                                 (ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                                    @ b_a7Zj lvl_s8hc c_a7Zk n_a7Zl)
                                 (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_X80v ww4_X80x)
                               }))
                           (ghc-prim-0.6.1:GHC.Types.: @ Char ww3_a7YH ww4_a7YI)
                         })
                        description_a29G))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 44, types: 66, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "stimes : "#))
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 1 : "#))
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 2 : "#))
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (GHC.Base.build
                @ Char
                (\ (@ b_a7YZ) ->
                   ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                     @ b_a7YZ "fractional power 3 : "#))
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (GHC.Base.build
           @ Char
           (\ (@ b_a7YZ) ->
              ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
                @ b_a7YZ "integral power : "#))
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fl :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fl = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 51 0}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      ghc-prim-0.6.1:GHC.Classes.eqWord
        (ghc-prim-0.6.1:GHC.Types.W#
           (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
        lvl_s8fl
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fv :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fv = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fx :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fx = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fJ :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fJ = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8fV :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8fV = ghc-prim-0.6.1:GHC.Types.W# 1##

Rec {
-- RHS size: {terms: 44, types: 7, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 343 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord wild_a8iN lvl_s8fV of {
            False ->
              g1_s8fT
                (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                (GHC.Float.timesDouble x1_a7Wi z_a7Wk);
            True -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
          };
        True ->
          g1_s8fT
            (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 38, types: 6, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 273 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord wild_a8iN lvl_s8fJ of {
            False ->
              g1_s8fT
                (GHC.Float.timesDouble x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                x_a7W3;
            True -> x_a7W3
          };
        True ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8g7 :: Double
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8g7
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Double
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YZ) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
              @ b_a7YZ "Negative exponent"#))

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.ltWord y0_a7VR lvl_s8fv of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y0_a7VR lvl_s8fx of {
            False -> f_s8fH x0_a7VQ y0_a7VR;
            True -> lvl_s8g5
          };
        True -> lvl_s8g7
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gf :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gf = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 34, types: 12, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 192 20}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.geWord n_a7VC lvl_s8gf of {
        False ->
          case ^ @ Double
                 @ Word
                 GHC.Float.$fNumDouble
                 GHC.Real.$fIntegralWord
                 x_a7VB
                 (case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x#_a8jJ ->
                  ghc-prim-0.6.1:GHC.Types.W#
                    (ghc-prim-0.6.1:GHC.Prim.int2Word#
                       (ghc-prim-0.6.1:GHC.Prim.negateInt#
                          (ghc-prim-0.6.1:GHC.Prim.word2Int# x#_a8jJ)))
                  })
          of
          { ghc-prim-0.6.1:GHC.Types.D# y_a8jD ->
          case ghc-prim-0.6.1:GHC.Prim./## 1.0## y_a8jD of wild1_a8jF
          { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# wild1_a8jF
          }
          };
        True ->
          ^ @ Double
            @ Word
            GHC.Float.$fNumDouble
            GHC.Real.$fIntegralWord
            x_a7VB
            n_a7VC
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gp :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gp = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gr :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gr = ghc-prim-0.6.1:GHC.Types.W# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gD :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gD = ghc-prim-0.6.1:GHC.Types.W# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8gP :: Word
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8gP = ghc-prim-0.6.1:GHC.Types.W# 1##

Rec {
-- RHS size: {terms: 44, types: 7, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 343 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case y1_a7Wj of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord wild_a8iN lvl_s8gP of {
            False ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk);
            True ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
          };
        True ->
          g1_s8gN
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 38, types: 6, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 273 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case y_a7W4 of wild_a8iN { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Classes.eqWord
             (ghc-prim-0.6.1:GHC.Types.W#
                (ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2##))
             lvl_s8fl
      of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord wild_a8iN lvl_s8gD of {
            False ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
                x_a7W3;
            True -> x_a7W3
          };
        True ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8h1 :: Integer
[LclId,
 Str=b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8h1
  = errorWithoutStackTrace
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ Integer
      (GHC.Base.build
         @ Char
         (\ (@ b_a7YZ) ->
            ghc-prim-0.6.1:GHC.CString.unpackFoldrCString#
              @ b_a7YZ "Negative exponent"#))

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case ghc-prim-0.6.1:GHC.Classes.ltWord y0_a7VR lvl_s8gp of {
        False ->
          case ghc-prim-0.6.1:GHC.Classes.eqWord y0_a7VR lvl_s8gr of {
            False -> f_s8gB x0_a7VQ y0_a7VR;
            True -> lvl_s8gZ
          };
        True -> lvl_s8h1
      }


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier ====================
2019-11-05 16:48:15.589373734 UTC
  Max iterations = 4
  SimplMode {Phase = 1 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 587, types: 540, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X24 {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##))
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8gN
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X24 {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
      case x_X8kz of {
        __DEFAULT -> f_s8gB x0_a7VQ wild_a8iB;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X1U {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##))
                (GHC.Float.timesDouble x1_a7Wi z_a7Wk);
            1## -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8fT
            (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X1U {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 31 20}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
      case x_X8ko of {
        __DEFAULT -> f_s8fH x0_a7VQ wild_a8iB;
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of wild_a8jr { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
      case x_a8jt of {
        __DEFAULT -> f_s8fH x_a7VB wild_a8jr;
        0## -> lvl_s8g5
      }
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 91 10}]
rep_a8nC
  = \ (ds_a8nD :: Word) ->
      case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x_a8ia ->
      case x_a8ia of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            (rep_a8nC
               (ghc-prim-0.6.1:GHC.Types.W#
                  (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##)));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testStimes = rep_a8nC (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testIntegralPower
  = f_s8gB 3 (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testFractionalPower
  = f_s8fH
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier ====================
2019-11-05 16:48:15.605982979 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 587, types: 540, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X24 {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##))
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8gN
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X24 {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
      case x_X8kz of {
        __DEFAULT -> f_s8gB x0_a7VQ wild_a8iB;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X1U {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##))
                (GHC.Float.timesDouble x1_a7Wi z_a7Wk);
            1## -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8fT
            (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X1U {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 31 20}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
      case x_X8ko of {
        __DEFAULT -> f_s8fH x0_a7VQ wild_a8iB;
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of wild_a8jr { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
      case x_a8jt of {
        __DEFAULT -> f_s8fH x_a7VB wild_a8jr;
        0## -> lvl_s8g5
      }
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 91 10}]
rep_a8nC
  = \ (ds_a8nD :: Word) ->
      case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x_a8ia ->
      case x_a8ia of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            (rep_a8nC
               (ghc-prim-0.6.1:GHC.Types.W#
                  (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##)));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testStimes = rep_a8nC (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testIntegralPower
  = f_s8gB 3 (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testFractionalPower
  = f_s8fH
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Float inwards ====================
2019-11-05 16:48:15.61589137 UTC

Result size of Float inwards
  = {terms: 587, types: 540, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X24 {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##))
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8gN
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X24 {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
      case x_X8kz of {
        __DEFAULT -> f_s8gB x0_a7VQ wild_a8iB;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X1U {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##))
                (GHC.Float.timesDouble x1_a7Wi z_a7Wk);
            1## -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8fT
            (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X1U {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 31 20}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
      case x_X8ko of {
        __DEFAULT -> f_s8fH x0_a7VQ wild_a8iB;
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of wild_a8jr { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
      case x_a8jt of {
        __DEFAULT -> f_s8fH x_a7VB wild_a8jr;
        0## -> lvl_s8g5
      }
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      ((let {
          duration_s8dt :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8dt
            = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
              case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      ((let {
          duration_s8dn :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8dn
            = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
              case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      ((let {
          duration_s8dj :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8dj
            = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
              case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      ((let {
          duration_s8dg :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8dg
            = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
              case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 91 10}]
rep_a8nC
  = \ (ds_a8nD :: Word) ->
      case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x_a8ia ->
      case x_a8ia of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            (rep_a8nC
               (ghc-prim-0.6.1:GHC.Types.W#
                  (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##)));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testStimes = rep_a8nC (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testIntegralPower
  = f_s8gB 3 (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testFractionalPower
  = f_s8fH
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier ====================
2019-11-05 16:48:15.643199562 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-call-arity],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 587, types: 540, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8gN [Occ=LoopBreaker] :: Integer -> Word -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8gN
  = \ (x1_a7Wi :: Integer) (y1_a7Wj :: Word) (z_a7Wk :: Integer) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X24 {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##))
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8gN
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8gB [Occ=LoopBreaker] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8gB
  = \ (x_a7W3 :: Integer) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X24 {
            __DEFAULT ->
              g1_s8gN
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8gB
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
      case x_X8kz of {
        __DEFAULT -> f_s8gB x0_a7VQ wild_a8iB;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
g1_s8fT [Occ=LoopBreaker] :: Double -> Word -> Double -> Double
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 273 0}]
g1_s8fT
  = \ (x1_a7Wi :: Double) (y1_a7Wj :: Word) (z_a7Wk :: Double) ->
      case y1_a7Wj of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X1U {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##))
                (GHC.Float.timesDouble x1_a7Wi z_a7Wk);
            1## -> GHC.Float.timesDouble x1_a7Wi z_a7Wk
          };
        0## ->
          g1_s8fT
            (GHC.Float.timesDouble x1_a7Wi x1_a7Wi)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
            z_a7Wk
      }
      }
end Rec }

Rec {
-- RHS size: {terms: 33, types: 6, coercions: 0, joins: 0/0}
f_s8fH [Occ=LoopBreaker] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 203 0}]
f_s8fH
  = \ (x_a7W3 :: Double) (y_a7W4 :: Word) ->
      case y_a7W4 of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT ->
          case x#_a8iP of wild_X1U {
            __DEFAULT ->
              g1_s8fT
                (GHC.Float.timesDouble x_a7W3 x_a7W3)
                (ghc-prim-0.6.1:GHC.Types.W#
                   (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##))
                x_a7W3;
            1## -> x_a7W3
          };
        0## ->
          f_s8fH
            (GHC.Float.timesDouble x_a7W3 x_a7W3)
            (ghc-prim-0.6.1:GHC.Types.W#
               (ghc-prim-0.6.1:GHC.Prim.quotWord# x#_a8iP 2##))
      }
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 31 20}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
      case x_X8ko of {
        __DEFAULT -> f_s8fH x0_a7VQ wild_a8iB;
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20] 60 0}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of wild_a8jr { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
      case x_a8jt of {
        __DEFAULT -> f_s8fH x_a7VB wild_a8jr;
        0## -> lvl_s8g5
      }
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W xs_a81X ->
          case x_a81W of { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82a, y_X82c) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82g, y_X82i) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82i, y_X82k) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ, y_a7Y0) ->
            case ipv1_a7XV of { (ds1_X82p, y_X82r) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
rep_a8nC [Occ=LoopBreaker] :: Word -> [Char]
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 91 10}]
rep_a8nC
  = \ (ds_a8nD :: Word) ->
      case ds_a8nD of { ghc-prim-0.6.1:GHC.Types.W# x_a8ia ->
      case x_a8ia of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            (rep_a8nC
               (ghc-prim-0.6.1:GHC.Types.W#
                  (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##)));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testStimes = rep_a8nC (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testIntegralPower
  = f_s8gB 3 (ghc-prim-0.6.1:GHC.Types.W# 1000000##)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testFractionalPower
  = f_s8fH
      (ghc-prim-0.6.1:GHC.Types.D# 5.0##)
      (ghc-prim-0.6.1:GHC.Types.W# 441##)

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j #) ->
      $smeasure_s8dk
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier ====================
2019-11-05 16:48:15.729083585 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-worker-wrapper],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 577, types: 537, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xe [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<S,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 243 0}]
$wg1_s8xe
  = \ (w_s8x7 :: Integer)
      (ww_s8xc :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (w_s8x9 :: Integer) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xc 2## of {
        __DEFAULT ->
          case ww_s8xc of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer
[LclId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 173 0}]
$wf_s8xl
  = \ (w_s8xf :: Integer)
      (ww_s8xj :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xj 2## of {
        __DEFAULT ->
          case ww_s8xj of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once] :: Integer)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
                 case x_X8kz of {
                   __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
                   0## -> lvl_s8gZ
                 }
                 }}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz [Dmd=<S,U>] ->
      case x_X8kz of wild_X23 [Dmd=<L,A>] {
        __DEFAULT -> $wf_s8xl x0_a7VQ wild_X23;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xE [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 31 0] 127 0}]
$wg1_s8xE
  = \ (ww_s8xr :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xv :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (ww_s8xz :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xv 2## of {
        __DEFAULT ->
          case ww_s8xv of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz);
            1## -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz
          };
        0## ->
          $wg1_s8xE
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xS [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word# -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 115 0}]
$wf_s8xS
  = \ (ww_s8xJ :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xN :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xN 2## of {
        __DEFAULT ->
          case ww_s8xN of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8eg [Occ=Once!] :: Word) ->
                 case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP [Occ=Once] ->
                 case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
                   __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
                   0## -> ghc-prim-0.6.1:GHC.Types.True
                 }
                 }}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once!] :: Double)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
                 case x_X8ko of {
                   __DEFAULT ->
                     case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko [Dmd=<S,U>] ->
      case x_X8ko of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ wild_X1S of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a7VB [Occ=Once!] :: Double)
                 (n_a7VC [Occ=Once!] :: Word) ->
                 case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
                 case x_a8jt of {
                   __DEFAULT ->
                     case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt [Dmd=<S,U>] ->
      case x_a8jt of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ wild_X1S of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W [Dmd=<S,H>] xs_a81X [Dmd=<S,U>] ->
          case x_a81W of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L [Dmd=<L,A>] ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82a [Dmd=<L,A>], y_X82c [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82g [Dmd=<L,A>], y_X82i [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ha = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82i [Dmd=<L,A>], y_X82k [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8hd = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82p [Dmd=<L,A>], y_X82r [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s80g
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$wrep_s8yd [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Word# -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 71 10}]
$wrep_s8yd
  = \ (ww_s8yb :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ww_s8yb of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            ($wrep_s8yd (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
testStimes = $wrep_s8yd 1000000##

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 0}]
testIntegralPower = $wf_s8xl 3 1000000##

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $wf_s8xS 5.0## 441## of ww_s8xR { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
    }

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6
             (ghc-prim-0.6.1:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a81C
      of
      { (# ipv_a81F, ipv1_a81G [Dmd=<L,A>] #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a81F
      of
      { (# ipv_X827, ipv1_X829 [Dmd=<L,A>] #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X827
      of
      { (# ipv_X82c, ipv1_X82e [Dmd=<L,A>] #) ->
      case $smeasure_s8do
             (ghc-prim-0.6.1:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X82c
      of
      { (# ipv_X82h, ipv1_X82j [Dmd=<L,A>] #) ->
      $smeasure_s8dk
        (ghc-prim-0.6.1:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82n
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82n
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8cX
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Levels added: ====================
2019-11-05 16:48:15.753888339 UTC

<lvl_s8gZ,<0,0>>
<lvl_s8gZ,<0,0>> = 1
<$wg1_s8xe,<0,0>>
<$wg1_s8xe,<0,0>>
  = \ <w_s8x7,<1,0>> <ww_s8xc,<1,0>> <w_s8x9,<1,0>> ->
      case GHC.Prim.remWord# ww_s8xc 2## of <wild_X20,<1,2>> {
        __DEFAULT ->
          case ww_s8xc of <wild_X24,<1,3>> {
            __DEFAULT ->
              $wg1_s8xe
                (GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (GHC.Prim.quotWord# ww_s8xc 2##)
                (GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## -> GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      };
<$wf_s8xl,<0,0>>
<$wf_s8xl,<0,0>>
  = \ <w_s8xf,<1,0>> <ww_s8xj,<1,0>> ->
      case GHC.Prim.remWord# ww_s8xj 2## of <wild_X1Z,<1,2>> {
        __DEFAULT ->
          case ww_s8xj of <wild_X24,<1,3>> {
            __DEFAULT ->
              $wg1_s8xe
                (GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (GHC.Prim.quotWord# ww_s8xj 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (GHC.Prim.quotWord# ww_s8xj 2##)
      };
<$s^_s8f5,<0,0>>
<$s^_s8f5,<0,0>>
  = \ <x0_a7VQ,<1,0>> <y0_a7VR,<1,0>> ->
      case y0_a7VR of <wild_a8iB,<1,2>> { GHC.Types.W# <x_X8kz,<1,2>> ->
      case x_X8kz of <wild_X23,<1,3>> {
        __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
        0## -> lvl_s8gZ
      }
      }
<$wg1_s8xE,<0,0>>
<$wg1_s8xE,<0,0>>
  = \ <ww_s8xr,<1,0>> <ww_s8xv,<1,0>> <ww_s8xz,<1,0>> ->
      case GHC.Prim.remWord# ww_s8xv 2## of <wild_X1Q,<1,2>> {
        __DEFAULT ->
          case ww_s8xv of <wild_X1U,<1,3>> {
            __DEFAULT ->
              $wg1_s8xE
                (GHC.Prim.*## ww_s8xr ww_s8xr)
                (GHC.Prim.quotWord# ww_s8xv 2##)
                (GHC.Prim.*## ww_s8xr ww_s8xz);
            1## -> GHC.Prim.*## ww_s8xr ww_s8xz
          };
        0## ->
          $wg1_s8xE
            (GHC.Prim.*## ww_s8xr ww_s8xr)
            (GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      };
<$wf_s8xS,<0,0>>
<$wf_s8xS,<0,0>>
  = \ <ww_s8xJ,<1,0>> <ww_s8xN,<1,0>> ->
      case GHC.Prim.remWord# ww_s8xN 2## of <wild_X1P,<1,2>> {
        __DEFAULT ->
          case ww_s8xN of <wild_X1U,<1,3>> {
            __DEFAULT ->
              $wg1_s8xE
                (GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (GHC.Prim.quotWord# ww_s8xN 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (GHC.Prim.*## ww_s8xJ ww_s8xJ) (GHC.Prim.quotWord# ww_s8xN 2##)
      };
<$seven_s8eu,<0,0>>
<$seven_s8eu,<0,0>>
  = \ <n_a8eg,<1,0>> ->
      case n_a8eg of <wild_a8iN,<1,2>> { GHC.Types.W# <x#_a8iP,<1,2>> ->
      case GHC.Prim.remWord# x#_a8iP 2## of <wild_X1H,<1,3>> {
        __DEFAULT -> GHC.Types.False;
        0## -> GHC.Types.True
      }
      }
<lvl_s8g5,<0,0>>
<lvl_s8g5,<0,0>> = GHC.Types.D# 1.0##
<$s^_s8eh,<0,0>>
<$s^_s8eh,<0,0>>
  = \ <x0_a7VQ,<1,0>> <y0_a7VR,<1,0>> ->
      case y0_a7VR of <wild_a8iB,<1,2>> { GHC.Types.W# <x_X8ko,<1,2>> ->
      case x_X8ko of <wild_X1S,<1,3>> {
        __DEFAULT ->
          case x0_a7VQ of <ww_s8xI,<1,4>> { GHC.Types.D# <ww_s8xJ,<1,4>> ->
          case $wf_s8xS ww_s8xJ x_X8ko of <ww_s8xR,<1,5>> { __DEFAULT ->
          GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }
<$s^^_s8f4,<0,0>>
<$s^^_s8f4,<0,0>>
  = \ <x_a7VB,<1,0>> <n_a7VC,<1,0>> ->
      case n_a7VC of <wild_a8jr,<1,2>> { GHC.Types.W# <x_a8jt,<1,2>> ->
      case x_a8jt of <wild_X1S,<1,3>> {
        __DEFAULT ->
          case x_a7VB of <ww_s8xI,<1,4>> { GHC.Types.D# <ww_s8xJ,<1,4>> ->
          case $wf_s8xS ww_s8xJ x_a8jt of <ww_s8xR,<1,5>> { __DEFAULT ->
          GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }
<go_s8f9,<0,0>>
<go_s8f9,<0,0>>
  = \ <ds_a81S,<1,0>> ->
      case ds_a81S of <wild_a81T,<1,2>> {
        [] -> GHC.Tuple.();
        : <x_a81W,<1,2>> <xs_a81X,<1,2>> ->
          case x_a81W of <ds1_a81J,<1,3>> { GHC.Types.C# <ipv_a81L,<1,3>> ->
          go_s8f9 xs_a81X
          }
      };
<$trModule_s7Xa,<0,0>>
<$trModule_s7Xa,<0,0>> = "main"#
<$trModule_s7Xb,<0,0>>
<$trModule_s7Xb,<0,0>> = GHC.Types.TrNameS $trModule_s7Xa
<$trModule_s7Xc,<0,0>>
<$trModule_s7Xc,<0,0>> = "Main"#
<$trModule_s7Xd,<0,0>>
<$trModule_s7Xd,<0,0>> = GHC.Types.TrNameS $trModule_s7Xc
<Main.$trModule,<0,0>>
<Main.$trModule,<0,0>>
  = GHC.Types.Module $trModule_s7Xb $trModule_s7Xd
<lvl_s8h2,<0,0>>
<lvl_s8h2,<0,0>> = " milli seconds -- "#
<lvl_s8h3,<0,0>>
<lvl_s8h3,<0,0>> = " pico seconds"#
<lvl_s8h4,<0,0>>
<lvl_s8h4,<0,0>> = 1000000000
<$smeasure_s8f6,<0,0>>
<$smeasure_s8f6,<0,0>>
  = \ <description_a29G,<1,0>> <f_a29H,<1,0>> <s_a7XI,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7XI
      of <ds_a7XS,<1,2>>
      { (# <ipv_a7XU,<1,2>>, <ipv1_a7XV,<1,2>> #) ->
      case go_s8f9 f_a29H of <wild_a7UH,<1,3>> { () ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7XU
      of <ds_X81N,<1,4>>
      { (# <ipv_X81R,<1,4>>, <ipv1_X81T,<1,4>> #) ->
      let {
        <duration_s8dt,<1,5>>
        <duration_s8dt,<1,5>>
          = case ipv1_X81T of <wild_a7XX,<1,7>>
            { (<ds1_a7XZ,<1,7>>, <y_a7Y0,<1,7>>) ->
            case ipv1_a7XV of <wild_X826,<1,8>>
            { (<ds1_X82a,<1,8>>, <y_X82c,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8dt lvl_s8h4)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7YF,<1,8>>
                    { (# <ww3_a7YH,<1,8>>, <ww4_a7YI,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X80n,<1,9>>
                          { (# <ww3_X80r,<1,9>>, <ww4_X80t,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8C0,F<0,0>>
                               <lvl_s8C0,F<0,0>> = GHC.CString.unpackCString# lvl_s8h3 } in
                             lvl_s8C0)
                            ww3_X80r
                            ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X81R
      }
      }
      }
<lvl_s8h5,<0,0>>
<lvl_s8h5,<0,0>> = " milli seconds -- "#
<lvl_s8h6,<0,0>>
<lvl_s8h6,<0,0>> = " pico seconds"#
<lvl_s8h7,<0,0>>
<lvl_s8h7,<0,0>> = 1000000000
<$smeasure_s8do,<0,0>>
<$smeasure_s8do,<0,0>>
  = \ <description_a29G,<1,0>> <f_a29H,<1,0>> <s_a7XI,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7XI
      of <ds_a7XS,<1,2>>
      { (# <ipv_a7XU,<1,2>>, <ipv1_a7XV,<1,2>> #) ->
      case f_a29H of <ds1_a828,<1,3>> { GHC.Types.D# <ipv_a82a,<1,3>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7XU
      of <ds_X81T,<1,4>>
      { (# <ipv_X81X,<1,4>>, <ipv1_X81Z,<1,4>> #) ->
      let {
        <duration_s8dn,<1,5>>
        <duration_s8dn,<1,5>>
          = case ipv1_X81Z of <wild_a7XX,<1,7>>
            { (<ds1_a7XZ,<1,7>>, <y_a7Y0,<1,7>>) ->
            case ipv1_a7XV of <wild_X82c,<1,8>>
            { (<ds1_X82g,<1,8>>, <y_X82i,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8dn lvl_s8h7)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7YF,<1,8>>
                    { (# <ww3_a7YH,<1,8>>, <ww4_a7YI,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X80f,<1,9>>
                          { (# <ww3_X80j,<1,9>>, <ww4_X80l,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8C1,F<0,0>>
                               <lvl_s8C1,F<0,0>> = GHC.CString.unpackCString# lvl_s8h6 } in
                             lvl_s8C1)
                            ww3_X80j
                            ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X81X
      }
      }
      }
<lvl_s8h8,<0,0>>
<lvl_s8h8,<0,0>> = " milli seconds -- "#
<lvl_s8h9,<0,0>>
<lvl_s8h9,<0,0>> = " pico seconds"#
<lvl_s8ha,<0,0>>
<lvl_s8ha,<0,0>> = 1000000000
<$smeasure_s8dk,<0,0>>
<$smeasure_s8dk,<0,0>>
  = \ <description_a29G,<1,0>> <f_a29H,<1,0>> <s_a7XI,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7XI
      of <ds_a7XS,<1,2>>
      { (# <ipv_a7XU,<1,2>>, <ipv1_a7XV,<1,2>> #) ->
      case f_a29H of <ds1_a82j,<1,3>> { __DEFAULT ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7XU
      of <ds_X81V,<1,4>>
      { (# <ipv_X81Z,<1,4>>, <ipv1_X821,<1,4>> #) ->
      let {
        <duration_s8dj,<1,5>>
        <duration_s8dj,<1,5>>
          = case ipv1_X821 of <wild_a7XX,<1,7>>
            { (<ds1_a7XZ,<1,7>>, <y_a7Y0,<1,7>>) ->
            case ipv1_a7XV of <wild_X82e,<1,8>>
            { (<ds1_X82i,<1,8>>, <y_X82k,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8dj lvl_s8ha)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7YF,<1,8>>
                    { (# <ww3_a7YH,<1,8>>, <ww4_a7YI,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X809,<1,9>>
                          { (# <ww3_X80d,<1,9>>, <ww4_X80f,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8C2,F<0,0>>
                               <lvl_s8C2,F<0,0>> = GHC.CString.unpackCString# lvl_s8h9 } in
                             lvl_s8C2)
                            ww3_X80d
                            ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X81Z
      }
      }
      }
<lvl_s8hb,<0,0>>
<lvl_s8hb,<0,0>> = " milli seconds -- "#
<lvl_s8hc,<0,0>>
<lvl_s8hc,<0,0>> = " pico seconds"#
<lvl_s8hd,<0,0>>
<lvl_s8hd,<0,0>> = 1000000000
<measure_s80g,<0,0>>
<measure_s80g,<0,0>>
  = \ <a_a5Ia,<1,0>>
      <$dNFData_a5Ic,<1,0>>
      <description_a29G,<1,0>>
      <f_a29H,<1,0>>
      <s_a7XI,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7XI
      of <ds_a7XS,<1,2>>
      { (# <ipv_a7XU,<1,2>>, <ipv1_a7XV,<1,2>> #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: Control.DeepSeq.NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of <wild_a7UH,<1,3>>
      { () ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7XU
      of <ds_X822,<1,4>>
      { (# <ipv_X826,<1,4>>, <ipv1_X828,<1,4>> #) ->
      let {
        <duration_s8dg,<1,5>>
        <duration_s8dg,<1,5>>
          = case ipv1_X828 of <wild_a7XX,<1,7>>
            { (<ds1_a7XZ,<1,7>>, <y_a7Y0,<1,7>>) ->
            case ipv1_a7XV of <wild_X82l,<1,8>>
            { (<ds1_X82p,<1,8>>, <y_X82r,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8dg lvl_s8hd)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7YF,<1,8>>
                    { (# <ww3_a7YH,<1,8>>, <ww4_a7YI,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X80r,<1,9>>
                          { (# <ww3_X80v,<1,9>>, <ww4_X80x,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8C3,F<0,0>>
                               <lvl_s8C3,F<0,0>> = GHC.CString.unpackCString# lvl_s8hc } in
                             lvl_s8C3)
                            ww3_X80v
                            ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X826
      }
      }
      }
<Main.measure,<0,0>>
<Main.measure,<0,0>>
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <Control.DeepSeq.NFData a>_R
            ->_R <GHC.Base.String>_R
            ->_R <a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Control.DeepSeq.NFData a
                -> GHC.Base.String
                -> a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# (forall a.
                    Control.DeepSeq.NFData a
                    -> GHC.Base.String -> a -> GHC.Types.IO ()))
<w1_s8r3,<0,0>>
<w1_s8r3,<0,0>> = "foo"#
<w1_a8nu,<0,0>>
<w1_a8nu,<0,0>> = GHC.CString.unpackCString# w1_s8r3
<$wrep_s8yd,<0,0>>
<$wrep_s8yd,<0,0>>
  = \ <ww_s8yb,<1,0>> ->
      case ww_s8yb of <wild_X1a,<1,2>> {
        __DEFAULT ->
          GHC.Base.++
            @ GHC.Types.Char
            w1_a8nu
            ($wrep_s8yd (GHC.Prim.minusWord# ww_s8yb 1##));
        0## -> GHC.Types.[] @ GHC.Types.Char
      };
<Main.testStimes,<0,0>>
<Main.testStimes,<0,0>> = $wrep_s8yd 1000000##
<Main.testIntegralPower,<0,0>>
<Main.testIntegralPower,<0,0>>
  = $wf_s8xl
      (let {
         <lvl_s8C4,F<0,0>>
         <lvl_s8C4,F<0,0>> = 3 } in
       lvl_s8C4)
      1000000##
<Main.testFractionalPower,<0,0>>
<Main.testFractionalPower,<0,0>>
  = case $wf_s8xS 5.0## 441## of <ww_s8xR,<0,3>> { __DEFAULT ->
    GHC.Types.D# ww_s8xR
    }
<main_s82n,<0,0>>
<main_s82n,<0,0>>
  = \ <s_a81C,<0,1>> ->
      case $smeasure_s8f6
             (let {
                <lvl_s8C6,F<0,0>>
                <lvl_s8C6,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8C5,F<0,0>>
                         <lvl_s8C5,F<0,0>> = "stimes : "# } in
                       lvl_s8C5) } in
              lvl_s8C6)
             Main.testStimes
             s_a81C
      of <ds1_a81D,<0,3>>
      { (# <ipv_a81F,<0,3>>, <ipv1_a81G,<0,3>> #) ->
      case $smeasure_s8do
             (let {
                <lvl_s8C8,F<0,0>>
                <lvl_s8C8,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8C7,F<0,0>>
                         <lvl_s8C7,F<0,0>> = "fractional power 1 : "# } in
                       lvl_s8C7) } in
              lvl_s8C8)
             Main.testFractionalPower
             ipv_a81F
      of <ds1_X823,<0,4>>
      { (# <ipv_X827,<0,4>>, <ipv1_X829,<0,4>> #) ->
      case $smeasure_s8do
             (let {
                <lvl_s8Ca,F<0,0>>
                <lvl_s8Ca,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8C9,F<0,0>>
                         <lvl_s8C9,F<0,0>> = "fractional power 2 : "# } in
                       lvl_s8C9) } in
              lvl_s8Ca)
             Main.testFractionalPower
             ipv_X827
      of <ds1_X828,<0,5>>
      { (# <ipv_X82c,<0,5>>, <ipv1_X82e,<0,5>> #) ->
      case $smeasure_s8do
             (let {
                <lvl_s8Cc,F<0,0>>
                <lvl_s8Cc,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8Cb,F<0,0>>
                         <lvl_s8Cb,F<0,0>> = "fractional power 3 : "# } in
                       lvl_s8Cb) } in
              lvl_s8Cc)
             Main.testFractionalPower
             ipv_X82c
      of <ds1_X82d,<0,6>>
      { (# <ipv_X82h,<0,6>>, <ipv1_X82j,<0,6>> #) ->
      $smeasure_s8dk
        (let {
           <lvl_s8Ce,F<0,0>>
           <lvl_s8Ce,F<0,0>>
             = GHC.CString.unpackCString#
                 (let {
                    <lvl_s8Cd,F<0,0>>
                    <lvl_s8Cd,F<0,0>> = "integral power : "# } in
                  lvl_s8Cd) } in
         lvl_s8Ce)
        Main.testIntegralPower
        ipv_X82h
      }
      }
      }
      }
<Main.main,<0,0>>
<Main.main,<0,0>>
  = main_s82n
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())
<main_s8cX,<0,0>>
<main_s8cX,<0,0>>
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# GHC.Types.IO ()))
<:Main.main,<0,0>>
<:Main.main,<0,0>>
  = main_s8cX
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())


==================== Float out(FOS {Lam = Just 0, Consts = True, OverSatApps = True}) ====================
2019-11-05 16:48:15.761753339 UTC

Result size of Float out(FOS {Lam = Just 0,
                              Consts = True,
                              OverSatApps = True})
  = {terms: 607, types: 561, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xe [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer -> Integer
[LclId, Arity=3, Str=<S,U><L,U><S,U>]
$wg1_s8xe
  = \ (w_s8x7 :: Integer)
      (ww_s8xc :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (w_s8x9 :: Integer) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xc 2## of {
        __DEFAULT ->
          case ww_s8xc of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer
[LclId, Arity=2, Str=<S,U><L,U>]
$wf_s8xl
  = \ (w_s8xf :: Integer)
      (ww_s8xj :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xj 2## of {
        __DEFAULT ->
          case ww_s8xj of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once] :: Integer)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
                 case x_X8kz of {
                   __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
                   0## -> lvl_s8gZ
                 }
                 }}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz [Dmd=<S,U>] ->
      case x_X8kz of wild_X23 [Dmd=<L,A>] {
        __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xE [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$wg1_s8xE
  = \ (ww_s8xr :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xv :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (ww_s8xz :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xv 2## of {
        __DEFAULT ->
          case ww_s8xv of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz);
            1## -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz
          };
        0## ->
          $wg1_s8xE
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xS [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word# -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><L,U>]
$wf_s8xS
  = \ (ww_s8xJ :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xN :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xN 2## of {
        __DEFAULT ->
          case ww_s8xN of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8eg [Occ=Once!] :: Word) ->
                 case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP [Occ=Once] ->
                 case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
                   __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
                   0## -> ghc-prim-0.6.1:GHC.Types.True
                 }
                 }}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId, Str=m]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once!] :: Double)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
                 case x_X8ko of {
                   __DEFAULT ->
                     case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko [Dmd=<S,U>] ->
      case x_X8ko of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a7VB [Occ=Once!] :: Double)
                 (n_a7VC [Occ=Once!] :: Word) ->
                 case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
                 case x_a8jt of {
                   __DEFAULT ->
                     case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^^_s8f4
  = \ (x_a7VB :: Double) (n_a7VC :: Word) ->
      case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt [Dmd=<S,U>] ->
      case x_a8jt of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W [Dmd=<S,H>] xs_a81X [Dmd=<S,U>] ->
          case x_a81W of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L [Dmd=<L,A>] ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C0 :: [Char]
[LclId]
lvl_s8C0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dt :: Integer
        [LclId]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82a [Dmd=<L,A>], y_X82c [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80r ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId]
lvl_s8h7 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C1 :: [Char]
[LclId]
lvl_s8C1 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h6

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dn :: Integer
        [LclId]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82g [Dmd=<L,A>], y_X82i [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h7)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h5
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C1 ww3_X80j ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId]
lvl_s8ha = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C2 :: [Char]
[LclId]
lvl_s8C2 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h9

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dj :: Integer
        [LclId]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82i [Dmd=<L,A>], y_X82k [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8ha)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h8
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C2 ww3_X80d ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId]
lvl_s8hd = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C3 :: [Char]
[LclId]
lvl_s8C3 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8hc

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dg :: Integer
        [LclId]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82p [Dmd=<L,A>], y_X82r [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8hd)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8hb
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C3 ww3_X80v ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s80g
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$wrep_s8yd [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Word# -> [Char]
[LclId, Arity=1, Str=<S,1*U>]
$wrep_s8yd
  = \ (ww_s8yb :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ww_s8yb of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            ($wrep_s8yd (ghc-prim-0.6.1:GHC.Prim.minusWord# ww_s8yb 1##));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes = $wrep_s8yd 1000000##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C4 :: Integer
[LclId]
lvl_s8C4 = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = $wf_s8xl lvl_s8C4 1000000##

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $wf_s8xS 5.0## 441## of ww_s8xR { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cd :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8Cd = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ce :: [Char]
[LclId]
lvl_s8Ce = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8Cb = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cc :: [Char]
[LclId]
lvl_s8Cc = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8C9 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ca :: [Char]
[LclId]
lvl_s8Ca = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C7 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8C7 = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C8 :: [Char]
[LclId]
lvl_s8C8 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8C5 = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C6 :: [Char]
[LclId]
lvl_s8C6 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C5

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6 lvl_s8C6 testStimes s_a81C of
      { (# ipv_a81F, ipv1_a81G [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8C8 testFractionalPower ipv_a81F of
      { (# ipv_X827, ipv1_X829 [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Ca testFractionalPower ipv_X827 of
      { (# ipv_X82c, ipv1_X82e [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Cc testFractionalPower ipv_X82c of
      { (# ipv_X82h, ipv1_X82j [Dmd=<L,A>] #) ->
      $smeasure_s8dk lvl_s8Ce testIntegralPower ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82n
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82n
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8cX
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Float inwards ====================
2019-11-05 16:48:15.786200076 UTC

Result size of Float inwards
  = {terms: 585, types: 553, coercions: 77, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xe [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer -> Integer
[LclId, Arity=3, Str=<S,U><L,U><S,U>]
$wg1_s8xe
  = \ (w_s8x7 :: Integer)
      (ww_s8xc :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (w_s8x9 :: Integer) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xc 2## of wild_X20 {
        __DEFAULT ->
          case ww_s8xc of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer
[LclId, Arity=2, Str=<S,U><L,U>]
$wf_s8xl
  = \ (w_s8xf :: Integer)
      (ww_s8xj :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xj 2## of wild_X1Z {
        __DEFAULT ->
          case ww_s8xj of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once] :: Integer)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
                 case x_X8kz of {
                   __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
                   0## -> lvl_s8gZ
                 }
                 }}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB [Dmd=<L,U(U)>]
      { ghc-prim-0.6.1:GHC.Types.W# x_X8kz [Dmd=<S,U>] ->
      case x_X8kz of wild_X23 [Dmd=<L,A>] {
        __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xE [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$wg1_s8xE
  = \ (ww_s8xr :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xv :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (ww_s8xz :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xv 2## of wild_X1Q {
        __DEFAULT ->
          case ww_s8xv of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz);
            1## -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz
          };
        0## ->
          $wg1_s8xE
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xS [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word# -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><L,U>]
$wf_s8xS
  = \ (ww_s8xJ :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xN :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xN 2## of wild_X1P {
        __DEFAULT ->
          case ww_s8xN of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8eg [Occ=Once!] :: Word) ->
                 case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP [Occ=Once] ->
                 case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
                   __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
                   0## -> ghc-prim-0.6.1:GHC.Types.True
                 }
                 }}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of wild_a8iN [Dmd=<L,A>]
      { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of wild_X1H {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId, Str=m]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once!] :: Double)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
                 case x_X8ko of {
                   __DEFAULT ->
                     case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB [Dmd=<L,U(U)>]
      { ghc-prim-0.6.1:GHC.Types.W# x_X8ko [Dmd=<S,U>] ->
      case x_X8ko of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x0_a7VQ of ww_s8xI { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a7VB [Occ=Once!] :: Double)
                 (n_a7VC [Occ=Once!] :: Word) ->
                 case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
                 case x_a8jt of {
                   __DEFAULT ->
                     case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^^_s8f4 = $s^_s8eh

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of wild_a81T [Dmd=<L,A>] {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W [Dmd=<S,H>] xs_a81X [Dmd=<S,U>] ->
          case x_a81W of ds1_a81J [Dmd=<L,A>]
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L [Dmd=<L,A>] ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C0 :: [Char]
[LclId]
lvl_s8C0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of ds_a7XS
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case go_s8f9 f_a29H of wild_a7UH { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of ds_X81N
      { (# ipv_X81R, ipv1_X81T [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dt :: Integer
          [LclId]
          duration_s8dt
            = case ipv1_X81T of wild_a7XX [Dmd=<L,A>]
              { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
              case ipv1_a7XV of wild_X826 [Dmd=<L,A>]
              { (ds1_X82a [Dmd=<L,A>], y_X82c [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7YF
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80n
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80r ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId]
lvl_s8h7 = lvl_s8h4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C1 :: [Char]
[LclId]
lvl_s8C1 = lvl_s8C0

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of ds_a7XS
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of ds1_a828 [Dmd=<L,A>]
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of ds_X81T
      { (# ipv_X81X, ipv1_X81Z [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dn :: Integer
          [LclId]
          duration_s8dn
            = case ipv1_X81Z of wild_a7XX [Dmd=<L,A>]
              { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
              case ipv1_a7XV of wild_X82c [Dmd=<L,A>]
              { (ds1_X82g [Dmd=<L,A>], y_X82i [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7YF
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80f
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80j ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId]
lvl_s8ha = lvl_s8h4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C2 :: [Char]
[LclId]
lvl_s8C2 = lvl_s8C0

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of ds_a7XS
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of ds1_a82j [Dmd=<L,A>] { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of ds_X81V
      { (# ipv_X81Z, ipv1_X821 [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dj :: Integer
          [LclId]
          duration_s8dj
            = case ipv1_X821 of wild_a7XX [Dmd=<L,A>]
              { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
              case ipv1_a7XV of wild_X82e [Dmd=<L,A>]
              { (ds1_X82i [Dmd=<L,A>], y_X82k [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7YF
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X809
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80d ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId]
lvl_s8hd = lvl_s8h4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C3 :: [Char]
[LclId]
lvl_s8C3 = lvl_s8C0

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of ds_a7XS
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of wild_a7UH
      { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of ds_X822
      { (# ipv_X826, ipv1_X828 [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dg :: Integer
          [LclId]
          duration_s8dg
            = case ipv1_X828 of wild_a7XX [Dmd=<L,A>]
              { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
              case ipv1_a7XV of wild_X82l [Dmd=<L,A>]
              { (ds1_X82p [Dmd=<L,A>], y_X82r [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7YF
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80r
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80v ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s80g
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$wrep_s8yd [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Word# -> [Char]
[LclId, Arity=1, Str=<S,1*U>]
$wrep_s8yd
  = \ (ww_s8yb :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ww_s8yb of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            ($wrep_s8yd (ghc-prim-0.6.1:GHC.Prim.minusWord# ww_s8yb 1##));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes = $wrep_s8yd 1000000##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C4 :: Integer
[LclId]
lvl_s8C4 = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = $wf_s8xl lvl_s8C4 1000000##

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $wf_s8xS 5.0## 441## of ww_s8xR { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cd :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8Cd = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ce :: [Char]
[LclId]
lvl_s8Ce = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8Cb = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cc :: [Char]
[LclId]
lvl_s8Cc = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8C9 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ca :: [Char]
[LclId]
lvl_s8Ca = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C7 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8C7 = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C8 :: [Char]
[LclId]
lvl_s8C8 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8C5 = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C6 :: [Char]
[LclId]
lvl_s8C6 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C5

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6 lvl_s8C6 testStimes s_a81C of ds1_a81D
      { (# ipv_a81F, ipv1_a81G [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8C8 testFractionalPower ipv_a81F
      of ds1_X823
      { (# ipv_X827, ipv1_X829 [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Ca testFractionalPower ipv_X827
      of ds1_X828
      { (# ipv_X82c, ipv1_X82e [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Cc testFractionalPower ipv_X82c
      of ds1_X82d
      { (# ipv_X82h, ipv1_X82j [Dmd=<L,A>] #) ->
      $smeasure_s8dk lvl_s8Ce testIntegralPower ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82n
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82n
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8cX = GHC.TopHandler.runMainIO1 @ () main

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8cX
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Liberate case ====================
2019-11-05 16:48:15.797672927 UTC

Result size of Liberate case
  = {terms: 585, types: 553, coercions: 77, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xe [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer -> Integer
[LclId, Arity=3, Str=<S,U><L,U><S,U>]
$wg1_s8xe
  = \ (w_s8x7 :: Integer)
      (ww_s8xc :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (w_s8x9 :: Integer) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xc 2## of wild_X20 {
        __DEFAULT ->
          case ww_s8xc of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer
[LclId, Arity=2, Str=<S,U><L,U>]
$wf_s8xl
  = \ (w_s8xf :: Integer)
      (ww_s8xj :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xj 2## of wild_X1Z {
        __DEFAULT ->
          case ww_s8xj of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once] :: Integer)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
                 case x_X8kz of {
                   __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
                   0## -> lvl_s8gZ
                 }
                 }}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB [Dmd=<L,U(U)>]
      { ghc-prim-0.6.1:GHC.Types.W# x_X8kz [Dmd=<S,U>] ->
      case x_X8kz of wild_X23 [Dmd=<L,A>] {
        __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xE [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$wg1_s8xE
  = \ (ww_s8xr :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xv :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (ww_s8xz :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xv 2## of wild_X1Q {
        __DEFAULT ->
          case ww_s8xv of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz);
            1## -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz
          };
        0## ->
          $wg1_s8xE
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xS [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word# -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><L,U>]
$wf_s8xS
  = \ (ww_s8xJ :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xN :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xN 2## of wild_X1P {
        __DEFAULT ->
          case ww_s8xN of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8eg [Occ=Once!] :: Word) ->
                 case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP [Occ=Once] ->
                 case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
                   __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
                   0## -> ghc-prim-0.6.1:GHC.Types.True
                 }
                 }}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of wild_a8iN [Dmd=<L,A>]
      { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of wild_X1H {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId, Str=m]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once!] :: Double)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
                 case x_X8ko of {
                   __DEFAULT ->
                     case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of wild_a8iB [Dmd=<L,U(U)>]
      { ghc-prim-0.6.1:GHC.Types.W# x_X8ko [Dmd=<S,U>] ->
      case x_X8ko of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x0_a7VQ of ww_s8xI { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a7VB [Occ=Once!] :: Double)
                 (n_a7VC [Occ=Once!] :: Word) ->
                 case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
                 case x_a8jt of {
                   __DEFAULT ->
                     case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^^_s8f4 = $s^_s8eh

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of wild_a81T [Dmd=<L,A>] {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W [Dmd=<S,H>] xs_a81X [Dmd=<S,U>] ->
          case x_a81W of ds1_a81J [Dmd=<L,A>]
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L [Dmd=<L,A>] ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C0 :: [Char]
[LclId]
lvl_s8C0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of ds_a7XS
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case go_s8f9 f_a29H of wild_a7UH { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of ds_X81N
      { (# ipv_X81R, ipv1_X81T [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dt :: Integer
          [LclId]
          duration_s8dt
            = case ipv1_X81T of wild_a7XX [Dmd=<L,A>]
              { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
              case ipv1_a7XV of wild_X826 [Dmd=<L,A>]
              { (ds1_X82a [Dmd=<L,A>], y_X82c [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7YF
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80n
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80r ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h5 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h6 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h7 :: Integer
[LclId]
lvl_s8h7 = lvl_s8h4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C1 :: [Char]
[LclId]
lvl_s8C1 = lvl_s8C0

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><L,U>]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of ds_a7XS
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of ds1_a828 [Dmd=<L,A>]
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of ds_X81T
      { (# ipv_X81X, ipv1_X81Z [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dn :: Integer
          [LclId]
          duration_s8dn
            = case ipv1_X81Z of wild_a7XX [Dmd=<L,A>]
              { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
              case ipv1_a7XV of wild_X82c [Dmd=<L,A>]
              { (ds1_X82g [Dmd=<L,A>], y_X82i [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7YF
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80f
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80j ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h8 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h8 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8h9 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ha :: Integer
[LclId]
lvl_s8ha = lvl_s8h4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C2 :: [Char]
[LclId]
lvl_s8C2 = lvl_s8C0

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><L,U>]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of ds_a7XS
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of ds1_a82j [Dmd=<L,A>] { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of ds_X81V
      { (# ipv_X81Z, ipv1_X821 [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dj :: Integer
          [LclId]
          duration_s8dj
            = case ipv1_X821 of wild_a7XX [Dmd=<L,A>]
              { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
              case ipv1_a7XV of wild_X82e [Dmd=<L,A>]
              { (ds1_X82i [Dmd=<L,A>], y_X82k [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7YF
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X809
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80d ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hb = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8hc = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8hd :: Integer
[LclId]
lvl_s8hd = lvl_s8h4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C3 :: [Char]
[LclId]
lvl_s8C3 = lvl_s8C0

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of ds_a7XS
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of wild_a7UH
      { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of ds_X822
      { (# ipv_X826, ipv1_X828 [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8dg :: Integer
          [LclId]
          duration_s8dg
            = case ipv1_X828 of wild_a7XX [Dmd=<L,A>]
              { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
              case ipv1_a7XV of wild_X82l [Dmd=<L,A>]
              { (ds1_X82p [Dmd=<L,A>], y_X82r [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of ww2_a7YF
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of ww2_X80r
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80v ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s80g
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$wrep_s8yd [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Word# -> [Char]
[LclId, Arity=1, Str=<S,1*U>]
$wrep_s8yd
  = \ (ww_s8yb :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ww_s8yb of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            ($wrep_s8yd (ghc-prim-0.6.1:GHC.Prim.minusWord# ww_s8yb 1##));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes = $wrep_s8yd 1000000##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C4 :: Integer
[LclId]
lvl_s8C4 = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = $wf_s8xl lvl_s8C4 1000000##

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $wf_s8xS 5.0## 441## of ww_s8xR { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cd :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8Cd = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ce :: [Char]
[LclId]
lvl_s8Ce = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8Cb = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cc :: [Char]
[LclId]
lvl_s8Cc = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8C9 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ca :: [Char]
[LclId]
lvl_s8Ca = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C7 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8C7 = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C8 :: [Char]
[LclId]
lvl_s8C8 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId]
lvl_s8C5 = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C6 :: [Char]
[LclId]
lvl_s8C6 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C5

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<L,U>]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6 lvl_s8C6 testStimes s_a81C of ds1_a81D
      { (# ipv_a81F, ipv1_a81G [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8C8 testFractionalPower ipv_a81F
      of ds1_X823
      { (# ipv_X827, ipv1_X829 [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Ca testFractionalPower ipv_X827
      of ds1_X828
      { (# ipv_X82c, ipv1_X82e [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Cc testFractionalPower ipv_X82c
      of ds1_X82d
      { (# ipv_X82h, ipv1_X82j [Dmd=<L,A>] #) ->
      $smeasure_s8dk lvl_s8Ce testIntegralPower ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82n
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82n
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8cX = GHC.TopHandler.runMainIO1 @ () main

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8cX
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier ====================
2019-11-05 16:48:15.832884056 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-liberate-case],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 561, types: 538, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xe [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<S,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 243 0}]
$wg1_s8xe
  = \ (w_s8x7 :: Integer)
      (ww_s8xc :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (w_s8x9 :: Integer) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xc 2## of {
        __DEFAULT ->
          case ww_s8xc of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer
[LclId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 173 0}]
$wf_s8xl
  = \ (w_s8xf :: Integer)
      (ww_s8xj :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xj 2## of {
        __DEFAULT ->
          case ww_s8xj of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once] :: Integer)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
                 case x_X8kz of {
                   __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
                   0## -> lvl_s8gZ
                 }
                 }}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz [Dmd=<S,U>] ->
      case x_X8kz of wild_X23 [Dmd=<L,A>] {
        __DEFAULT -> $wf_s8xl x0_a7VQ wild_X23;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xE [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 31 0] 127 0}]
$wg1_s8xE
  = \ (ww_s8xr :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xv :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (ww_s8xz :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xv 2## of {
        __DEFAULT ->
          case ww_s8xv of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz);
            1## -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz
          };
        0## ->
          $wg1_s8xE
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xS [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word# -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 115 0}]
$wf_s8xS
  = \ (ww_s8xJ :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xN :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xN 2## of {
        __DEFAULT ->
          case ww_s8xN of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8eg [Occ=Once!] :: Word) ->
                 case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP [Occ=Once] ->
                 case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
                   __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
                   0## -> ghc-prim-0.6.1:GHC.Types.True
                 }
                 }}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once!] :: Double)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
                 case x_X8ko of {
                   __DEFAULT ->
                     case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko [Dmd=<S,U>] ->
      case x_X8ko of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ wild_X1S of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a7VB [Occ=Once!] :: Double)
                 (n_a7VC [Occ=Once!] :: Word) ->
                 case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
                 case x_a8jt of {
                   __DEFAULT ->
                     case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^^_s8f4 = $s^_s8eh

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W [Dmd=<S,H>] xs_a81X [Dmd=<S,U>] ->
          case x_a81W of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L [Dmd=<L,A>] ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C0 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82a [Dmd=<L,A>], y_X82c [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80r ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82g [Dmd=<L,A>], y_X82i [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80j ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82i [Dmd=<L,A>], y_X82k [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80d ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82p [Dmd=<L,A>], y_X82r [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80v ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s80g
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$wrep_s8yd [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Word# -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 71 10}]
$wrep_s8yd
  = \ (ww_s8yb :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ww_s8yb of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            ($wrep_s8yd (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
testStimes = $wrep_s8yd 1000000##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8C4 = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = $wf_s8xl lvl_s8C4 1000000##

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $wf_s8xS 5.0## 441## of ww_s8xR { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cd :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8Cd = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ce :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Ce = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8Cb = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cc :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Cc = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8C9 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ca :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Ca = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C7 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8C7 = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C8 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C8 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8C5 = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C6 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C6 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C5

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6 lvl_s8C6 testStimes s_a81C of
      { (# ipv_a81F, ipv1_a81G [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8C8 testFractionalPower ipv_a81F of
      { (# ipv_X827, ipv1_X829 [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Ca testFractionalPower ipv_X827 of
      { (# ipv_X82c, ipv1_X82e [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Cc testFractionalPower ipv_X82c of
      { (# ipv_X82h, ipv1_X82j [Dmd=<L,A>] #) ->
      $smeasure_s8dk lvl_s8Ce testIntegralPower ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82n
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82n
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8cX
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5


==================== Simplifier ====================
2019-11-05 16:48:15.89126374 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [final],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 561, types: 538, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8gZ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8gZ = 1

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xe [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer -> Integer
[LclId,
 Arity=3,
 Str=<S,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 243 0}]
$wg1_s8xe
  = \ (w_s8x7 :: Integer)
      (ww_s8xc :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (w_s8x9 :: Integer) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xc 2## of {
        __DEFAULT ->
          case ww_s8xc of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9);
            1## ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x9
          };
        0## ->
          $wg1_s8xe
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8x7 w_s8x7)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xc 2##)
            w_s8x9
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xl [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: Integer -> ghc-prim-0.6.1:GHC.Prim.Word# -> Integer
[LclId,
 Arity=2,
 Str=<S,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 173 0}]
$wf_s8xl
  = \ (w_s8xf :: Integer)
      (ww_s8xj :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xj 2## of {
        __DEFAULT ->
          case ww_s8xj of wild_X24 {
            __DEFAULT ->
              $wg1_s8xe
                (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X24 2##)
                w_s8xf;
            1## -> w_s8xf
          };
        0## ->
          $wf_s8xl
            (integer-gmp-1.0.2.0:GHC.Integer.Type.timesInteger w_s8xf w_s8xf)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xj 2##)
      }
end Rec }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
$s^_s8f5 [InlPrag=NOUSERINLINE[1]] :: Integer -> Word -> Integer
[LclId,
 Arity=2,
 Str=<L,U><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once] :: Integer)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz ->
                 case x_X8kz of {
                   __DEFAULT -> $wf_s8xl x0_a7VQ x_X8kz;
                   0## -> lvl_s8gZ
                 }
                 }}]
$s^_s8f5
  = \ (x0_a7VQ :: Integer) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8kz [Dmd=<S,U>] ->
      case x_X8kz of wild_X23 [Dmd=<L,A>] {
        __DEFAULT -> $wf_s8xl x0_a7VQ wild_X23;
        0## -> lvl_s8gZ
      }
      }

Rec {
-- RHS size: {terms: 34, types: 5, coercions: 0, joins: 0/0}
$wg1_s8xE [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 31 0] 127 0}]
$wg1_s8xE
  = \ (ww_s8xr :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xv :: ghc-prim-0.6.1:GHC.Prim.Word#)
      (ww_s8xz :: ghc-prim-0.6.1:GHC.Prim.Double#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xv 2## of {
        __DEFAULT ->
          case ww_s8xv of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz);
            1## -> ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xz
          };
        0## ->
          $wg1_s8xE
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xr ww_s8xr)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xv 2##)
            ww_s8xz
      }
end Rec }

Rec {
-- RHS size: {terms: 28, types: 4, coercions: 0, joins: 0/0}
$wf_s8xS [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Double#
     -> ghc-prim-0.6.1:GHC.Prim.Word# -> ghc-prim-0.6.1:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 30] 115 0}]
$wf_s8xS
  = \ (ww_s8xJ :: ghc-prim-0.6.1:GHC.Prim.Double#)
      (ww_s8xN :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# ww_s8xN 2## of {
        __DEFAULT ->
          case ww_s8xN of wild_X1U {
            __DEFAULT ->
              $wg1_s8xE
                (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
                (ghc-prim-0.6.1:GHC.Prim.quotWord# wild_X1U 2##)
                ww_s8xJ;
            1## -> ww_s8xJ
          };
        0## ->
          $wf_s8xS
            (ghc-prim-0.6.1:GHC.Prim.*## ww_s8xJ ww_s8xJ)
            (ghc-prim-0.6.1:GHC.Prim.quotWord# ww_s8xN 2##)
      }
end Rec }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$seven_s8eu :: Word -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8eg [Occ=Once!] :: Word) ->
                 case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP [Occ=Once] ->
                 case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
                   __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
                   0## -> ghc-prim-0.6.1:GHC.Types.True
                 }
                 }}]
$seven_s8eu
  = \ (n_a8eg :: Word) ->
      case n_a8eg of { ghc-prim-0.6.1:GHC.Types.W# x#_a8iP ->
      case ghc-prim-0.6.1:GHC.Prim.remWord# x#_a8iP 2## of {
        __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
        0## -> ghc-prim-0.6.1:GHC.Types.True
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8g5 :: Double
[LclId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8g5 = ghc-prim-0.6.1:GHC.Types.D# 1.0##

-- RHS size: {terms: 20, types: 8, coercions: 0, joins: 0/0}
$s^_s8eh [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x0_a7VQ [Occ=Once!] :: Double)
                 (y0_a7VR [Occ=Once!] :: Word) ->
                 case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko ->
                 case x_X8ko of {
                   __DEFAULT ->
                     case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_X8ko of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^_s8eh
  = \ (x0_a7VQ :: Double) (y0_a7VR :: Word) ->
      case y0_a7VR of { ghc-prim-0.6.1:GHC.Types.W# x_X8ko [Dmd=<S,U>] ->
      case x_X8ko of wild_X1S [Dmd=<L,A>] {
        __DEFAULT ->
          case x0_a7VQ of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ ->
          case $wf_s8xS ww_s8xJ wild_X1S of ww_s8xR { __DEFAULT ->
          ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
          }
          };
        0## -> lvl_s8g5
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$s^^_s8f4 [InlPrag=NOUSERINLINE[1]] :: Double -> Word -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a7VB [Occ=Once!] :: Double)
                 (n_a7VC [Occ=Once!] :: Word) ->
                 case n_a7VC of { ghc-prim-0.6.1:GHC.Types.W# x_a8jt ->
                 case x_a8jt of {
                   __DEFAULT ->
                     case x_a7VB of { ghc-prim-0.6.1:GHC.Types.D# ww_s8xJ [Occ=Once] ->
                     case $wf_s8xS ww_s8xJ x_a8jt of ww_s8xR [Occ=Once] { __DEFAULT ->
                     ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
                     }
                     };
                   0## -> lvl_s8g5
                 }
                 }}]
$s^^_s8f4 = $s^_s8eh

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8f9 [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8f9
  = \ (ds_a81S :: [Char]) ->
      case ds_a81S of {
        [] -> ghc-prim-0.6.1:GHC.Tuple.();
        : x_a81W [Dmd=<S,H>] xs_a81X [Dmd=<S,U>] ->
          case x_a81W of
          { ghc-prim-0.6.1:GHC.Types.C# ipv_a81L [Dmd=<L,A>] ->
          go_s8f9 xs_a81X
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xa = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xb :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xb = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xc :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7Xc = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7Xd :: ghc-prim-0.6.1:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7Xd = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule_s7Xc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule_s7Xb $trModule_s7Xd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h2 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8h2 = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8h3 = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8h4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8h4 = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C0 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C0 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8h3

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8f6
  :: String
     -> String
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8f6
  = \ (description_a29G :: String)
      (f_a29H :: String)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case go_s8f9 f_a29H of { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81R, ipv1_X81T [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dt :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dt
          = case ipv1_X81T of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82a [Dmd=<L,A>], y_X82c [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82c
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dt lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dt (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80r, ww4_X80t #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80r ww4_X80t
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81R
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8do
  :: String
     -> Double
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8do
  = \ (description_a29G :: String)
      (f_a29H :: Double)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of
      { ghc-prim-0.6.1:GHC.Types.D# ipv_a82a [Dmd=<L,A>] ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81X, ipv1_X81Z [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dn :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dn
          = case ipv1_X81Z of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82g [Dmd=<L,A>], y_X82i [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82i
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dn lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dn (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80j, ww4_X80l #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80j ww4_X80l
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81X
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8dk
  :: String
     -> Integer
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8dk
  = \ (description_a29G :: String)
      (f_a29H :: Integer)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case f_a29H of { __DEFAULT ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X81Z, ipv1_X821 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dj :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dj
          = case ipv1_X821 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82i [Dmd=<L,A>], y_X82k [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82k
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dj lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dj (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80d, ww4_X80f #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80d ww4_X80f
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X81Z
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s80g
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8dI :: NFData String).
              measure_s80g @ String $dNFData_X8dI
              = $smeasure_s8f6
        "SPEC measure @ Double"
            forall ($dNFData_X8dC :: NFData Double).
              measure_s80g @ Double $dNFData_X8dC
              = $smeasure_s8do
        "SPEC measure @ Integer"
            forall ($dNFData_X8dy :: NFData Integer).
              measure_s80g @ Integer $dNFData_X8dy
              = $smeasure_s8dk]
measure_s80g
  = \ (@ a_a5Ia)
      ($dNFData_a5Ic :: NFData a_a5Ia)
      (description_a29G :: String)
      (f_a29H :: a_a5Ia)
      (s_a7XI
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7XI
      of
      { (# ipv_a7XU, ipv1_a7XV [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5Ic
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5Ia>_N
                    :: NFData a_a5Ia ~R# (a_a5Ia -> ())))
             f_a29H
      of
      { () ->
      case base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                  ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.13.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7XU
      of
      { (# ipv_X826, ipv1_X828 [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8dg :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8dg
          = case ipv1_X828 of { (ds1_a7XZ [Dmd=<L,A>], y_a7Y0 [Dmd=<S,U>]) ->
            case ipv1_a7XV of { (ds1_X82p [Dmd=<L,A>], y_X82r [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a7Y0 y_X82r
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.6.1:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a29G
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8dg lvl_s8h4)
                           (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7YH, ww4_a7YI #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.6.1:GHC.CString.unpackAppendCString#
                         lvl_s8h2
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8dg (ghc-prim-0.6.1:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X80v, ww4_X80x #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8C0 ww3_X80v ww4_X80x
                          }))
                      ww3_a7YH
                      ww4_a7YI
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.6.1:GHC.Types.True)
       `cast` (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.6.1:GHC.Prim.State#
                         ghc-prim-0.6.1:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.6.1:GHC.Prim.State#
                               ghc-prim-0.6.1:GHC.Prim.RealWorld,
                             () #))))
        ipv_X826
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s80g
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a
                           -> String
                           -> a
                           -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a -> String -> a -> IO ()))}]
measure
  = measure_s80g
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a
                -> String
                -> a
                -> ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a -> String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
w1_s8r3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_s8r3 = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
w1_a8nu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
w1_a8nu = ghc-prim-0.6.1:GHC.CString.unpackCString# w1_s8r3

Rec {
-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
$wrep_s8yd [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.6.1:GHC.Prim.Word# -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 71 10}]
$wrep_s8yd
  = \ (ww_s8yb :: ghc-prim-0.6.1:GHC.Prim.Word#) ->
      case ww_s8yb of wild_X1a {
        __DEFAULT ->
          ++
            @ Char
            w1_a8nu
            ($wrep_s8yd (ghc-prim-0.6.1:GHC.Prim.minusWord# wild_X1a 1##));
        0## -> ghc-prim-0.6.1:GHC.Types.[] @ Char
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
testStimes = $wrep_s8yd 1000000##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C4 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8C4 = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = $wf_s8xl lvl_s8C4 1000000##

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $wf_s8xS 5.0## 441## of ww_s8xR { __DEFAULT ->
    ghc-prim-0.6.1:GHC.Types.D# ww_s8xR
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cd :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8Cd = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ce :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Ce = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cb :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8Cb = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Cc :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Cc = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8Cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8C9 = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8Ca :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8Ca = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C7 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8C7 = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C8 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C8 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8C5 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8C5 = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8C6 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8C6 = ghc-prim-0.6.1:GHC.CString.unpackCString# lvl_s8C5

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s82n
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s82n
  = \ (s_a81C
         :: ghc-prim-0.6.1:GHC.Prim.State#
              ghc-prim-0.6.1:GHC.Prim.RealWorld) ->
      case $smeasure_s8f6 lvl_s8C6 testStimes s_a81C of
      { (# ipv_a81F, ipv1_a81G [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8C8 testFractionalPower ipv_a81F of
      { (# ipv_X827, ipv1_X829 [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Ca testFractionalPower ipv_X827 of
      { (# ipv_X82c, ipv1_X82e [Dmd=<L,A>] #) ->
      case $smeasure_s8do lvl_s8Cc testFractionalPower ipv_X82c of
      { (# ipv_X82h, ipv1_X82j [Dmd=<L,A>] #) ->
      $smeasure_s8dk lvl_s8Ce testIntegralPower ipv_X82h
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s82n
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s82n
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s8cX
  :: ghc-prim-0.6.1:GHC.Prim.State# ghc-prim-0.6.1:GHC.Prim.RealWorld
     -> (# ghc-prim-0.6.1:GHC.Prim.State#
             ghc-prim-0.6.1:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (main_s82n
                  `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                          :: (ghc-prim-0.6.1:GHC.Prim.State#
                                ghc-prim-0.6.1:GHC.Prim.RealWorld
                              -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                      ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                    () #))
                             ~R# IO ()))}]
main_s8cX
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s82n
       `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.6.1:GHC.Prim.State#
                     ghc-prim-0.6.1:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.6.1:GHC.Prim.State#
                           ghc-prim-0.6.1:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s8cX
               `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.6.1:GHC.Prim.State#
                             ghc-prim-0.6.1:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.6.1:GHC.Prim.State#
                                   ghc-prim-0.6.1:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s8cX
    `cast` (Sym (ghc-prim-0.6.1:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.6.1:GHC.Prim.State#
                  ghc-prim-0.6.1:GHC.Prim.RealWorld
                -> (# ghc-prim-0.6.1:GHC.Prim.State#
                        ghc-prim-0.6.1:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Word"
    forall ($dIntegral_s8el :: Integral Word).
      even @ Word $dIntegral_s8el
      = $seven_s8eu
"SPEC/Main ^ @ Double @ Word" [1]
    forall ($dNum_s8dG :: Num Double)
           ($dIntegral_s8dH :: Integral Word).
      ^ @ Double @ Word $dNum_s8dG $dIntegral_s8dH
      = $s^_s8eh
"SPEC/Main ^^ @ Double @ Word" [1]
    forall ($dFractional_s8dv :: Fractional Double)
           ($dIntegral_s8dw :: Integral Word).
      ^^ @ Double @ Word $dFractional_s8dv $dIntegral_s8dw
      = $s^^_s8f4
"SPEC/Main ^ @ Integer @ Word" [1]
    forall ($dNum_s8ex :: Num Integer)
           ($dIntegral_s8ey :: Integral Word).
      ^ @ Integer @ Word $dNum_s8ex $dIntegral_s8ey
      = $s^_s8f5

