
==================== Simplifier iteration=1 ====================
2019-11-05 16:48:02.973052845 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     260
  
  70 PreInlineUnconditionally
    8 a_a7VD
    4 xs_a7UZ
    4 ys_a7V0
    4 c_a7V5
    4 n_a7V6
    4 g_a7VX
    4 h_a7VZ
    4 ds_a7YI
    4 k_a7YJ
    3 n_a7W3
    3 s_a7YK
    2 ds_a7U9
    2 k_a7Ua
    2 x_a7Vd
    1 end_a1UF
    1 f_a7Dl
    1 x_a7Dm
    1 $dShow_a7Do
    1 x_a7Dp
    1 $dNFData_a7QW
    1 a1_a7QX
    1 b1_a7QY
    1 $dShow_a7TH
    1 s_a7Ub
    1 x_a7UP
    1 ds_a7Vz
    1 ds1_a7VA
    1 k_a7WU
    1 z_a7WV
    1 g_a7WW
    1 $dIntegral_a7X1
    1 ds_a7YT
  6 PostInlineUnconditionally
    3 c_a7W2
    1 start_a1UD
    1 $dShow_a5Mb
    1 r_a7YW
  31 UnfoldingDone
    5 measure
    4 GHC.Base.$fApplicativeIO2
    3 Control.DeepSeq.$fNFDataDouble
    2 getCPUTime
    2 GHC.Base.$fMonadIO1
    2 GHC.Show.$fShowInteger_$cshow
    1 print
    1 GHC.TopHandler.runMainIO
    1 $
    1 deepseq
    1 rwhnf
    1 Control.DeepSeq.$fNFData1NonEmpty_$cliftRnf1
    1 Control.DeepSeq.$fNFDataChar
    1 Control.DeepSeq.$fNFDataInteger
    1 Control.DeepSeq.$fNFData[]
    1 GHC.Real.$fIntegralInteger_$cdiv
    1 GHC.Base.$fSemigroup[]_$cstimes
    1 main
    1 GHC.Show.$fShow[]_$s$cshow1
  31 RuleFired
    8 unpack
    4 ++
    4 Class op >>
    4 augment/build
    3 Class op show
    2 Class op >>=
    1 Class op -
    1 Class op div
    1 Class op stimes
    1 SPEC $fShow[]
    1 eqInteger#
    1 fold/build
  4 LetFloatFromLet 4
  116 BetaReduction
    8 a_a7VD
    4 a_a7UY
    4 xs_a7UZ
    4 ys_a7V0
    4 b_a7V4
    4 c_a7V5
    4 n_a7V6
    4 a_a7VW
    4 g_a7VX
    4 h_a7VZ
    4 a_a7YG
    4 b_a7YH
    4 ds_a7YI
    4 k_a7YJ
    3 b_a7W1
    3 c_a7W2
    3 n_a7W3
    3 s_a7YK
    2 a_a7U7
    2 b_a7U8
    2 ds_a7U9
    2 k_a7Ua
    2 x_a7Vd
    2 b_a7VH
    1 start_a1UD
    1 end_a1UF
    1 r_a7Di
    1 a_a7Dj
    1 b_a7Dk
    1 f_a7Dl
    1 x_a7Dm
    1 a_a7Dn
    1 $dShow_a7Do
    1 x_a7Dp
    1 a_a7QU
    1 b_a7QV
    1 $dNFData_a7QW
    1 a1_a7QX
    1 b1_a7QY
    1 $dShow_a7TH
    1 s_a7Ub
    1 x_a7UP
    1 ds_a7Vz
    1 ds1_a7VA
    1 b_a7WS
    1 a_a7WT
    1 k_a7WU
    1 z_a7WV
    1 g_a7WW
    1 a_a7WZ
    1 b_a7X0
    1 $dIntegral_a7X1
    1 a_a7YS
    1 ds_a7YT
    1 a_a7YV
    1 r_a7YW
  1 KnownBranch 1 wild_a7VB
  1 FillInCaseDefault 1 ds1_a7YU
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 170, types: 218, coercions: 47, joins: 1/2}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 730 0}]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Ub
      of
      { (# ipv_a7Ue, ipv1_a7Uf #) ->
      case ((case ($dNFData_a5KC
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                           :: NFData a_a5KA ~R# (a_a5KA -> ())))
                    f_a1UC
             of
             { () ->
             base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Ue
      of
      { (# ipv_X7UF, ipv1_X7UH #) ->
      let {
        duration_a1UG :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
        duration_a1UG
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7UH ipv1_a7Uf } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              " milli seconds -- "#
                              c_a7W2
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 " pico seconds"# c_a7W2 n_a7W3)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_a1UG
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_a1UG 1000000000)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7UF
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (GHC.Base.build
         @ Char
         (\ (@ b_a7VH) ->
            ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7VH "foo"#))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.5.3:GHC.Types.D# 5.0##)
      441

-- RHS size: {terms: 66, types: 90, coercions: 16, joins: 1/1}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 708 0}]
main_s7Zj
  = \ (s_a7YK
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case measure_s7WY
             @ String
             ((\ (eta_a7YX :: [Char]) ->
                 joinrec {
                   go_a7YY [Occ=LoopBreaker] :: [Char] -> ()
                   [LclId[JoinId(1)],
                    Arity=1,
                    Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                            WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 44 10}]
                   go_a7YY (ds_a7YZ :: [Char])
                     = case ds_a7YZ of {
                         [] -> ghc-prim-0.5.3:GHC.Tuple.();
                         : x_a7Z3 xs_a7Z4 ->
                           case case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
                                ghc-prim-0.5.3:GHC.Tuple.()
                                }
                           of
                           { () ->
                           jump go_a7YY xs_a7Z4
                           }
                       }; } in
                 jump go_a7YY eta_a7YX)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "stimes : "#))
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN, ipv1_a7YO #) ->
      case measure_s7WY
             @ Double
             ((rwhnf @ Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 1 : "#))
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf, ipv1_X7Zh #) ->
      case measure_s7WY
             @ Double
             ((rwhnf @ Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 2 : "#))
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk, ipv1_X7Zm #) ->
      case measure_s7WY
             @ Double
             ((rwhnf @ Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 3 : "#))
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp, ipv1_X7Zr #) ->
      measure_s7WY
        @ Integer
        ((rwhnf @ Integer)
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        (GHC.Base.build
           @ Char
           (\ (@ b_a7VH) ->
              ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                @ b_a7VH "integral power : "#))
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())



==================== Simplifier iteration=1 ====================
2019-11-05 16:48:03.093879394 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     451
  
  120 PreInlineUnconditionally
    11 x_a8d7
    8 s_a7Uh
    8 w_a7Vf
    8 w1_a7Vg
    8 w2_a7Vh
    8 ds_a8gv
    4 x_a8dh
    4 y_a8di
    4 ds_a8dL
    3 $dNFData_s8a5
    2 ds_a7YT
    2 n_a8b3
    2 $dIntegral_s8b7
    1 $dNFData_X8ap
    1 a_a7VD
    1 eta_a7YX
    1 ds_a8dk
    1 i_a8dW
    1 x_a8dY
    1 y_a8dZ
    1 x_a8e7
    1 y_a8e8
    1 x_a8ec
    1 $dNFData_s8a1
    1 lvl_s8bw
    1 lvl_s8by
    1 lvl_s8bI
    1 lvl_s8bK
    1 lvl_s8bW
    1 lvl_s8c8
    1 lvl_s8ca
    1 lvl_s8cc
    1 lvl_s8ce
    1 lvl_s8cg
    1 lvl_s8ci
    1 lvl_s8ck
    1 lvl_s8cs
    1 lvl_s8cG
    1 lvl_s8cH
    1 lvl_s8cI
    1 lvl_s8cJ
    1 lvl_s8cK
    1 lvl_s8cL
    1 lvl_s8cM
    1 lvl_s8cN
    1 lvl_s8cQ
    1 lvl_s8cR
    1 lvl_s8cS
    1 lvl_s8cT
    1 lvl_s8cU
    1 lvl_s8cV
    1 lvl_s8cW
    1 lvl_s8cX
    1 lvl_s8cY
    1 lvl_s8cZ
    1 lvl_s8d0
    1 lvl_s8d1
    1 lvl_s8d2
    1 lvl_s8d3
    1 lvl_s8d4
    1 lvl_s8d5
  30 PostInlineUnconditionally
    8 ww1_a7Vl
    4 ipv_X7UF
    4 ipv1_X7UH
    4 ipv_a7Ue
    4 ipv1_a7Uf
    4 ds1_a8dM
    1 ds1_a8dl
    1 wild_a8dX
  95 UnfoldingDone
    11 GHC.Num.$fNumInteger_$cfromInteger
    9 $dNum1_s8an
    8 snd
    8 base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
    8 GHC.Show.$fShowInteger_$cshowsPrec
    4 GHC.Real.$fIntegralInteger_$cquot
    4 integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger
    3 $dNum2_s8bP
    3 $dNum3_s8c1
    2 rwhnf
    2 $seven_s8b8
    2 $dReal_s8bp
    2 $dNum_s8br
    2 $dReal_s8bB
    2 $dNum1_s8bD
    2 $dOrd_s8bF
    2 $dReal1_s8bN
    2 $dReal2_s8bZ
    2 $dReal_s8cn
    2 $dNum_s8cp
    1 GHC.Real.$fIntegralInteger_$crem
    1 GHC.Float.$fFractionalDouble_$crecip
    1 GHC.Float.$fNumDouble_$cfromInteger
    1 integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger
    1 integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger
    1 $dNFData_s8ab
    1 $dEq_s8bt
    1 $dEq1_s8bv
    1 $dEq_s8bH
    1 $dEq1_s8bR
    1 $dEq2_s8bT
    1 $dEq3_s8c3
    1 $dEq4_s8c5
    1 $dOrd_s8cr
    1 $dNFData_s8en
  65 RuleFired
    12 Class op fromInteger
    6 Class op *
    5 Class op $p1Integral
    5 Class op $p1Real
    5 Class op $p2Real
    5 eqInteger#
    4 Class op $p1Ord
    4 Class op ==
    4 Class op quot
    3 SPEC measure @ Double
    2 SPEC/Main even @ Integer
    1 Class op $p1Fractional
    1 Class op <
    1 Class op >=
    1 Class op negate
    1 Class op recip
    1 Class op rem
    1 SPEC measure @ Integer
    1 SPEC measure @ String
    1 doubleFromInteger
    1 unpack
  1 LetFloatFromLet 1
  106 BetaReduction
    11 x_a8d7
    8 s_a7Uh
    8 w_a7Vf
    8 w1_a7Vg
    8 w2_a7Vh
    8 a_a8gt
    8 b_a8gu
    8 ds_a8gv
    4 x_a8dh
    4 y_a8di
    4 ds_a8dL
    4 ds1_a8dM
    3 $dNFData_s8a5
    2 a_a7YS
    2 ds_a7YT
    2 n_a8b3
    2 $dIntegral_s8b7
    1 $dNFData_X8ap
    1 a_a7VD
    1 eta_a7YX
    1 ds_a8dk
    1 ds1_a8dl
    1 i_a8dW
    1 x_a8dY
    1 y_a8dZ
    1 x_a8e7
    1 y_a8e8
    1 x_a8ec
    1 $dNFData_s8a1
  26 KnownBranch
    8 ww_a7Vi
    4 ds1_X7UB
    4 ds1_a7Uc
    4 wild_a8dN
    2 wild_a7QZ
    2 wild1_a7Z6
    1 wild_a8dm
    1 wild_a8dX
  7 CaseMerge
    3 wild_a8dj
    2 wild_X8fJ
    1 wild_a8e0
    1 wild_a8e9
  1 FillInCaseDefault 1 ds1_a7YU
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 671, types: 686, coercions: 84, joins: 0/18}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal_s8cn :: Real Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal_s8cn = GHC.Real.$fRealInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_s8cp :: Num Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum_s8cp = GHC.Num.$fNumInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dOrd_s8cr :: Ord Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dOrd_s8cr = integer-gmp-1.0.2.0:GHC.Integer.Type.$fOrdInteger

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (GHC.Base.build
         @ Char
         (\ (@ b_a7VH) ->
            ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
              @ b_a7VH "Negative exponent"#))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal2_s8bZ :: Real Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal2_s8bZ = GHC.Real.$fRealInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum3_s8c1 :: Num Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum3_s8c1 = GHC.Num.$fNumInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq3_s8c3 :: Ord Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq3_s8c3 = integer-gmp-1.0.2.0:GHC.Integer.Type.$fOrdInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq4_s8c5 :: Eq Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq4_s8c5 = integer-gmp-1.0.2.0:GHC.Integer.Type.$fEqInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal1_s8bN :: Real Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal1_s8bN = GHC.Real.$fRealInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum2_s8bP :: Num Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum2_s8bP = GHC.Num.$fNumInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq1_s8bR :: Ord Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq1_s8bR = integer-gmp-1.0.2.0:GHC.Integer.Type.$fOrdInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq2_s8bT :: Eq Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq2_s8bT = integer-gmp-1.0.2.0:GHC.Integer.Type.$fEqInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal_s8bB :: Real Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal_s8bB = GHC.Real.$fRealInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum1_s8bD :: Num Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum1_s8bD = GHC.Num.$fNumInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dOrd_s8bF :: Ord Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dOrd_s8bF = integer-gmp-1.0.2.0:GHC.Integer.Type.$fOrdInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq_s8bH :: Eq Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq_s8bH = integer-gmp-1.0.2.0:GHC.Integer.Type.$fEqInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dReal_s8bp :: Real Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dReal_s8bp = GHC.Real.$fRealInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_s8br :: Num Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum_s8br = GHC.Num.$fNumInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bz = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq_s8bt :: Ord Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq_s8bt = integer-gmp-1.0.2.0:GHC.Integer.Type.$fOrdInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq1_s8bv :: Eq Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dEq1_s8bv = integer-gmp-1.0.2.0:GHC.Integer.Type.$fEqInteger

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum1_s8an :: Num Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNum1_s8an = GHC.Float.$fNumDouble

Rec {
-- RHS size: {terms: 46, types: 9, coercions: 0, joins: 0/4}
g1_s8c7 [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8c7
  = \ (x1_a7SF :: Double) (y1_a7SG :: Integer) (z_a7SH :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7SG lvl_s8bx)
             lvl_s8bz
      of wild_a8dj {
        __DEFAULT ->
          let {
            lwild_s8dP :: ghc-prim-0.5.3:GHC.Prim.Int#
            [LclId]
            lwild_s8dP = wild_a8dj } in
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7SG lvl_s8c9
          of wild_X8fJ {
            __DEFAULT ->
              let {
                lwild_s8dO :: ghc-prim-0.5.3:GHC.Prim.Int#
                [LclId]
                lwild_s8dO = wild_X8fJ } in
              g1_s8c7
                (GHC.Float.timesDouble x1_a7SF x1_a7SF)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cb)
                (GHC.Float.timesDouble x1_a7SF z_a7SH);
            1# ->
              let {
                lwild_s8dO :: ghc-prim-0.5.3:GHC.Prim.Int#
                [LclId]
                lwild_s8dO = wild_X8fJ } in
              GHC.Float.timesDouble x1_a7SF z_a7SH
          };
        1# ->
          let {
            lwild_s8dP :: ghc-prim-0.5.3:GHC.Prim.Int#
            [LclId]
            lwild_s8dP = wild_a8dj } in
          g1_s8c7
            (GHC.Float.timesDouble x1_a7SF x1_a7SF)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cd)
            z_a7SH
      }
end Rec }

Rec {
-- RHS size: {terms: 40, types: 8, coercions: 0, joins: 0/4}
f_s8bV [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8bV
  = \ (x_a7Sq :: Double) (y_a7Sr :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7Sr lvl_s8bx)
             lvl_s8bz
      of wild_a8dj {
        __DEFAULT ->
          let {
            lwild_s8dV :: ghc-prim-0.5.3:GHC.Prim.Int#
            [LclId]
            lwild_s8dV = wild_a8dj } in
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7Sr lvl_s8bX
          of wild_X8fJ {
            __DEFAULT ->
              let {
                lwild_s8dU :: ghc-prim-0.5.3:GHC.Prim.Int#
                [LclId]
                lwild_s8dU = wild_X8fJ } in
              g1_s8c7
                (GHC.Float.timesDouble x_a7Sq x_a7Sq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8cf)
                x_a7Sq;
            1# ->
              let {
                lwild_s8dU :: ghc-prim-0.5.3:GHC.Prim.Int#
                [LclId]
                lwild_s8dU = wild_X8fJ } in
              x_a7Sq
          };
        1# ->
          let {
            lwild_s8dV :: ghc-prim-0.5.3:GHC.Prim.Int#
            [LclId]
            lwild_s8dV = wild_a8dj } in
          f_s8bV
            (GHC.Float.timesDouble x_a7Sq x_a7Sq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8cj :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8cj = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 27, types: 8, coercions: 0, joins: 0/4}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8au
  = \ (x0_a7Sd :: Double) (y0_a7Se :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Se lvl_s8bJ
      of wild_a8e0 {
        __DEFAULT ->
          let {
            lwild_s8e6 :: ghc-prim-0.5.3:GHC.Prim.Int#
            [LclId]
            lwild_s8e6 = wild_a8e0 } in
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Se lvl_s8bL
          of wild_a8dj {
            __DEFAULT ->
              let {
                lwild_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Int#
                [LclId]
                lwild_s8e5 = wild_a8dj } in
              f_s8bV x0_a7Sd y0_a7Se;
            1# ->
              let {
                lwild_s8e5 :: ghc-prim-0.5.3:GHC.Prim.Int#
                [LclId]
                lwild_s8e5 = wild_a8dj } in
              lvl_s8cj
          };
        1# ->
          let {
            lwild_s8e6 :: ghc-prim-0.5.3:GHC.Prim.Int#
            [LclId]
            lwild_s8e6 = wild_a8e0 } in
          lvl_s8cl
      }

-- RHS size: {terms: 32, types: 12, coercions: 0, joins: 0/2}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 191 20}]
$s^^_s8ai
  = \ (x_a7RX :: Double) (n_a7RY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7RY lvl_s8ct
      of wild_a8e9 {
        __DEFAULT ->
          let {
            lwild_s8ek :: ghc-prim-0.5.3:GHC.Prim.Int#
            [LclId]
            lwild_s8ek = wild_a8e9 } in
          case ^ @ Double
                 @ Integer
                 GHC.Float.$fNumDouble
                 GHC.Real.$fIntegralInteger
                 x_a7RX
                 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7RY)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8ef ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8ef of wild1_a8eh
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8eh
          }
          };
        1# ->
          let {
            lwild_s8ek :: ghc-prim-0.5.3:GHC.Prim.Int#
            [LclId]
            lwild_s8ek = wild_a8e9 } in
          ^ @ Double
            @ Integer
            GHC.Float.$fNumDouble
            GHC.Real.$fIntegralInteger
            x_a7RX
            n_a7RY
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 xs_a7Z4 ->
          case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$dNFData_s8en :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
$dNFData_s8en = \ (eta_a7YX :: [Char]) -> go_s8bn eta_a7YX

-- RHS size: {terms: 1, types: 0, coercions: 4, joins: 0/0}
$dNFData_s8ab :: NFData String
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
$dNFData_s8ab
  = $dNFData_s8en
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
            :: ([Char] -> ()) ~R# NFData [Char])

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 73, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 600 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa, ipv1_X7Xc #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jz, y_X8jB) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8ae lvl_s8cw)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Vp, ww4_a7Vq #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cu
                              c_a7W2
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_a7Vp, ww4_a7Vq #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cv c_a7W2 n_a7W3)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                         })
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cz = 1000000000

-- RHS size: {terms: 72, types: 87, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg, ipv1_X7Xi #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jF, y_X8jH) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8a8 lvl_s8cz)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Vp, ww4_a7Vq #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cx
                              c_a7W2
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_a7Vp, ww4_a7Vq #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cy c_a7W2 n_a7W3)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                         })
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cC = 1000000000

-- RHS size: {terms: 72, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi, ipv1_X7Xk #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jH, y_X8jJ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8a4 lvl_s8cC)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Vp, ww4_a7Vq #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cA
                              c_a7W2
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_a7Vp, ww4_a7Vq #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cB c_a7W2 n_a7W3)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                         })
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cF = 1000000000

-- RHS size: {terms: 75, types: 90, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 600 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp, ipv1_X7Xr #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jO, y_X8jQ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8a0 lvl_s8cF)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Vp, ww4_a7Vq #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cD
                              c_a7W2
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_a7Vp, ww4_a7Vq #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cE c_a7W2 n_a7W3)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                         })
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (GHC.Base.build
         @ Char
         (\ (@ b_a7VH) ->
            ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7VH "foo"#))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.5.3:GHC.Types.D# 5.0##)
      441

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8cP [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8cP
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 xs_a7Z4 ->
          case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
          go_s8cP xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 44, types: 66, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s7Zj
  = \ (s_a7YK
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "stimes : "#))
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN, ipv1_a7YO #) ->
      case $smeasure_s8a6
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 1 : "#))
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf, ipv1_X7Zh #) ->
      case $smeasure_s8a6
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 2 : "#))
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk, ipv1_X7Zm #) ->
      case $smeasure_s8a6
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 3 : "#))
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp, ipv1_X7Zr #) ->
      $smeasure_s8a2
        (GHC.Base.build
           @ Char
           (\ (@ b_a7VH) ->
              ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                @ b_a7VH "integral power : "#))
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier iteration=1 ====================
2019-11-05 16:48:03.150666548 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     280
  
  78 PreInlineUnconditionally
    12 ys_a7WQ
    11 g_a7VK
    11 a_a7VM
    8 sc_a7UU
    8 sc1_a7UV
    8 sc2_a7UW
    4 a_a7VN
    4 n_a7VO
    4 n_a7W3
    2 $dNum_s8as
    2 $dIntegral_s8at
    1 $dIntegral_a7Yk
    1 $dNum_a7Yl
    1 $dFractional_s8ag
    1 $dIntegral_s8ah
  16 PostInlineUnconditionally
    12 xs_a7WR
    4 c_a7W2
  11 UnfoldingDone 11 GHC.Base.build
  39 RuleFired
    12 foldr/app
    11 unpack-list
    8 SC:++0
    4 unpack-append
    2 SPEC/Main ^ @ Double @ Integer
    1 SPEC ^
    1 SPEC/Main ^^ @ Double @ Integer
  136 BetaReduction
    12 a_a7WP
    12 ys_a7WQ
    12 xs_a7WR
    11 a_a7VJ
    11 g_a7VK
    11 a_a7VM
    8 b_a7UT
    8 sc_a7UU
    8 sc1_a7UV
    8 sc2_a7UW
    7 b_a7VH
    4 a_a7VN
    4 n_a7VO
    4 b_a7W1
    4 c_a7W2
    4 n_a7W3
    2 $dNum_s8as
    2 $dIntegral_s8at
    1 $dIntegral_a7Yk
    1 $dNum_a7Yl
    1 $dFractional_s8ag
    1 $dIntegral_s8ah
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bz = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8c7 [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8c7
  = \ (x1_a7SF :: Double) (y1_a7SG :: Integer) (z_a7SH :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7SG lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7SG lvl_s8c9
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x1_a7SF x1_a7SF)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cb)
                (GHC.Float.timesDouble x1_a7SF z_a7SH);
            1# -> GHC.Float.timesDouble x1_a7SF z_a7SH
          };
        1# ->
          g1_s8c7
            (GHC.Float.timesDouble x1_a7SF x1_a7SF)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cd)
            z_a7SH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8bV [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8bV
  = \ (x_a7Sq :: Double) (y_a7Sr :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7Sr lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7Sr lvl_s8bX
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x_a7Sq x_a7Sq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8cf)
                x_a7Sq;
            1# -> x_a7Sq
          };
        1# ->
          f_s8bV
            (GHC.Float.timesDouble x_a7Sq x_a7Sq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8cj :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8cj = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8au
  = \ (x0_a7Sd :: Double) (y0_a7Se :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Se lvl_s8bJ
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Se lvl_s8bL
          of {
            __DEFAULT -> f_s8bV x0_a7Sd y0_a7Se;
            1# -> lvl_s8cj
          };
        1# -> lvl_s8cl
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8ai
  = \ (x_a7RX :: Double) (n_a7RY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7RY lvl_s8ct
      of {
        __DEFAULT ->
          case $s^_s8au
                 x_a7RX (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7RY)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8ef ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8ef of wild1_a8eh
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8eh
          }
          };
        1# -> $s^_s8au x_a7RX n_a7RY
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 xs_a7Z4 ->
          case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa, ipv1_X7Xc #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jz, y_X8jB) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv)
                            ww3_X7X5
                            ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cz = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg, ipv1_X7Xi #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jF, y_X8jH) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cz)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cx
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cy)
                            ww3_X7Xb
                            ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cC = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi, ipv1_X7Xk #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jH, y_X8jJ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cC)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cA
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cB)
                            ww3_X7Xd
                            ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cF = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp, ipv1_X7Xr #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jO, y_X8jQ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cF)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cD
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cE)
                            ww3_X7Xk
                            ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8ai (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s7Zj
  = \ (s_a7YK
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN, ipv1_a7YO #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf, ipv1_X7Zh #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk, ipv1_X7Zm #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp, ipv1_X7Zr #) ->
      $smeasure_s8a2
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier iteration=1 ====================
2019-11-05 16:48:03.260363719 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     156
  
  35 PreInlineUnconditionally
    6 ds_a8dB
    6 ds1_a8dC
    4 w_s8ly
    4 w_s8lA
    3 w_s8lz
    3 w_s8lN
    2 w_s8lO
    2 w_s8lX
    2 w_s8lY
    1 x0_a7Sd
    1 w_s8m3
    1 w_s8m4
  35 PostInlineUnconditionally
    6 x_a8dF
    6 y_a8dJ
    3 ww_s8lD
    3 ww_s8lH
    3 ww_s8lV
    2 ww_s8lL
    2 ww_s8m1
    2 ww_s8m7
    1 x_a7RX
    1 n_a7RY
    1 y0_a7Se
    1 y_a7Sr
    1 y1_a7SG
    1 z_a7SH
    1 y_a8ef
    1 ww_s8lR
  14 UnfoldingDone
    6 GHC.Float.timesDouble
    3 g1_s8c7
    2 $s^_s8au
    2 f_s8bV
    1 $s^^_s8ai
  31 BetaReduction
    6 ds_a8dB
    6 ds1_a8dC
    3 w_s8ly
    3 w_s8lz
    3 w_s8lA
    2 w_s8lN
    2 w_s8lO
    2 w_s8lX
    2 w_s8lY
    1 w_s8m3
    1 w_s8m4
  4 CaseOfCase
    1 ww_s8lK
    1 ww_s8lU
    1 ww_s8m0
    1 ww_s8m6
  30 KnownBranch
    6 wild_a8dD
    6 wild1_a8dH
    3 ww_s8lC
    3 ww_s8lG
    3 ww_s8lK
    3 ww_s8lU
    2 ww_s8m0
    2 ww_s8m6
    1 wild_a8ed
    1 ww_s8lQ
  7 CaseIdentity
    3 ww_s8lL
    2 ww_s8lV
    1 wild1_a8eh
    1 ww_s8m1
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 578, types: 558, coercions: 80, joins: 0/7}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bz = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8b3 [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
                        lvl_s8bz
                 of wild_a8dj [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
                 }}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj [Dmd=<S,U>]
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 17, types: 8, coercions: 0, joins: 0/0}
g1_s8c7 [InlPrag=NOUSERINLINE[2]]
  :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Str=<S(S),U(U)><S,U><S(S),U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8ly [Occ=Once!] :: Double)
                 (w_s8lz [Occ=Once] :: Integer)
                 (w_s8lA [Occ=Once!] :: Double) ->
                 case w_s8ly of
                 { ghc-prim-0.5.3:GHC.Types.D# ww_s8lD [Occ=Once, Dmd=<S,U>] ->
                 case w_s8lA of
                 { ghc-prim-0.5.3:GHC.Types.D# ww_s8lH [Occ=Once, Dmd=<S,U>] ->
                 case $wg1_s8lM ww_s8lD w_s8lz ww_s8lH of ww_s8lL [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8lL
                 }
                 }
                 }}]
g1_s8c7
  = \ (w_s8ly :: Double) (w_s8lz :: Integer) (w_s8lA :: Double) ->
      case w_s8ly of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lD [Dmd=<S,U>] ->
      case w_s8lA of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lH [Dmd=<S,U>] ->
      case $wg1_s8lM ww_s8lD w_s8lz ww_s8lH of ww_s8lL { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8lL
      }
      }
      }

-- RHS size: {terms: 43, types: 7, coercions: 0, joins: 0/2}
$wg1_s8lM [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 294 0}]
$wg1_s8lM
  = \ (ww_s8lD :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lz :: Integer)
      (ww_s8lH :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      let {
        x1_a7SF :: Double
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
        x1_a7SF = ghc-prim-0.5.3:GHC.Types.D# ww_s8lD } in
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lz lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lz lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH);
            1# ->
              let {
                ww_s8lL :: ghc-prim-0.5.3:GHC.Prim.Double#
                [LclId,
                 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 1 0}]
                ww_s8lL = ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH } in
              ww_s8lL
          };
        1# ->
          $wg1_s8lM
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cd)
            ww_s8lH
      }
end Rec }

Rec {
-- RHS size: {terms: 12, types: 5, coercions: 0, joins: 0/0}
f_s8bV [InlPrag=NOUSERINLINE[2]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<S,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lN [Occ=Once!] :: Double)
                 (w_s8lO [Occ=Once] :: Integer) ->
                 case w_s8lN of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR [Occ=Once] ->
                 case $wf_s8lW ww_s8lR w_s8lO of ww_s8lV [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8lV
                 }
                 }}]
f_s8bV
  = \ (w_s8lN :: Double) (w_s8lO :: Integer) ->
      case w_s8lN of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
      case $wf_s8lW ww_s8lR w_s8lO of ww_s8lV { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8lV
      }
      }

-- RHS size: {terms: 35, types: 5, coercions: 0, joins: 0/1}
$wf_s8lW [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 282 0}]
$wf_s8lW
  = \ (ww_s8lR :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lO :: Integer) ->
      let {
        x_a7Sq :: Double
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
        x_a7Sq = ghc-prim-0.5.3:GHC.Types.D# ww_s8lR } in
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lO lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lO lvl_s8bX
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cf)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8cj :: Double
[LclId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8cj = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8m2 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8m2
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8lY lvl_s8bJ
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lY lvl_s8bL
          of {
            __DEFAULT ->
              case w_s8lX of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lX [Occ=Once] :: Double)
                 (w_s8lY [Occ=Once] :: Integer) ->
                 case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
                 }}]
$s^_s8au
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8m8 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8m8
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8m4 lvl_s8ct
      of {
        __DEFAULT ->
          case $w$s^_s8m2
                 w_s8m3 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8m4)
          of ww_s8m1
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8m3 [Occ=Once] :: Double)
                 (w_s8m4 [Occ=Once] :: Integer) ->
                 case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
                 }}]
$s^^_s8ai
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 [Dmd=<S,H>] xs_a7Z4 [Dmd=<S,U>] ->
          case x_a7Z3 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc [Dmd=<L,A>] ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa [Dmd=<S,U>], ipv1_X7Xc [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jz [Dmd=<L,A>], y_X8jB [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv)
                            ww3_X7X5
                            ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cz = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX [Dmd=<L,A>] ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg [Dmd=<S,U>], ipv1_X7Xi [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jF [Dmd=<L,A>], y_X8jH [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cz)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cx
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cy)
                            ww3_X7Xb
                            ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cC = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi [Dmd=<S,U>], ipv1_X7Xk [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jH [Dmd=<L,A>], y_X8jJ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cC)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cA
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cB)
                            ww3_X7Xd
                            ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cF = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp [Dmd=<S,U>], ipv1_X7Xr [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jO [Dmd=<L,A>], y_X8jQ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cF)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cD
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cE)
                            ww3_X7Xk
                            ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7WY
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 20}]
testFractionalPower
  = case $w$s^^_s8m8 (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441
    of ww_s8m7
    { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
    }

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s7Zj
  = \ (s_a7YK [Dmd=<S,U>]
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN [Dmd=<S,U>], ipv1_a7YO [Dmd=<L,A>] #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf [Dmd=<S,U>], ipv1_X7Zh [Dmd=<L,A>] #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk [Dmd=<S,U>], ipv1_X7Zm [Dmd=<L,A>] #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp [Dmd=<S,U>], ipv1_X7Zr [Dmd=<L,A>] #) ->
      $smeasure_s8a2
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s7Zj
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s89K
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier iteration=2 ====================
2019-11-05 16:48:03.279509893 UTC
  ---- Simplifier counts for Simplifier iteration=2
  Total ticks:     1
  
  1 PreInlineUnconditionally 1 ww_s8lL
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=2
Result size of Simplifier iteration=2
  = {terms: 536, types: 534, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bz = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8b3 [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
                        lvl_s8bz
                 of wild_a8dj [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
                 }}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj [Dmd=<S,U>]
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8lM [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8lM
  = \ (ww_s8lD :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lz :: Integer)
      (ww_s8lH :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lz lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lz lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH
          };
        1# ->
          $wg1_s8lM
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cd)
            ww_s8lH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8lW [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8lW
  = \ (ww_s8lR :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lO :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lO lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lO lvl_s8bX
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cf)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8m2 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8m2
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8lY lvl_s8bJ
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lY lvl_s8bL
          of {
            __DEFAULT ->
              case w_s8lX of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lX [Occ=Once] :: Double)
                 (w_s8lY [Occ=Once] :: Integer) ->
                 case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
                 }}]
$s^_s8au
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8m8 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8m8
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8m4 lvl_s8ct
      of {
        __DEFAULT ->
          case $w$s^_s8m2
                 w_s8m3 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8m4)
          of ww_s8m1
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8m3 [Occ=Once] :: Double)
                 (w_s8m4 [Occ=Once] :: Integer) ->
                 case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
                 }}]
$s^^_s8ai
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 [Dmd=<S,H>] xs_a7Z4 [Dmd=<S,U>] ->
          case x_a7Z3 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc [Dmd=<L,A>] ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa [Dmd=<S,U>], ipv1_X7Xc [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jz [Dmd=<L,A>], y_X8jB [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv)
                            ww3_X7X5
                            ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cz = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX [Dmd=<L,A>] ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg [Dmd=<S,U>], ipv1_X7Xi [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jF [Dmd=<L,A>], y_X8jH [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cz)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cx
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cy)
                            ww3_X7Xb
                            ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cC = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi [Dmd=<S,U>], ipv1_X7Xk [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jH [Dmd=<L,A>], y_X8jJ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cC)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cA
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cB)
                            ww3_X7Xd
                            ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cF = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp [Dmd=<S,U>], ipv1_X7Xr [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jO [Dmd=<L,A>], y_X8jQ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cF)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cD
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cE)
                            ww3_X7Xk
                            ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7WY
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 20}]
testFractionalPower
  = case $w$s^^_s8m8 (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441
    of ww_s8m7
    { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
    }

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s7Zj
  = \ (s_a7YK [Dmd=<S,U>]
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN [Dmd=<S,U>], ipv1_a7YO [Dmd=<L,A>] #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf [Dmd=<S,U>], ipv1_X7Zh [Dmd=<L,A>] #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk [Dmd=<S,U>], ipv1_X7Zm [Dmd=<L,A>] #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp [Dmd=<S,U>], ipv1_X7Zr [Dmd=<L,A>] #) ->
      $smeasure_s8a2
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s7Zj
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s89K
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier iteration=1 ====================
2019-11-05 16:48:03.380829787 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     4
  
  1 UnfoldingDone 1 main
  3 FillInCaseDefault
    2 wild_a7QZ
    1 wild_a7Z0
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 535, types: 542, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pb :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8pb = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pb)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8b3 [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
                        lvl_s8ct
                 of wild_a8dj [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
                 }}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
             lvl_s8ct
      of wild_a8dj [Dmd=<S,U>]
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8lM [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8lM
  = \ (ww_s8lD :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lz :: Integer)
      (ww_s8lH :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lz lvl_s8cb)
             lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lz lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH
          };
        1# ->
          $wg1_s8lM
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
            ww_s8lH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8lW [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8lW
  = \ (ww_s8lR :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lO :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lO lvl_s8cb)
             lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lO lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8m2 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8m2
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8lY lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lY lvl_s8ct
          of {
            __DEFAULT ->
              case w_s8lX of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lX [Occ=Once] :: Double)
                 (w_s8lY [Occ=Once] :: Integer) ->
                 case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
                 }}]
$s^_s8au
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8m8 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8m8
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8m4 lvl_s8ct
      of {
        __DEFAULT ->
          case $w$s^_s8m2
                 w_s8m3 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8m4)
          of ww_s8m1
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8m3 [Occ=Once] :: Double)
                 (w_s8m4 [Occ=Once] :: Integer) ->
                 case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
                 }}]
$s^^_s8ai
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 [Dmd=<S,H>] xs_a7Z4 [Dmd=<S,U>] ->
          case x_a7Z3 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc [Dmd=<L,A>] ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pc :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pc = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa [Dmd=<S,U>], ipv1_X7Xc [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jz [Dmd=<L,A>], y_X8jB [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7X5 ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX [Dmd=<L,A>] ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg [Dmd=<S,U>], ipv1_X7Xi [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jF [Dmd=<L,A>], y_X8jH [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xb ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi [Dmd=<S,U>], ipv1_X7Xk [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jH [Dmd=<L,A>], y_X8jJ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xd ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp [Dmd=<S,U>], ipv1_X7Xr [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jO [Dmd=<L,A>], y_X8jQ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xk ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7WY
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pg :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pg = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ph :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8ph = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pi :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pi = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8ph

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8pg
      lvl_s8pi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pj :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pj = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = GHC.Real.^_$s^ lvl_s8pj lvl_s8pg

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pl :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8pl = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pm :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pm = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $w$s^^_s8m8 lvl_s8pl lvl_s8pm of ww_s8m7 { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8pv = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pw :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pw = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pt :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pt = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pu = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pr :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pr = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8ps :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8ps = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pp :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pp = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pq :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pq = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pn :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8pn = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8po :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8po = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pn

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s7Zj
  = \ (s_a7YK [Dmd=<S,U>]
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac lvl_s8po testStimes s_a7YK of
      { (# ipv_a7YN [Dmd=<S,U>], ipv1_a7YO [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pq testFractionalPower ipv_a7YN of
      { (# ipv_X7Zf [Dmd=<S,U>], ipv1_X7Zh [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8ps testFractionalPower ipv_X7Zf of
      { (# ipv_X7Zk [Dmd=<S,U>], ipv1_X7Zm [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pu testFractionalPower ipv_X7Zk of
      { (# ipv_X7Zp [Dmd=<S,U>], ipv1_X7Zr [Dmd=<L,A>] #) ->
      $smeasure_s8a2 lvl_s8pw testIntegralPower ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s7Zj
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s89K
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier iteration=1 ====================
2019-11-05 16:48:03.438718802 UTC
  ---- Simplifier counts for Simplifier iteration=1
  Total ticks:     4
  
  1 UnfoldingDone 1 main
  3 FillInCaseDefault
    2 wild_a7QZ
    1 wild_a7Z0
  1 SimplifierDone 1
  ---- End of simplifier counts for Simplifier iteration=1
Result size of Simplifier iteration=1
  = {terms: 535, types: 542, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pb :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8pb = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pb)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8b3 [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
                        lvl_s8ct
                 of wild_a8dj [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
                 }}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
             lvl_s8ct
      of wild_a8dj [Dmd=<S,U>]
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8lM [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8lM
  = \ (ww_s8lD :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lz :: Integer)
      (ww_s8lH :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lz lvl_s8cb)
             lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lz lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH
          };
        1# ->
          $wg1_s8lM
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
            ww_s8lH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8lW [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8lW
  = \ (ww_s8lR :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lO :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lO lvl_s8cb)
             lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lO lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8m2 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8m2
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8lY lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lY lvl_s8ct
          of {
            __DEFAULT ->
              case w_s8lX of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lX [Occ=Once] :: Double)
                 (w_s8lY [Occ=Once] :: Integer) ->
                 case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
                 }}]
$s^_s8au
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8m8 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8m8
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8m4 lvl_s8ct
      of {
        __DEFAULT ->
          case $w$s^_s8m2
                 w_s8m3 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8m4)
          of ww_s8m1
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8m3 [Occ=Once] :: Double)
                 (w_s8m4 [Occ=Once] :: Integer) ->
                 case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
                 }}]
$s^^_s8ai
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 [Dmd=<S,H>] xs_a7Z4 [Dmd=<S,U>] ->
          case x_a7Z3 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc [Dmd=<L,A>] ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pc :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pc = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa [Dmd=<S,U>], ipv1_X7Xc [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jz [Dmd=<L,A>], y_X8jB [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7X5 ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX [Dmd=<L,A>] ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg [Dmd=<S,U>], ipv1_X7Xi [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jF [Dmd=<L,A>], y_X8jH [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xb ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi [Dmd=<S,U>], ipv1_X7Xk [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jH [Dmd=<L,A>], y_X8jJ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xd ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp [Dmd=<S,U>], ipv1_X7Xr [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jO [Dmd=<L,A>], y_X8jQ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xk ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7WY
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pg :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pg = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ph :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8ph = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pi :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pi = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8ph

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8pg
      lvl_s8pi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pj :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pj = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = GHC.Real.^_$s^ lvl_s8pj lvl_s8pg

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pl :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8pl = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pm :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pm = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $w$s^^_s8m8 lvl_s8pl lvl_s8pm of ww_s8m7 { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8pv = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pw :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pw = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pt :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pt = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pu = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pr :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pr = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8ps :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8ps = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pp :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pp = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pq :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pq = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pn :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8pn = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8po :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8po = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pn

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s7Zj
  = \ (s_a7YK [Dmd=<S,U>]
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac lvl_s8po testStimes s_a7YK of
      { (# ipv_a7YN [Dmd=<S,U>], ipv1_a7YO [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pq testFractionalPower ipv_a7YN of
      { (# ipv_X7Zf [Dmd=<S,U>], ipv1_X7Zh [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8ps testFractionalPower ipv_X7Zf of
      { (# ipv_X7Zk [Dmd=<S,U>], ipv1_X7Zm [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pu testFractionalPower ipv_X7Zk of
      { (# ipv_X7Zp [Dmd=<S,U>], ipv1_X7Zr [Dmd=<L,A>] #) ->
      $smeasure_s8a2 lvl_s8pw testIntegralPower ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s7Zj
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s89K
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai

