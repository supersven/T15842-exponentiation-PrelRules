
==================== Simplifier ====================
2019-11-05 16:48:02.983865338 UTC
  Max iterations = 4
  SimplMode {Phase = InitialPhase [Gentle],
             inline,
             rules,
             eta-expand,
             no case-of-case}
Result size of Simplifier
  = {terms: 170, types: 218, coercions: 47, joins: 1/2}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 730 0}]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Ub
      of
      { (# ipv_a7Ue, ipv1_a7Uf #) ->
      case ((case ($dNFData_a5KC
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                           :: NFData a_a5KA ~R# (a_a5KA -> ())))
                    f_a1UC
             of
             { () ->
             base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Ue
      of
      { (# ipv_X7UF, ipv1_X7UH #) ->
      let {
        duration_a1UG :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
        duration_a1UG
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7UH ipv1_a7Uf } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              " milli seconds -- "#
                              c_a7W2
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 " pico seconds"# c_a7W2 n_a7W3)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_a1UG
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_a1UG 1000000000)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7UF
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (GHC.Base.build
         @ Char
         (\ (@ b_a7VH) ->
            ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7VH "foo"#))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.5.3:GHC.Types.D# 5.0##)
      441

-- RHS size: {terms: 66, types: 90, coercions: 16, joins: 1/1}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 708 0}]
main_s7Zj
  = \ (s_a7YK
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case measure_s7WY
             @ String
             ((\ (eta_a7YX :: [Char]) ->
                 joinrec {
                   go_a7YY [Occ=LoopBreaker] :: [Char] -> ()
                   [LclId[JoinId(1)],
                    Arity=1,
                    Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                            WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 44 10}]
                   go_a7YY (ds_a7YZ :: [Char])
                     = case ds_a7YZ of {
                         [] -> ghc-prim-0.5.3:GHC.Tuple.();
                         : x_a7Z3 xs_a7Z4 ->
                           case case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
                                ghc-prim-0.5.3:GHC.Tuple.()
                                }
                           of
                           { () ->
                           jump go_a7YY xs_a7Z4
                           }
                       }; } in
                 jump go_a7YY eta_a7YX)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "stimes : "#))
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN, ipv1_a7YO #) ->
      case measure_s7WY
             @ Double
             ((rwhnf @ Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 1 : "#))
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf, ipv1_X7Zh #) ->
      case measure_s7WY
             @ Double
             ((rwhnf @ Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 2 : "#))
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk, ipv1_X7Zm #) ->
      case measure_s7WY
             @ Double
             ((rwhnf @ Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 3 : "#))
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp, ipv1_X7Zr #) ->
      measure_s7WY
        @ Integer
        ((rwhnf @ Integer)
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        (GHC.Base.build
           @ Char
           (\ (@ b_a7VH) ->
              ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                @ b_a7VH "integral power : "#))
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())



==================== Levels added: ====================
2019-11-05 16:48:03.044697509 UTC

<$dNFData_s8ab,<0,0>>
<$dNFData_s8ab,<0,0>>
  = (\ <eta_a7YX,<1,0>> ->
       letrec {
         <go_s8bn,F<0,0>>
         <go_s8bn,F<0,0>>
           = \ <ds_a7YZ,<1,0>> ->
               case ds_a7YZ of <wild_a7Z0,<1,2>> {
                 [] -> GHC.Tuple.();
                 : <x_a7Z3,<1,2>> <xs_a7Z4,<1,2>> ->
                   case case x_a7Z3 of <ds1_a7YU,<1,4>>
                        { GHC.Types.C# <ipv_s7Zc,<1,4>> ->
                        GHC.Tuple.()
                        }
                   of <wild1_a7Z6,<1,3>>
                   { () ->
                   go_s8bn xs_a7Z4
                   }
               }; } in
       go_s8bn eta_a7YX)
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[GHC.Types.Char]>_N)
            :: ([GHC.Types.Char] -> ())
               ~R# Control.DeepSeq.NFData [GHC.Types.Char]);
<$dNum1_s8an,<0,0>>
<$dNum1_s8an,<0,0>>
  = GHC.Real.$p1Fractional
      @ GHC.Types.Double GHC.Float.$fFractionalDouble;
<$seven_s8b8,<0,0>>
<$seven_s8b8,<0,0>>
  = let {
      <$dReal_s8bp,F<0,0>>
      <$dReal_s8bp,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
    let {
      <$dNum_s8br,F<0,0>>
      <$dNum_s8br,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal_s8bp } in
    let {
      <$dEq_s8bt,F<0,0>>
      <$dEq_s8bt,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal_s8bp } in
    let {
      <$dEq1_s8bv,F<0,0>>
      <$dEq1_s8bv,F<0,0>>
        = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dEq_s8bt } in
    \ <n_a8b3,<1,0>> ->
      GHC.Classes.==
        @ GHC.Integer.Type.Integer
        $dEq1_s8bv
        (GHC.Real.rem
           @ GHC.Integer.Type.Integer
           GHC.Real.$fIntegralInteger
           n_a8b3
           (let {
              <lvl_s8bx,F<0,0>>
              <lvl_s8bx,F<0,0>>
                = GHC.Num.fromInteger
                    @ GHC.Integer.Type.Integer
                    $dNum_s8br
                    (let {
                       <lvl_s8bw,F<0,0>>
                       <lvl_s8bw,F<0,0>> = 2 } in
                     lvl_s8bw) } in
            lvl_s8bx))
        (let {
           <lvl_s8bz,F<0,0>>
           <lvl_s8bz,F<0,0>>
             = GHC.Num.fromInteger
                 @ GHC.Integer.Type.Integer
                 $dNum_s8br
                 (let {
                    <lvl_s8by,F<0,0>>
                    <lvl_s8by,F<0,0>> = 0 } in
                  lvl_s8by) } in
         lvl_s8bz);
<$s^_s8au,<0,0>>
<$s^_s8au,<0,0>>
  = let {
      <$dReal_s8bB,F<0,0>>
      <$dReal_s8bB,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
    let {
      <$dNum1_s8bD,F<0,0>>
      <$dNum1_s8bD,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal_s8bB } in
    let {
      <$dOrd_s8bF,F<0,0>>
      <$dOrd_s8bF,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal_s8bB } in
    let {
      <$dEq_s8bH,F<0,0>>
      <$dEq_s8bH,F<0,0>>
        = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dOrd_s8bF } in
    \ <x0_a7Sd,<1,0>> <y0_a7Se,<1,0>> ->
      case GHC.Classes.<
             @ GHC.Integer.Type.Integer
             $dOrd_s8bF
             y0_a7Se
             (let {
                <lvl_s8bJ,F<0,0>>
                <lvl_s8bJ,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Integer.Type.Integer
                      $dNum1_s8bD
                      (let {
                         <lvl_s8bI,F<0,0>>
                         <lvl_s8bI,F<0,0>> = 0 } in
                       lvl_s8bI) } in
              lvl_s8bJ)
      of <wild_a7Sf,<1,2>> {
        GHC.Types.False ->
          case GHC.Classes.==
                 @ GHC.Integer.Type.Integer
                 $dEq_s8bH
                 y0_a7Se
                 (let {
                    <lvl_s8bL,F<0,0>>
                    <lvl_s8bL,F<0,0>>
                      = GHC.Num.fromInteger
                          @ GHC.Integer.Type.Integer
                          $dNum1_s8bD
                          (let {
                             <lvl_s8bK,F<0,0>>
                             <lvl_s8bK,F<0,0>> = 0 } in
                           lvl_s8bK) } in
                  lvl_s8bL)
          of <wild1_a7Si,<1,3>> {
            GHC.Types.False ->
              let {
                <$dReal1_s8bN,F<0,0>>
                <$dReal1_s8bN,F<0,0>>
                  = GHC.Real.$p1Integral
                      @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
              let {
                <$dNum2_s8bP,F<0,0>>
                <$dNum2_s8bP,F<0,0>>
                  = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal1_s8bN } in
              let {
                <$dEq1_s8bR,F<0,0>>
                <$dEq1_s8bR,F<0,0>>
                  = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal1_s8bN } in
              let {
                <$dEq2_s8bT,F<0,0>>
                <$dEq2_s8bT,F<0,0>>
                  = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dEq1_s8bR } in
              letrec {
                <f_s8bV,F<0,0>>
                <f_s8bV,F<0,0>>
                  = \ <x_a7Sq,<1,0>> <y_a7Sr,<1,0>> ->
                      case GHC.Real.even
                             @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger y_a7Sr
                      of <wild2_a7Su,<1,2>> {
                        GHC.Types.False ->
                          case GHC.Classes.==
                                 @ GHC.Integer.Type.Integer
                                 $dEq2_s8bT
                                 y_a7Sr
                                 (let {
                                    <lvl_s8bX,F<0,0>>
                                    <lvl_s8bX,F<0,0>>
                                      = GHC.Num.fromInteger
                                          @ GHC.Integer.Type.Integer
                                          $dNum2_s8bP
                                          (let {
                                             <lvl_s8bW,F<0,0>>
                                             <lvl_s8bW,F<0,0>> = 1 } in
                                           lvl_s8bW) } in
                                  lvl_s8bX)
                          of <wild3_a7Sx,<1,3>> {
                            GHC.Types.False ->
                              let {
                                <$dReal2_s8bZ,F<0,0>>
                                <$dReal2_s8bZ,F<0,0>>
                                  = GHC.Real.$p1Integral
                                      @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
                              let {
                                <$dNum3_s8c1,F<0,0>>
                                <$dNum3_s8c1,F<0,0>>
                                  = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal2_s8bZ } in
                              let {
                                <$dEq3_s8c3,F<0,0>>
                                <$dEq3_s8c3,F<0,0>>
                                  = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal2_s8bZ } in
                              let {
                                <$dEq4_s8c5,F<0,0>>
                                <$dEq4_s8c5,F<0,0>>
                                  = GHC.Classes.$p1Ord @ GHC.Integer.Type.Integer $dEq3_s8c3 } in
                              letrec {
                                <g1_s8c7,F<0,0>>
                                <g1_s8c7,F<0,0>>
                                  = \ <x1_a7SF,<1,0>> <y1_a7SG,<1,0>> <z_a7SH,<1,0>> ->
                                      case GHC.Real.even
                                             @ GHC.Integer.Type.Integer
                                             GHC.Real.$fIntegralInteger
                                             y1_a7SG
                                      of <wild4_a7SI,<1,2>> {
                                        GHC.Types.False ->
                                          case GHC.Classes.==
                                                 @ GHC.Integer.Type.Integer
                                                 $dEq4_s8c5
                                                 y1_a7SG
                                                 (let {
                                                    <lvl_s8c9,F<0,0>>
                                                    <lvl_s8c9,F<0,0>>
                                                      = GHC.Num.fromInteger
                                                          @ GHC.Integer.Type.Integer
                                                          $dNum3_s8c1
                                                          (let {
                                                             <lvl_s8c8,F<0,0>>
                                                             <lvl_s8c8,F<0,0>> = 1 } in
                                                           lvl_s8c8) } in
                                                  lvl_s8c9)
                                          of <wild5_a7SL,<1,3>> {
                                            GHC.Types.False ->
                                              g1_s8c7
                                                (GHC.Num.*
                                                   @ GHC.Types.Double $dNum1_s8an x1_a7SF x1_a7SF)
                                                (GHC.Real.quot
                                                   @ GHC.Integer.Type.Integer
                                                   GHC.Real.$fIntegralInteger
                                                   y1_a7SG
                                                   (let {
                                                      <lvl_s8cb,F<0,0>>
                                                      <lvl_s8cb,F<0,0>>
                                                        = GHC.Num.fromInteger
                                                            @ GHC.Integer.Type.Integer
                                                            $dNum3_s8c1
                                                            (let {
                                                               <lvl_s8ca,F<0,0>>
                                                               <lvl_s8ca,F<0,0>> = 2 } in
                                                             lvl_s8ca) } in
                                                    lvl_s8cb))
                                                (GHC.Num.*
                                                   @ GHC.Types.Double $dNum1_s8an x1_a7SF z_a7SH);
                                            GHC.Types.True ->
                                              GHC.Num.*
                                                @ GHC.Types.Double $dNum1_s8an x1_a7SF z_a7SH
                                          };
                                        GHC.Types.True ->
                                          g1_s8c7
                                            (GHC.Num.*
                                               @ GHC.Types.Double $dNum1_s8an x1_a7SF x1_a7SF)
                                            (GHC.Real.quot
                                               @ GHC.Integer.Type.Integer
                                               GHC.Real.$fIntegralInteger
                                               y1_a7SG
                                               (let {
                                                  <lvl_s8cd,F<0,0>>
                                                  <lvl_s8cd,F<0,0>>
                                                    = GHC.Num.fromInteger
                                                        @ GHC.Integer.Type.Integer
                                                        $dNum3_s8c1
                                                        (let {
                                                           <lvl_s8cc,F<0,0>>
                                                           <lvl_s8cc,F<0,0>> = 2 } in
                                                         lvl_s8cc) } in
                                                lvl_s8cd))
                                            z_a7SH
                                      }; } in
                              g1_s8c7
                                (GHC.Num.* @ GHC.Types.Double $dNum1_s8an x_a7Sq x_a7Sq)
                                (GHC.Real.quot
                                   @ GHC.Integer.Type.Integer
                                   GHC.Real.$fIntegralInteger
                                   y_a7Sr
                                   (let {
                                      <lvl_s8cf,F<0,0>>
                                      <lvl_s8cf,F<0,0>>
                                        = GHC.Num.fromInteger
                                            @ GHC.Integer.Type.Integer
                                            $dNum2_s8bP
                                            (let {
                                               <lvl_s8ce,F<0,0>>
                                               <lvl_s8ce,F<0,0>> = 2 } in
                                             lvl_s8ce) } in
                                    lvl_s8cf))
                                x_a7Sq;
                            GHC.Types.True -> x_a7Sq
                          };
                        GHC.Types.True ->
                          f_s8bV
                            (GHC.Num.* @ GHC.Types.Double $dNum1_s8an x_a7Sq x_a7Sq)
                            (GHC.Real.quot
                               @ GHC.Integer.Type.Integer
                               GHC.Real.$fIntegralInteger
                               y_a7Sr
                               (let {
                                  <lvl_s8ch,F<0,0>>
                                  <lvl_s8ch,F<0,0>>
                                    = GHC.Num.fromInteger
                                        @ GHC.Integer.Type.Integer
                                        $dNum2_s8bP
                                        (let {
                                           <lvl_s8cg,F<0,0>>
                                           <lvl_s8cg,F<0,0>> = 2 } in
                                         lvl_s8cg) } in
                                lvl_s8ch))
                      }; } in
              f_s8bV x0_a7Sd y0_a7Se;
            GHC.Types.True ->
              let {
                <lvl_s8cj,F<0,0>>
                <lvl_s8cj,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Types.Double
                      $dNum1_s8an
                      (let {
                         <lvl_s8ci,F<0,0>>
                         <lvl_s8ci,F<0,0>> = 1 } in
                       lvl_s8ci) } in
              lvl_s8cj
          };
        GHC.Types.True ->
          let {
            <lvl_s8cl,F<0,0>>
            <lvl_s8cl,F<0,0>>
              = GHC.Err.errorWithoutStackTrace
                  @ 'GHC.Types.LiftedRep
                  @ GHC.Types.Double
                  (GHC.CString.unpackCString#
                     (let {
                        <lvl_s8ck,F<0,0>>
                        <lvl_s8ck,F<0,0>> = "Negative exponent"# } in
                      lvl_s8ck)) } in
          lvl_s8cl
      };
<$s^^_s8ai,<0,0>>
<$s^^_s8ai,<0,0>>
  = let {
      <$dReal_s8cn,F<0,0>>
      <$dReal_s8cn,F<0,0>>
        = GHC.Real.$p1Integral
            @ GHC.Integer.Type.Integer GHC.Real.$fIntegralInteger } in
    let {
      <$dNum_s8cp,F<0,0>>
      <$dNum_s8cp,F<0,0>>
        = GHC.Real.$p1Real @ GHC.Integer.Type.Integer $dReal_s8cn } in
    let {
      <$dOrd_s8cr,F<0,0>>
      <$dOrd_s8cr,F<0,0>>
        = GHC.Real.$p2Real @ GHC.Integer.Type.Integer $dReal_s8cn } in
    \ <x_a7RX,<1,0>> <n_a7RY,<1,0>> ->
      case GHC.Classes.>=
             @ GHC.Integer.Type.Integer
             $dOrd_s8cr
             n_a7RY
             (let {
                <lvl_s8ct,F<0,0>>
                <lvl_s8ct,F<0,0>>
                  = GHC.Num.fromInteger
                      @ GHC.Integer.Type.Integer
                      $dNum_s8cp
                      (let {
                         <lvl_s8cs,F<0,0>>
                         <lvl_s8cs,F<0,0>> = 0 } in
                       lvl_s8cs) } in
              lvl_s8ct)
      of <wild_a7RZ,<1,2>> {
        GHC.Types.False ->
          GHC.Real.recip
            @ GHC.Types.Double
            GHC.Float.$fFractionalDouble
            (GHC.Real.^
               @ GHC.Types.Double
               @ GHC.Integer.Type.Integer
               $dNum1_s8an
               GHC.Real.$fIntegralInteger
               x_a7RX
               (GHC.Num.negate @ GHC.Integer.Type.Integer $dNum_s8cp n_a7RY));
        GHC.Types.True ->
          GHC.Real.^
            @ GHC.Types.Double
            @ GHC.Integer.Type.Integer
            $dNum1_s8an
            GHC.Real.$fIntegralInteger
            x_a7RX
            n_a7RY
      };
<$trModule_s7TB,<0,0>>
<$trModule_s7TB,<0,0>> = "main"#
<$trModule_s7TC,<0,0>>
<$trModule_s7TC,<0,0>> = GHC.Types.TrNameS $trModule_s7TB
<$trModule_s7TD,<0,0>>
<$trModule_s7TD,<0,0>> = "Main"#
<$trModule_s7TE,<0,0>>
<$trModule_s7TE,<0,0>> = GHC.Types.TrNameS $trModule_s7TD
<Main.$trModule,<0,0>>
<Main.$trModule,<0,0>>
  = GHC.Types.Module $trModule_s7TC $trModule_s7TE
<$smeasure_s8ac,<0,0>>
<$smeasure_s8ac,<0,0>>
  = \ <description_a1UB,<1,0>> <f_a1UC,<1,0>> <s_a7Ub,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Ub
      of <ds1_a7Uc,<1,2>>
      { (# <ipv_a7Ue,<1,2>>, <ipv1_a7Uf,<1,2>> #) ->
      case ((case ($dNFData_s8ab
                   `cast` (Control.DeepSeq.N:NFData[0] <GHC.Base.String>_N
                           :: Control.DeepSeq.NFData GHC.Base.String
                              ~R# (GHC.Base.String -> ())))
                    f_a1UC
             of <wild_a7QZ,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Ue
      of <ds1_X7UB,<1,3>>
      { (# <ipv_X7UF,<1,3>>, <ipv1_X7UH,<1,3>> #) ->
      let {
        <duration_s8ae,<1,4>>
        <duration_s8ae,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7UH ipv1_a7Uf } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7W1,<1,7>> <c_a7W2,<1,7>> <n_a7W3,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7W1
                        c_a7W2
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7W1
                           c_a7W2
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              (let {
                                 <lvl_s8cu,F<0,0>>
                                 <lvl_s8cu,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8cu)
                              c_a7W2
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7W1
                                 c_a7W2
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7W1
                                    (let {
                                       <lvl_s8cv,F<0,0>>
                                       <lvl_s8cv,F<0,0>> = " pico seconds"# } in
                                     lvl_s8cv)
                                    c_a7W2
                                    n_a7W3)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8ae
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8ae
                                 (let {
                                    <lvl_s8cw,F<0,0>>
                                    <lvl_s8cw,F<0,0>> = 1000000000 } in
                                  lvl_s8cw))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1UB))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7UF
      }
      }
<$smeasure_s8a6,<0,0>>
<$smeasure_s8a6,<0,0>>
  = \ <description_a1UB,<1,0>> <f_a1UC,<1,0>> <s_a7Ub,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Ub
      of <ds1_a7Uc,<1,2>>
      { (# <ipv_a7Ue,<1,2>>, <ipv1_a7Uf,<1,2>> #) ->
      case ((case ((Control.DeepSeq.rwhnf @ GHC.Types.Double)
                   `cast` (Sym (Control.DeepSeq.N:NFData[0]
                                    <GHC.Types.Double>_N) ; Control.DeepSeq.N:NFData[0]
                                                                <GHC.Types.Double>_N
                           :: (GHC.Types.Double -> ()) ~R# (GHC.Types.Double -> ())))
                    f_a1UC
             of <wild_a7QZ,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Ue
      of <ds1_X7UB,<1,3>>
      { (# <ipv_X7UF,<1,3>>, <ipv1_X7UH,<1,3>> #) ->
      let {
        <duration_s8a8,<1,4>>
        <duration_s8a8,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7UH ipv1_a7Uf } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7W1,<1,7>> <c_a7W2,<1,7>> <n_a7W3,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7W1
                        c_a7W2
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7W1
                           c_a7W2
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              (let {
                                 <lvl_s8cx,F<0,0>>
                                 <lvl_s8cx,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8cx)
                              c_a7W2
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7W1
                                 c_a7W2
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7W1
                                    (let {
                                       <lvl_s8cy,F<0,0>>
                                       <lvl_s8cy,F<0,0>> = " pico seconds"# } in
                                     lvl_s8cy)
                                    c_a7W2
                                    n_a7W3)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8a8
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8a8
                                 (let {
                                    <lvl_s8cz,F<0,0>>
                                    <lvl_s8cz,F<0,0>> = 1000000000 } in
                                  lvl_s8cz))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1UB))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7UF
      }
      }
<$smeasure_s8a2,<0,0>>
<$smeasure_s8a2,<0,0>>
  = \ <description_a1UB,<1,0>> <f_a1UC,<1,0>> <s_a7Ub,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Ub
      of <ds1_a7Uc,<1,2>>
      { (# <ipv_a7Ue,<1,2>>, <ipv1_a7Uf,<1,2>> #) ->
      case ((case ((Control.DeepSeq.rwhnf @ GHC.Integer.Type.Integer)
                   `cast` (Sym (Control.DeepSeq.N:NFData[0]
                                    <GHC.Integer.Type.Integer>_N) ; Control.DeepSeq.N:NFData[0]
                                                                        <GHC.Integer.Type.Integer>_N
                           :: (GHC.Integer.Type.Integer -> ())
                              ~R# (GHC.Integer.Type.Integer -> ())))
                    f_a1UC
             of <wild_a7QZ,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Ue
      of <ds1_X7UB,<1,3>>
      { (# <ipv_X7UF,<1,3>>, <ipv1_X7UH,<1,3>> #) ->
      let {
        <duration_s8a4,<1,4>>
        <duration_s8a4,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7UH ipv1_a7Uf } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7W1,<1,7>> <c_a7W2,<1,7>> <n_a7W3,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7W1
                        c_a7W2
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7W1
                           c_a7W2
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              (let {
                                 <lvl_s8cA,F<0,0>>
                                 <lvl_s8cA,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8cA)
                              c_a7W2
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7W1
                                 c_a7W2
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7W1
                                    (let {
                                       <lvl_s8cB,F<0,0>>
                                       <lvl_s8cB,F<0,0>> = " pico seconds"# } in
                                     lvl_s8cB)
                                    c_a7W2
                                    n_a7W3)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8a4
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8a4
                                 (let {
                                    <lvl_s8cC,F<0,0>>
                                    <lvl_s8cC,F<0,0>> = 1000000000 } in
                                  lvl_s8cC))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1UB))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7UF
      }
      }
<measure_s7WY,<0,0>>
<measure_s7WY,<0,0>>
  = \ <a_a5KA,<1,0>>
      <$dNFData_a5KC,<1,0>>
      <description_a1UB,<1,0>>
      <f_a1UC,<1,0>>
      <s_a7Ub,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime1 s_a7Ub
      of <ds1_a7Uc,<1,2>>
      { (# <ipv_a7Ue,<1,2>>, <ipv1_a7Uf,<1,2>> #) ->
      case ((case ($dNFData_a5KC
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                           :: Control.DeepSeq.NFData a_a5KA ~R# (a_a5KA -> ())))
                    f_a1UC
             of <wild_a7QZ,<1,6>>
             { () ->
             System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)
                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Integer.Type.Integer #))
                        ~R# GHC.Types.IO GHC.Integer.Type.Integer)
             })
            `cast` (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R
                    :: GHC.Types.IO GHC.Integer.Type.Integer
                       ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  GHC.Integer.Type.Integer #))))
             ipv_a7Ue
      of <ds1_X7UB,<1,3>>
      { (# <ipv_X7UF,<1,3>>, <ipv1_X7UH,<1,3>> #) ->
      let {
        <duration_s8a0,<1,4>>
        <duration_s8a0,<1,4>>
          = GHC.Integer.Type.minusInteger ipv1_X7UH ipv1_a7Uf } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ GHC.Types.Char
                   (\ <b_a7W1,<1,7>> <c_a7W2,<1,7>> <n_a7W3,<1,7>> ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b_a7W1
                        c_a7W2
                        (GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b_a7W1
                           c_a7W2
                           (GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              (let {
                                 <lvl_s8cD,F<0,0>>
                                 <lvl_s8cD,F<0,0>> = " milli seconds -- "# } in
                               lvl_s8cD)
                              c_a7W2
                              (GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b_a7W1
                                 c_a7W2
                                 (GHC.CString.unpackFoldrCString#
                                    @ b_a7W1
                                    (let {
                                       <lvl_s8cE,F<0,0>>
                                       <lvl_s8cE,F<0,0>> = " pico seconds"# } in
                                     lvl_s8cE)
                                    c_a7W2
                                    n_a7W3)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8a0
                                    (GHC.Types.[] @ GHC.Types.Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (GHC.Integer.Type.divInteger
                                 duration_s8a0
                                 (let {
                                    <lvl_s8cF,F<0,0>>
                                    <lvl_s8cF,F<0,0>> = 1000000000 } in
                                  lvl_s8cF))
                              (GHC.Types.[] @ GHC.Types.Char)))
                        description_a1UB))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7UF
      }
      }
<Main.measure,<0,0>>
<Main.measure,<0,0>>
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <Control.DeepSeq.NFData a>_R
            ->_R <GHC.Base.String>_R
            ->_R <a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Control.DeepSeq.NFData a =>
                GHC.Base.String
                -> a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# (forall a.
                    Control.DeepSeq.NFData a =>
                    GHC.Base.String -> a -> GHC.Types.IO ()))
<Main.testStimes,<0,0>>
<Main.testStimes,<0,0>>
  = GHC.Magic.noinline
      @ (forall b a. GHC.Real.Integral b => b -> [a] -> [a])
      Data.Semigroup.Internal.stimesList
      @ GHC.Integer.Type.Integer
      @ GHC.Types.Char
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8cG,F<0,0>>
         <lvl_s8cG,F<0,0>> = 1000000 } in
       lvl_s8cG)
      (let {
         <lvl_s8cJ,F<0,0>>
         <lvl_s8cJ,F<0,0>>
           = GHC.Base.build
               @ GHC.Types.Char
               (let {
                  <lvl_s8cI,F<0,0>>
                  <lvl_s8cI,F<0,0>>
                    = \ <b_a7VH,<0,1>> ->
                        GHC.CString.unpackFoldrCString#
                          @ b_a7VH
                          (let {
                             <lvl_s8cH,F<0,0>>
                             <lvl_s8cH,F<0,0>> = "foo"# } in
                           lvl_s8cH) } in
                lvl_s8cI) } in
       lvl_s8cJ)
<Main.testIntegralPower,<0,0>>
<Main.testIntegralPower,<0,0>>
  = GHC.Real.^
      @ GHC.Integer.Type.Integer
      @ GHC.Integer.Type.Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8cK,F<0,0>>
         <lvl_s8cK,F<0,0>> = 3 } in
       lvl_s8cK)
      (let {
         <lvl_s8cL,F<0,0>>
         <lvl_s8cL,F<0,0>> = 1000000 } in
       lvl_s8cL)
<Main.testFractionalPower,<0,0>>
<Main.testFractionalPower,<0,0>>
  = GHC.Real.^^
      @ GHC.Types.Double
      @ GHC.Integer.Type.Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8cM,F<0,0>>
         <lvl_s8cM,F<0,0>> = GHC.Types.D# 5.0## } in
       lvl_s8cM)
      (let {
         <lvl_s8cN,F<0,0>>
         <lvl_s8cN,F<0,0>> = 441 } in
       lvl_s8cN)
<main_s7Zj,<0,0>>
<main_s7Zj,<0,0>>
  = \ <s_a7YK,<0,1>> ->
      case measure_s7WY
             @ GHC.Base.String
             ((let {
                 <lvl_s8cQ,F<0,0>>
                 <lvl_s8cQ,F<0,0>>
                   = \ <eta_a7YX,<1,0>> ->
                       letrec {
                         <go_s8cP,F<0,0>>
                         <go_s8cP,F<0,0>>
                           = \ <ds_a7YZ,<1,0>> ->
                               case ds_a7YZ of <wild_a7Z0,<1,2>> {
                                 [] -> GHC.Tuple.();
                                 : <x_a7Z3,<1,2>> <xs_a7Z4,<1,2>> ->
                                   case case x_a7Z3 of <ds1_a7YU,<1,4>>
                                        { GHC.Types.C# <ipv_s7Zc,<1,4>> ->
                                        GHC.Tuple.()
                                        }
                                   of <wild1_a7Z6,<1,3>>
                                   { () ->
                                   go_s8cP xs_a7Z4
                                   }
                               }; } in
                       go_s8cP eta_a7YX } in
               lvl_s8cQ)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[GHC.Types.Char]>_N)
                      :: ([GHC.Types.Char] -> ())
                         ~R# Control.DeepSeq.NFData [GHC.Types.Char]))
             (let {
                <lvl_s8cT,F<0,0>>
                <lvl_s8cT,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8cS,F<0,0>>
                         <lvl_s8cS,F<0,0>>
                           = \ <b_a7VH,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7VH
                                 (let {
                                    <lvl_s8cR,F<0,0>>
                                    <lvl_s8cR,F<0,0>> = "stimes : "# } in
                                  lvl_s8cR) } in
                       lvl_s8cS) } in
              lvl_s8cT)
             Main.testStimes
             s_a7YK
      of <ds1_a7YL,<0,3>>
      { (# <ipv_a7YN,<0,3>>, <ipv1_a7YO,<0,3>> #) ->
      case measure_s7WY
             @ GHC.Types.Double
             ((Control.DeepSeq.rwhnf @ GHC.Types.Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8cW,F<0,0>>
                <lvl_s8cW,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8cV,F<0,0>>
                         <lvl_s8cV,F<0,0>>
                           = \ <b_a7VH,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7VH
                                 (let {
                                    <lvl_s8cU,F<0,0>>
                                    <lvl_s8cU,F<0,0>> = "fractional power 1 : "# } in
                                  lvl_s8cU) } in
                       lvl_s8cV) } in
              lvl_s8cW)
             Main.testFractionalPower
             ipv_a7YN
      of <ds1_X7Zb,<0,4>>
      { (# <ipv_X7Zf,<0,4>>, <ipv1_X7Zh,<0,4>> #) ->
      case measure_s7WY
             @ GHC.Types.Double
             ((Control.DeepSeq.rwhnf @ GHC.Types.Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8cZ,F<0,0>>
                <lvl_s8cZ,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8cY,F<0,0>>
                         <lvl_s8cY,F<0,0>>
                           = \ <b_a7VH,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7VH
                                 (let {
                                    <lvl_s8cX,F<0,0>>
                                    <lvl_s8cX,F<0,0>> = "fractional power 2 : "# } in
                                  lvl_s8cX) } in
                       lvl_s8cY) } in
              lvl_s8cZ)
             Main.testFractionalPower
             ipv_X7Zf
      of <ds1_X7Zg,<0,5>>
      { (# <ipv_X7Zk,<0,5>>, <ipv1_X7Zm,<0,5>> #) ->
      case measure_s7WY
             @ GHC.Types.Double
             ((Control.DeepSeq.rwhnf @ GHC.Types.Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Double>_N)
                      :: (GHC.Types.Double -> ())
                         ~R# Control.DeepSeq.NFData GHC.Types.Double))
             (let {
                <lvl_s8d2,F<0,0>>
                <lvl_s8d2,F<0,0>>
                  = GHC.Base.build
                      @ GHC.Types.Char
                      (let {
                         <lvl_s8d1,F<0,0>>
                         <lvl_s8d1,F<0,0>>
                           = \ <b_a7VH,<0,1>> ->
                               GHC.CString.unpackFoldrCString#
                                 @ b_a7VH
                                 (let {
                                    <lvl_s8d0,F<0,0>>
                                    <lvl_s8d0,F<0,0>> = "fractional power 3 : "# } in
                                  lvl_s8d0) } in
                       lvl_s8d1) } in
              lvl_s8d2)
             Main.testFractionalPower
             ipv_X7Zk
      of <ds1_X7Zl,<0,6>>
      { (# <ipv_X7Zp,<0,6>>, <ipv1_X7Zr,<0,6>> #) ->
      measure_s7WY
        @ GHC.Integer.Type.Integer
        ((Control.DeepSeq.rwhnf @ GHC.Integer.Type.Integer)
         `cast` (Sym (Control.DeepSeq.N:NFData[0]
                          <GHC.Integer.Type.Integer>_N)
                 :: (GHC.Integer.Type.Integer -> ())
                    ~R# Control.DeepSeq.NFData GHC.Integer.Type.Integer))
        (let {
           <lvl_s8d5,F<0,0>>
           <lvl_s8d5,F<0,0>>
             = GHC.Base.build
                 @ GHC.Types.Char
                 (let {
                    <lvl_s8d4,F<0,0>>
                    <lvl_s8d4,F<0,0>>
                      = \ <b_a7VH,<0,1>> ->
                          GHC.CString.unpackFoldrCString#
                            @ b_a7VH
                            (let {
                               <lvl_s8d3,F<0,0>>
                               <lvl_s8d3,F<0,0>> = "integral power : "# } in
                             lvl_s8d3) } in
                  lvl_s8d4) } in
         lvl_s8d5)
        Main.testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }
<Main.main,<0,0>>
<Main.main,<0,0>>
  = main_s7Zj
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())
<main_s89K,<0,0>>
<main_s89K,<0,0>>
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# GHC.Types.IO ()))
<:Main.main,<0,0>>
<:Main.main,<0,0>>
  = main_s89K
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())


==================== Float out(FOS {Lam = Just 0, Consts = True, OverSatApps = False}) ====================
2019-11-05 16:48:03.058036484 UTC

Result size of Float out(FOS {Lam = Just 0,
                              Consts = True,
                              OverSatApps = False})
  = {terms: 702, types: 648, coercions: 86, joins: 0/4}

Rec {
-- RHS size: {terms: 14, types: 10, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 xs_a7Z4 ->
          case case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
               ghc-prim-0.5.3:GHC.Tuple.()
               }
          of
          { () ->
          go_s8bn xs_a7Z4
          }
      }

-- RHS size: {terms: 3, types: 2, coercions: 4, joins: 0/0}
$dNFData_s8ab :: NFData String
[LclId]
$dNFData_s8ab
  = (\ (eta_a7YX :: [Char]) -> go_s8bn eta_a7YX)
    `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
            :: ([Char] -> ()) ~R# NFData [Char])

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8an [Occ=OnceL*] :: Num Double
[LclId]
$dNum1_s8an
  = GHC.Real.$p1Fractional @ Double GHC.Float.$fFractionalDouble

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8bp :: Real Integer
[LclId]
$dReal_s8bp
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum_s8br :: Num Integer
[LclId]
$dNum_s8br = GHC.Real.$p1Real @ Integer $dReal_s8bp

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq_s8bt [Occ=OnceL] :: Ord Integer
[LclId]
$dEq_s8bt = GHC.Real.$p2Real @ Integer $dReal_s8bp

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq1_s8bv [Occ=OnceL] :: Eq Integer
[LclId]
$dEq1_s8bv = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dEq_s8bt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bw :: Integer
[LclId]
lvl_s8bw = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId]
lvl_s8bx = fromInteger @ Integer $dNum_s8br lvl_s8bw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8by :: Integer
[LclId]
lvl_s8by = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId]
lvl_s8bz = fromInteger @ Integer $dNum_s8br lvl_s8by

-- RHS size: {terms: 8, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId, Arity=1]
$seven_s8b8
  = \ (n_a8b3 [Occ=Once] :: Integer) ->
      ==
        @ Integer
        $dEq1_s8bv
        (rem @ Integer GHC.Real.$fIntegralInteger n_a8b3 lvl_s8bx)
        lvl_s8bz

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8bB :: Real Integer
[LclId]
$dReal_s8bB
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum1_s8bD :: Num Integer
[LclId]
$dNum1_s8bD = GHC.Real.$p1Real @ Integer $dReal_s8bB

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dOrd_s8bF :: Ord Integer
[LclId]
$dOrd_s8bF = GHC.Real.$p2Real @ Integer $dReal_s8bB

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq_s8bH [Occ=OnceL] :: Eq Integer
[LclId]
$dEq_s8bH = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dOrd_s8bF

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal1_s8bN :: Real Integer
[LclId]
$dReal1_s8bN
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum2_s8bP :: Num Integer
[LclId]
$dNum2_s8bP = GHC.Real.$p1Real @ Integer $dReal1_s8bN

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq1_s8bR [Occ=OnceL] :: Ord Integer
[LclId]
$dEq1_s8bR = GHC.Real.$p2Real @ Integer $dReal1_s8bN

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq2_s8bT [Occ=OnceL] :: Eq Integer
[LclId]
$dEq2_s8bT = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dEq1_s8bR

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal2_s8bZ :: Real Integer
[LclId]
$dReal2_s8bZ
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum3_s8c1 :: Num Integer
[LclId]
$dNum3_s8c1 = GHC.Real.$p1Real @ Integer $dReal2_s8bZ

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq3_s8c3 [Occ=OnceL] :: Ord Integer
[LclId]
$dEq3_s8c3 = GHC.Real.$p2Real @ Integer $dReal2_s8bZ

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dEq4_s8c5 [Occ=OnceL] :: Eq Integer
[LclId]
$dEq4_s8c5 = ghc-prim-0.5.3:GHC.Classes.$p1Ord @ Integer $dEq3_s8c3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ca :: Integer
[LclId]
lvl_s8ca = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId]
lvl_s8cb = fromInteger @ Integer $dNum3_s8c1 lvl_s8ca

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c8 :: Integer
[LclId]
lvl_s8c8 = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId]
lvl_s8c9 = fromInteger @ Integer $dNum3_s8c1 lvl_s8c8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cc :: Integer
[LclId]
lvl_s8cc = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId]
lvl_s8cd = fromInteger @ Integer $dNum3_s8c1 lvl_s8cc

-- RHS size: {terms: 43, types: 13, coercions: 0, joins: 0/0}
g1_s8c7 [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId, Arity=3]
g1_s8c7
  = \ (x1_a7SF :: Double)
      (y1_a7SG :: Integer)
      (z_a7SH [Occ=Once*] :: Double) ->
      case even @ Integer GHC.Real.$fIntegralInteger y1_a7SG of {
        False ->
          case == @ Integer $dEq4_s8c5 y1_a7SG lvl_s8c9 of {
            False ->
              g1_s8c7
                (* @ Double $dNum1_s8an x1_a7SF x1_a7SF)
                (quot @ Integer GHC.Real.$fIntegralInteger y1_a7SG lvl_s8cb)
                (* @ Double $dNum1_s8an x1_a7SF z_a7SH);
            True -> * @ Double $dNum1_s8an x1_a7SF z_a7SH
          };
        True ->
          g1_s8c7
            (* @ Double $dNum1_s8an x1_a7SF x1_a7SF)
            (quot @ Integer GHC.Real.$fIntegralInteger y1_a7SG lvl_s8cd)
            z_a7SH
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ce :: Integer
[LclId]
lvl_s8ce = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId]
lvl_s8cf = fromInteger @ Integer $dNum2_s8bP lvl_s8ce

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bW :: Integer
[LclId]
lvl_s8bW = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId]
lvl_s8bX = fromInteger @ Integer $dNum2_s8bP lvl_s8bW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cg :: Integer
[LclId]
lvl_s8cg = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId]
lvl_s8ch = fromInteger @ Integer $dNum2_s8bP lvl_s8cg

-- RHS size: {terms: 35, types: 10, coercions: 0, joins: 0/0}
f_s8bV [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId, Arity=2]
f_s8bV
  = \ (x_a7Sq :: Double) (y_a7Sr :: Integer) ->
      case even @ Integer GHC.Real.$fIntegralInteger y_a7Sr of {
        False ->
          case == @ Integer $dEq2_s8bT y_a7Sr lvl_s8bX of {
            False ->
              g1_s8c7
                (* @ Double $dNum1_s8an x_a7Sq x_a7Sq)
                (quot @ Integer GHC.Real.$fIntegralInteger y_a7Sr lvl_s8cf)
                x_a7Sq;
            True -> x_a7Sq
          };
        True ->
          f_s8bV
            (* @ Double $dNum1_s8an x_a7Sq x_a7Sq)
            (quot @ Integer GHC.Real.$fIntegralInteger y_a7Sr lvl_s8ch)
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ci :: Integer
[LclId]
lvl_s8ci = 1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8cj :: Double
[LclId]
lvl_s8cj = fromInteger @ Double $dNum1_s8an lvl_s8ci

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bK :: Integer
[LclId]
lvl_s8bK = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId]
lvl_s8bL = fromInteger @ Integer $dNum1_s8bD lvl_s8bK

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ck :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8ck = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId, Str=x]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8ck)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bI :: Integer
[LclId]
lvl_s8bI = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId]
lvl_s8bJ = fromInteger @ Integer $dNum1_s8bD lvl_s8bI

-- RHS size: {terms: 21, types: 6, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId, Arity=2]
$s^_s8au
  = \ (x0_a7Sd [Occ=Once] :: Double) (y0_a7Se :: Integer) ->
      case < @ Integer $dOrd_s8bF y0_a7Se lvl_s8bJ of {
        False ->
          case == @ Integer $dEq_s8bH y0_a7Se lvl_s8bL of {
            False -> f_s8bV x0_a7Sd y0_a7Se;
            True -> lvl_s8cj
          };
        True -> lvl_s8cl
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dReal_s8cn :: Real Integer
[LclId]
$dReal_s8cn
  = GHC.Real.$p1Integral @ Integer GHC.Real.$fIntegralInteger

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dNum_s8cp :: Num Integer
[LclId]
$dNum_s8cp = GHC.Real.$p1Real @ Integer $dReal_s8cn

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$dOrd_s8cr [Occ=OnceL] :: Ord Integer
[LclId]
$dOrd_s8cr = GHC.Real.$p2Real @ Integer $dReal_s8cn

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cs :: Integer
[LclId]
lvl_s8cs = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId]
lvl_s8ct = fromInteger @ Integer $dNum_s8cp lvl_s8cs

-- RHS size: {terms: 23, types: 10, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId, Arity=2]
$s^^_s8ai
  = \ (x_a7RX [Occ=Once*] :: Double) (n_a7RY :: Integer) ->
      case >= @ Integer $dOrd_s8cr n_a7RY lvl_s8ct of {
        False ->
          recip
            @ Double
            GHC.Float.$fFractionalDouble
            (^ @ Double
               @ Integer
               $dNum1_s8an
               GHC.Real.$fIntegralInteger
               x_a7RX
               (negate @ Integer $dNum_s8cp n_a7RY));
        True ->
          ^ @ Double
            @ Integer
            $dNum1_s8an
            GHC.Real.$fIntegralInteger
            x_a7RX
            n_a7RY
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId]
lvl_s8cw = 1000000000

-- RHS size: {terms: 55, types: 46, coercions: 9, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Ub
      of
      { (# ipv_a7Ue, ipv1_a7Uf #) ->
      case ((case ($dNFData_s8ab
                   `cast` (Control.DeepSeq.N:NFData[0] <String>_N
                           :: NFData String ~R# (String -> ())))
                    f_a1UC
             of
             { () ->
             base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Ue
      of
      { (# ipv_X7UF, ipv1_X7UH #) ->
      let {
        duration_s8ae :: Integer
        [LclId]
        duration_s8ae
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7UH ipv1_a7Uf } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cu
                              c_a7W2
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cv c_a7W2 n_a7W3)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8ae
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8ae lvl_s8cw)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7UF
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId]
lvl_s8cz = 1000000000

-- RHS size: {terms: 55, types: 47, coercions: 13, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Ub
      of
      { (# ipv_a7Ue, ipv1_a7Uf #) ->
      case ((case ((rwhnf @ Double)
                   `cast` (Sym (Control.DeepSeq.N:NFData[0]
                                    <Double>_N) ; Control.DeepSeq.N:NFData[0] <Double>_N
                           :: (Double -> ()) ~R# (Double -> ())))
                    f_a1UC
             of
             { () ->
             base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Ue
      of
      { (# ipv_X7UF, ipv1_X7UH #) ->
      let {
        duration_s8a8 :: Integer
        [LclId]
        duration_s8a8
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7UH ipv1_a7Uf } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cx
                              c_a7W2
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cy c_a7W2 n_a7W3)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8a8
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8a8 lvl_s8cz)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7UF
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId]
lvl_s8cC = 1000000000

-- RHS size: {terms: 55, types: 47, coercions: 13, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Ub
      of
      { (# ipv_a7Ue, ipv1_a7Uf #) ->
      case ((case ((rwhnf @ Integer)
                   `cast` (Sym (Control.DeepSeq.N:NFData[0]
                                    <Integer>_N) ; Control.DeepSeq.N:NFData[0] <Integer>_N
                           :: (Integer -> ()) ~R# (Integer -> ())))
                    f_a1UC
             of
             { () ->
             base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Ue
      of
      { (# ipv_X7UF, ipv1_X7UH #) ->
      let {
        duration_s8a4 :: Integer
        [LclId]
        duration_s8a4
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7UH ipv1_a7Uf } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cA
                              c_a7W2
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cB c_a7W2 n_a7W3)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8a4
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8a4 lvl_s8cC)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7UF
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId]
lvl_s8cF = 1000000000

-- RHS size: {terms: 57, types: 50, coercions: 9, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             s_a7Ub
      of
      { (# ipv_a7Ue, ipv1_a7Uf #) ->
      case ((case ($dNFData_a5KC
                   `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                           :: NFData a_a5KA ~R# (a_a5KA -> ())))
                    f_a1UC
             of
             { () ->
             base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime1
             `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R)
                     :: (ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                 ghc-prim-0.5.3:GHC.Prim.RealWorld,
                               Integer #))
                        ~R# IO Integer)
             })
            `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <Integer>_R
                    :: IO Integer
                       ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                              ghc-prim-0.5.3:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                    ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                  Integer #))))
             ipv_a7Ue
      of
      { (# ipv_X7UF, ipv1_X7UH #) ->
      let {
        duration_s8a0 :: Integer
        [LclId]
        duration_s8a0
          = integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger
              ipv1_X7UH ipv1_a7Uf } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cD
                              c_a7W2
                              (GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cE c_a7W2 n_a7W3)
                                 (GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShow(,)1
                                    duration_s8a0
                                    (ghc-prim-0.5.3:GHC.Types.[] @ Char))))
                           (GHC.Show.$fShowInteger_$cshowsPrec
                              GHC.Show.$fShow(,)1
                              (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                 duration_s8a0 lvl_s8cF)
                              (ghc-prim-0.5.3:GHC.Types.[] @ Char)))
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7UF
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX, Arity=4]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cG :: Integer
[LclId]
lvl_s8cG = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cH :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cH = "foo"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8cI :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8cI
  = \ (@ b_a7VH) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7VH lvl_s8cH

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8cJ :: [Char]
[LclId]
lvl_s8cJ = GHC.Base.build @ Char lvl_s8cI

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8cG
      lvl_s8cJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cK :: Integer
[LclId]
lvl_s8cK = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cL :: Integer
[LclId]
lvl_s8cL = 1000000

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      lvl_s8cK
      lvl_s8cL

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8cM :: Double
[LclId]
lvl_s8cM = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cN :: Integer
[LclId]
lvl_s8cN = 441

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      lvl_s8cM
      lvl_s8cN

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d3 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8d3 = "integral power : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8d4 :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8d4
  = \ (@ b_a7VH) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7VH lvl_s8d3

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8d5 :: [Char]
[LclId]
lvl_s8d5 = GHC.Base.build @ Char lvl_s8d4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8d0 :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8d0 = "fractional power 3 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8d1 :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8d1
  = \ (@ b_a7VH) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7VH lvl_s8d0

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8d2 :: [Char]
[LclId]
lvl_s8d2 = GHC.Base.build @ Char lvl_s8d1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cX :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cX = "fractional power 2 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8cY :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8cY
  = \ (@ b_a7VH) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7VH lvl_s8cX

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8cZ :: [Char]
[LclId]
lvl_s8cZ = GHC.Base.build @ Char lvl_s8cY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cU :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cU = "fractional power 1 : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8cV :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8cV
  = \ (@ b_a7VH) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7VH lvl_s8cU

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8cW :: [Char]
[LclId]
lvl_s8cW = GHC.Base.build @ Char lvl_s8cV

Rec {
-- RHS size: {terms: 14, types: 10, coercions: 0, joins: 0/0}
go_s8cP [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1]
go_s8cP
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 xs_a7Z4 ->
          case case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
               ghc-prim-0.5.3:GHC.Tuple.()
               }
          of
          { () ->
          go_s8cP xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cQ :: [Char] -> ()
[LclId]
lvl_s8cQ = \ (eta_a7YX :: [Char]) -> go_s8cP eta_a7YX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cR :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cR = "stimes : "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_s8cS :: forall b. (Char -> b -> b) -> b -> b
[LclId]
lvl_s8cS
  = \ (@ b_a7VH) ->
      ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7VH lvl_s8cR

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_s8cT :: [Char]
[LclId]
lvl_s8cT = GHC.Base.build @ Char lvl_s8cS

-- RHS size: {terms: 34, types: 55, coercions: 16, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s7Zj
  = \ (s_a7YK
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case measure_s7WY
             @ String
             (lvl_s8cQ
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <[Char]>_N)
                      :: ([Char] -> ()) ~R# NFData [Char]))
             lvl_s8cT
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN, ipv1_a7YO #) ->
      case measure_s7WY
             @ Double
             ((rwhnf @ Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8cW
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf, ipv1_X7Zh #) ->
      case measure_s7WY
             @ Double
             ((rwhnf @ Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8cZ
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk, ipv1_X7Zm #) ->
      case measure_s7WY
             @ Double
             ((rwhnf @ Double)
              `cast` (Sym (Control.DeepSeq.N:NFData[0] <Double>_N)
                      :: (Double -> ()) ~R# NFData Double))
             lvl_s8d2
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp, ipv1_X7Zr #) ->
      measure_s7WY
        @ Integer
        ((rwhnf @ Integer)
         `cast` (Sym (Control.DeepSeq.N:NFData[0] <Integer>_N)
                 :: (Integer -> ()) ~R# NFData Integer))
        lvl_s8d5
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX, Arity=1]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX, Arity=1]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier ====================
2019-11-05 16:48:03.118032956 UTC
  Max iterations = 4
  SimplMode {Phase = 2 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 585, types: 613, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (GHC.Base.build
         @ Char
         (\ (@ b_a7VH) ->
            ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
              @ b_a7VH "Negative exponent"#))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bz = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8c7 [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8c7
  = \ (x1_a7SF :: Double) (y1_a7SG :: Integer) (z_a7SH :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7SG lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7SG lvl_s8c9
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x1_a7SF x1_a7SF)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cb)
                (GHC.Float.timesDouble x1_a7SF z_a7SH);
            1# -> GHC.Float.timesDouble x1_a7SF z_a7SH
          };
        1# ->
          g1_s8c7
            (GHC.Float.timesDouble x1_a7SF x1_a7SF)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cd)
            z_a7SH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8bV [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8bV
  = \ (x_a7Sq :: Double) (y_a7Sr :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7Sr lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7Sr lvl_s8bX
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x_a7Sq x_a7Sq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8cf)
                x_a7Sq;
            1# -> x_a7Sq
          };
        1# ->
          f_s8bV
            (GHC.Float.timesDouble x_a7Sq x_a7Sq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8cj :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8cj = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8au
  = \ (x0_a7Sd :: Double) (y0_a7Se :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Se lvl_s8bJ
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Se lvl_s8bL
          of {
            __DEFAULT -> f_s8bV x0_a7Sd y0_a7Se;
            1# -> lvl_s8cj
          };
        1# -> lvl_s8cl
      }

-- RHS size: {terms: 28, types: 10, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 191 20}]
$s^^_s8ai
  = \ (x_a7RX :: Double) (n_a7RY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7RY lvl_s8ct
      of {
        __DEFAULT ->
          case ^ @ Double
                 @ Integer
                 GHC.Float.$fNumDouble
                 GHC.Real.$fIntegralInteger
                 x_a7RX
                 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7RY)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8ef ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8ef of wild1_a8eh
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8eh
          }
          };
        1# ->
          ^ @ Double
            @ Integer
            GHC.Float.$fNumDouble
            GHC.Real.$fIntegralInteger
            x_a7RX
            n_a7RY
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 xs_a7Z4 ->
          case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 73, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 600 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa, ipv1_X7Xc #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jz, y_X8jB) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8ae lvl_s8cw)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Vp, ww4_a7Vq #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cu
                              c_a7W2
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X7X5, ww4_X7X7 #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cv c_a7W2 n_a7W3)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_X7X5 ww4_X7X7)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                         })
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cz = 1000000000

-- RHS size: {terms: 72, types: 87, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg, ipv1_X7Xi #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jF, y_X8jH) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8a8 lvl_s8cz)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Vp, ww4_a7Vq #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cx
                              c_a7W2
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X7Xb, ww4_X7Xd #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cy c_a7W2 n_a7W3)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_X7Xb ww4_X7Xd)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                         })
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cC = 1000000000

-- RHS size: {terms: 72, types: 86, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 580 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi, ipv1_X7Xk #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jH, y_X8jJ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8a4 lvl_s8cC)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Vp, ww4_a7Vq #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cA
                              c_a7W2
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X7Xd, ww4_X7Xf #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cB c_a7W2 n_a7W3)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_X7Xd ww4_X7Xf)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                         })
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cF = 1000000000

-- RHS size: {terms: 75, types: 90, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 600 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp, ipv1_X7Xr #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jO, y_X8jQ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.build
                   @ Char
                   (\ (@ b_a7W1)
                      (c_a7W2 [OS=OneShot] :: Char -> b_a7W1 -> b_a7W1)
                      (n_a7W3 [OS=OneShot] :: b_a7W1) ->
                      GHC.Base.foldr
                        @ Char
                        @ b_a7W1
                        c_a7W2
                        (case GHC.Show.$w$cshowsPrec4
                                0#
                                (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                                   duration_s8a0 lvl_s8cF)
                                (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                         of
                         { (# ww3_a7Vp, ww4_a7Vq #) ->
                         GHC.Base.foldr
                           @ Char
                           @ b_a7W1
                           c_a7W2
                           (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                              @ b_a7W1
                              lvl_s8cD
                              c_a7W2
                              (case GHC.Show.$w$cshowsPrec4
                                      0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                               of
                               { (# ww3_X7Xk, ww4_X7Xm #) ->
                               GHC.Base.foldr
                                 @ Char
                                 @ b_a7W1
                                 c_a7W2
                                 (ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                                    @ b_a7W1 lvl_s8cE c_a7W2 n_a7W3)
                                 (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_X7Xk ww4_X7Xm)
                               }))
                           (ghc-prim-0.5.3:GHC.Types.: @ Char ww3_a7Vp ww4_a7Vq)
                         })
                        description_a1UB))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (GHC.Base.build
         @ Char
         (\ (@ b_a7VH) ->
            ghc-prim-0.5.3:GHC.CString.unpackFoldrCString# @ b_a7VH "foo"#))

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 250 0}]
testIntegralPower
  = ^ @ Integer
      @ Integer
      GHC.Num.$fNumInteger
      GHC.Real.$fIntegralInteger
      3
      1000000

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 0}]
testFractionalPower
  = ^^
      @ Double
      @ Integer
      GHC.Float.$fFractionalDouble
      GHC.Real.$fIntegralInteger
      (ghc-prim-0.5.3:GHC.Types.D# 5.0##)
      441

-- RHS size: {terms: 44, types: 66, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s7Zj
  = \ (s_a7YK
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "stimes : "#))
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN, ipv1_a7YO #) ->
      case $smeasure_s8a6
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 1 : "#))
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf, ipv1_X7Zh #) ->
      case $smeasure_s8a6
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 2 : "#))
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk, ipv1_X7Zm #) ->
      case $smeasure_s8a6
             (GHC.Base.build
                @ Char
                (\ (@ b_a7VH) ->
                   ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                     @ b_a7VH "fractional power 3 : "#))
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp, ipv1_X7Zr #) ->
      $smeasure_s8a2
        (GHC.Base.build
           @ Char
           (\ (@ b_a7VH) ->
              ghc-prim-0.5.3:GHC.CString.unpackFoldrCString#
                @ b_a7VH "integral power : "#))
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier ====================
2019-11-05 16:48:03.166188005 UTC
  Max iterations = 4
  SimplMode {Phase = 1 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bz = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8c7 [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8c7
  = \ (x1_a7SF :: Double) (y1_a7SG :: Integer) (z_a7SH :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7SG lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7SG lvl_s8c9
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x1_a7SF x1_a7SF)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cb)
                (GHC.Float.timesDouble x1_a7SF z_a7SH);
            1# -> GHC.Float.timesDouble x1_a7SF z_a7SH
          };
        1# ->
          g1_s8c7
            (GHC.Float.timesDouble x1_a7SF x1_a7SF)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cd)
            z_a7SH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8bV [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8bV
  = \ (x_a7Sq :: Double) (y_a7Sr :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7Sr lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7Sr lvl_s8bX
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x_a7Sq x_a7Sq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8cf)
                x_a7Sq;
            1# -> x_a7Sq
          };
        1# ->
          f_s8bV
            (GHC.Float.timesDouble x_a7Sq x_a7Sq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8cj :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8cj = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8au
  = \ (x0_a7Sd :: Double) (y0_a7Se :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Se lvl_s8bJ
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Se lvl_s8bL
          of {
            __DEFAULT -> f_s8bV x0_a7Sd y0_a7Se;
            1# -> lvl_s8cj
          };
        1# -> lvl_s8cl
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8ai
  = \ (x_a7RX :: Double) (n_a7RY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7RY lvl_s8ct
      of {
        __DEFAULT ->
          case $s^_s8au
                 x_a7RX (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7RY)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8ef ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8ef of wild1_a8eh
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8eh
          }
          };
        1# -> $s^_s8au x_a7RX n_a7RY
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 xs_a7Z4 ->
          case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa, ipv1_X7Xc #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jz, y_X8jB) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv)
                            ww3_X7X5
                            ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cz = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg, ipv1_X7Xi #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jF, y_X8jH) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cz)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cx
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cy)
                            ww3_X7Xb
                            ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cC = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi, ipv1_X7Xk #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jH, y_X8jJ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cC)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cA
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cB)
                            ww3_X7Xd
                            ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cF = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp, ipv1_X7Xr #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jO, y_X8jQ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cF)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cD
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cE)
                            ww3_X7Xk
                            ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8ai (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s7Zj
  = \ (s_a7YK
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN, ipv1_a7YO #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf, ipv1_X7Zh #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk, ipv1_X7Zm #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp, ipv1_X7Zr #) ->
      $smeasure_s8a2
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier ====================
2019-11-05 16:48:03.182065872 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bz = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8c7 [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8c7
  = \ (x1_a7SF :: Double) (y1_a7SG :: Integer) (z_a7SH :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7SG lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7SG lvl_s8c9
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x1_a7SF x1_a7SF)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cb)
                (GHC.Float.timesDouble x1_a7SF z_a7SH);
            1# -> GHC.Float.timesDouble x1_a7SF z_a7SH
          };
        1# ->
          g1_s8c7
            (GHC.Float.timesDouble x1_a7SF x1_a7SF)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cd)
            z_a7SH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8bV [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8bV
  = \ (x_a7Sq :: Double) (y_a7Sr :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7Sr lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7Sr lvl_s8bX
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x_a7Sq x_a7Sq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8cf)
                x_a7Sq;
            1# -> x_a7Sq
          };
        1# ->
          f_s8bV
            (GHC.Float.timesDouble x_a7Sq x_a7Sq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8cj :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8cj = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8au
  = \ (x0_a7Sd :: Double) (y0_a7Se :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Se lvl_s8bJ
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Se lvl_s8bL
          of {
            __DEFAULT -> f_s8bV x0_a7Sd y0_a7Se;
            1# -> lvl_s8cj
          };
        1# -> lvl_s8cl
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8ai
  = \ (x_a7RX :: Double) (n_a7RY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7RY lvl_s8ct
      of {
        __DEFAULT ->
          case $s^_s8au
                 x_a7RX (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7RY)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8ef ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8ef of wild1_a8eh
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8eh
          }
          };
        1# -> $s^_s8au x_a7RX n_a7RY
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 xs_a7Z4 ->
          case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa, ipv1_X7Xc #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jz, y_X8jB) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv)
                            ww3_X7X5
                            ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cz = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg, ipv1_X7Xi #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jF, y_X8jH) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cz)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cx
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cy)
                            ww3_X7Xb
                            ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cC = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi, ipv1_X7Xk #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jH, y_X8jJ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cC)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cA
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cB)
                            ww3_X7Xd
                            ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cF = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp, ipv1_X7Xr #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jO, y_X8jQ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cF)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cD
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cE)
                            ww3_X7Xk
                            ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8ai (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s7Zj
  = \ (s_a7YK
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN, ipv1_a7YO #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf, ipv1_X7Zh #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk, ipv1_X7Zm #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp, ipv1_X7Zr #) ->
      $smeasure_s8a2
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Float inwards ====================
2019-11-05 16:48:03.191337628 UTC

Result size of Float inwards
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bz = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8c7 [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8c7
  = \ (x1_a7SF :: Double) (y1_a7SG :: Integer) (z_a7SH :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7SG lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7SG lvl_s8c9
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x1_a7SF x1_a7SF)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cb)
                (GHC.Float.timesDouble x1_a7SF z_a7SH);
            1# -> GHC.Float.timesDouble x1_a7SF z_a7SH
          };
        1# ->
          g1_s8c7
            (GHC.Float.timesDouble x1_a7SF x1_a7SF)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cd)
            z_a7SH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8bV [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8bV
  = \ (x_a7Sq :: Double) (y_a7Sr :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7Sr lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7Sr lvl_s8bX
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x_a7Sq x_a7Sq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8cf)
                x_a7Sq;
            1# -> x_a7Sq
          };
        1# ->
          f_s8bV
            (GHC.Float.timesDouble x_a7Sq x_a7Sq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8cj :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8cj = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8au
  = \ (x0_a7Sd :: Double) (y0_a7Se :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Se lvl_s8bJ
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Se lvl_s8bL
          of {
            __DEFAULT -> f_s8bV x0_a7Sd y0_a7Se;
            1# -> lvl_s8cj
          };
        1# -> lvl_s8cl
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8ai
  = \ (x_a7RX :: Double) (n_a7RY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7RY lvl_s8ct
      of {
        __DEFAULT ->
          case $s^_s8au
                 x_a7RX (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7RY)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8ef ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8ef of wild1_a8eh
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8eh
          }
          };
        1# -> $s^_s8au x_a7RX n_a7RY
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 xs_a7Z4 ->
          case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa, ipv1_X7Xc #) ->
      ((let {
          duration_s8ae :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8ae
            = case ipv1_X7Xc of { (ds1_a8gy, y_a8gz) ->
              case ipv1_a7Uo of { (ds1_X8jz, y_X8jB) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv)
                            ww3_X7X5
                            ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cz = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg, ipv1_X7Xi #) ->
      ((let {
          duration_s8a8 :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8a8
            = case ipv1_X7Xi of { (ds1_a8gy, y_a8gz) ->
              case ipv1_a7Uo of { (ds1_X8jF, y_X8jH) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cz)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cx
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cy)
                            ww3_X7Xb
                            ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cC = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi, ipv1_X7Xk #) ->
      ((let {
          duration_s8a4 :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8a4
            = case ipv1_X7Xk of { (ds1_a8gy, y_a8gz) ->
              case ipv1_a7Uo of { (ds1_X8jH, y_X8jJ) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cC)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cA
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cB)
                            ww3_X7Xd
                            ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cF = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp, ipv1_X7Xr #) ->
      ((let {
          duration_s8a0 :: Integer
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                   WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
          duration_s8a0
            = case ipv1_X7Xr of { (ds1_a8gy, y_a8gz) ->
              case ipv1_a7Uo of { (ds1_X8jO, y_X8jQ) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cF)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cD
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cE)
                            ww3_X7Xk
                            ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8ai (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s7Zj
  = \ (s_a7YK
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN, ipv1_a7YO #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf, ipv1_X7Zh #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk, ipv1_X7Zm #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp, ipv1_X7Zr #) ->
      $smeasure_s8a2
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier ====================
2019-11-05 16:48:03.218396559 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-call-arity],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 515, types: 521, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bz = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 71 0}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
g1_s8c7 [Occ=LoopBreaker] :: Double -> Integer -> Double -> Double
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 390 0}]
g1_s8c7
  = \ (x1_a7SF :: Double) (y1_a7SG :: Integer) (z_a7SH :: Double) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y1_a7SG lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y1_a7SG lvl_s8c9
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x1_a7SF x1_a7SF)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cb)
                (GHC.Float.timesDouble x1_a7SF z_a7SH);
            1# -> GHC.Float.timesDouble x1_a7SF z_a7SH
          };
        1# ->
          g1_s8c7
            (GHC.Float.timesDouble x1_a7SF x1_a7SF)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y1_a7SG lvl_s8cd)
            z_a7SH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
f_s8bV [Occ=LoopBreaker] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 320 0}]
f_s8bV
  = \ (x_a7Sq :: Double) (y_a7Sr :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger y_a7Sr lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y_a7Sr lvl_s8bX
          of {
            __DEFAULT ->
              g1_s8c7
                (GHC.Float.timesDouble x_a7Sq x_a7Sq)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8cf)
                x_a7Sq;
            1# -> x_a7Sq
          };
        1# ->
          f_s8bV
            (GHC.Float.timesDouble x_a7Sq x_a7Sq)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger y_a7Sr lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8cj :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8cj = ghc-prim-0.5.3:GHC.Types.D# 1.0##

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 130 0}]
$s^_s8au
  = \ (x0_a7Sd :: Double) (y0_a7Se :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             y0_a7Se lvl_s8bJ
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 y0_a7Se lvl_s8bL
          of {
            __DEFAULT -> f_s8bV x0_a7Sd y0_a7Se;
            1# -> lvl_s8cj
          };
        1# -> lvl_s8cl
      }

-- RHS size: {terms: 24, types: 6, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 151 20}]
$s^^_s8ai
  = \ (x_a7RX :: Double) (n_a7RY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             n_a7RY lvl_s8ct
      of {
        __DEFAULT ->
          case $s^_s8au
                 x_a7RX (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger n_a7RY)
          of
          { ghc-prim-0.5.3:GHC.Types.D# y_a8ef ->
          case ghc-prim-0.5.3:GHC.Prim./## 1.0## y_a8ef of wild1_a8eh
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Types.D# wild1_a8eh
          }
          };
        1# -> $s^_s8au x_a7RX n_a7RY
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 xs_a7Z4 ->
          case x_a7Z3 of { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa, ipv1_X7Xc #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jz, y_X8jB) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv)
                            ww3_X7X5
                            ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cz = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg, ipv1_X7Xi #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jF, y_X8jH) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cz)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cx
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cy)
                            ww3_X7Xb
                            ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cC = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi, ipv1_X7Xk #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jH, y_X8jJ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cC)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cA
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cB)
                            ww3_X7Xd
                            ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cF = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un, ipv1_a7Uo #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp, ipv1_X7Xr #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy, y_a8gz) ->
            case ipv1_a7Uo of { (ds1_X8jO, y_X8jQ) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cF)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cD
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cE)
                            ww3_X7Xk
                            ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 0}]
testFractionalPower
  = $s^^_s8ai (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s7Zj
  = \ (s_a7YK
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN, ipv1_a7YO #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf, ipv1_X7Zh #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk, ipv1_X7Zm #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp, ipv1_X7Zr #) ->
      $smeasure_s8a2
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier ====================
2019-11-05 16:48:03.297940033 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-worker-wrapper],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 536, types: 534, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "Negative exponent"#)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8bz = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8b3 [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
                        lvl_s8bz
                 of wild_a8dj [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
                 }}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj [Dmd=<S,U>]
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8lM [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8lM
  = \ (ww_s8lD :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lz :: Integer)
      (ww_s8lH :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lz lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lz lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH
          };
        1# ->
          $wg1_s8lM
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cd)
            ww_s8lH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8lW [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8lW
  = \ (ww_s8lR :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lO :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lO lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lO lvl_s8bX
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cf)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8m2 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8m2
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8lY lvl_s8bJ
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lY lvl_s8bL
          of {
            __DEFAULT ->
              case w_s8lX of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lX [Occ=Once] :: Double)
                 (w_s8lY [Occ=Once] :: Integer) ->
                 case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
                 }}]
$s^_s8au
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8m8 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8m8
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8m4 lvl_s8ct
      of {
        __DEFAULT ->
          case $w$s^_s8m2
                 w_s8m3 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8m4)
          of ww_s8m1
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8m3 [Occ=Once] :: Double)
                 (w_s8m4 [Occ=Once] :: Integer) ->
                 case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
                 }}]
$s^^_s8ai
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 [Dmd=<S,H>] xs_a7Z4 [Dmd=<S,U>] ->
          case x_a7Z3 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc [Dmd=<L,A>] ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 61, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 520 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa [Dmd=<S,U>], ipv1_X7Xc [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jz [Dmd=<L,A>], y_X8jB [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv)
                            ww3_X7X5
                            ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cz = 1000000000

-- RHS size: {terms: 60, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX [Dmd=<L,A>] ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg [Dmd=<S,U>], ipv1_X7Xi [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jF [Dmd=<L,A>], y_X8jH [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cz)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cx
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cy)
                            ww3_X7Xb
                            ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cC = 1000000000

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 500 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi [Dmd=<S,U>], ipv1_X7Xk [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jH [Dmd=<L,A>], y_X8jJ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cC)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cA
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cB)
                            ww3_X7Xd
                            ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cF = 1000000000

-- RHS size: {terms: 63, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 520 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp [Dmd=<S,U>], ipv1_X7Xr [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jO [Dmd=<L,A>], y_X8jQ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cF)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cD
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++
                            @ Char
                            (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cE)
                            ww3_X7Xk
                            ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7WY
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 190 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      1000000
      (ghc-prim-0.5.3:GHC.CString.unpackCString# "foo"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
testIntegralPower = GHC.Real.^_$s^ 3 1000000

-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 160 20}]
testFractionalPower
  = case $w$s^^_s8m8 (ghc-prim-0.5.3:GHC.Types.D# 5.0##) 441
    of ww_s8m7
    { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
    }

-- RHS size: {terms: 34, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 600 0}]
main_s7Zj
  = \ (s_a7YK [Dmd=<S,U>]
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac
             (ghc-prim-0.5.3:GHC.CString.unpackCString# "stimes : "#)
             testStimes
             s_a7YK
      of
      { (# ipv_a7YN [Dmd=<S,U>], ipv1_a7YO [Dmd=<L,A>] #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 1 : "#)
             testFractionalPower
             ipv_a7YN
      of
      { (# ipv_X7Zf [Dmd=<S,U>], ipv1_X7Zh [Dmd=<L,A>] #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 2 : "#)
             testFractionalPower
             ipv_X7Zf
      of
      { (# ipv_X7Zk [Dmd=<S,U>], ipv1_X7Zm [Dmd=<L,A>] #) ->
      case $smeasure_s8a6
             (ghc-prim-0.5.3:GHC.CString.unpackCString#
                "fractional power 3 : "#)
             testFractionalPower
             ipv_X7Zk
      of
      { (# ipv_X7Zp [Dmd=<S,U>], ipv1_X7Zr [Dmd=<L,A>] #) ->
      $smeasure_s8a2
        (ghc-prim-0.5.3:GHC.CString.unpackCString# "integral power : "#)
        testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s7Zj
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s89K
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Levels added: ====================
2019-11-05 16:48:03.319901673 UTC

<lvl_s8ct,<0,0>>
<lvl_s8ct,<0,0>> = 0
<lvl_s8cl,<0,0>>
<lvl_s8cl,<0,0>>
  = GHC.Err.errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep
      @ GHC.Types.Double
      (GHC.CString.unpackCString#
         (let {
            <lvl_s8pb,F<0,0>>
            <lvl_s8pb,F<0,0>> = "Negative exponent"# } in
          lvl_s8pb))
<lvl_s8cb,<0,0>>
<lvl_s8cb,<0,0>> = 2
<lvl_s8c9,<0,0>>
<lvl_s8c9,<0,0>> = 1
<lvl_s8cd,<0,0>>
<lvl_s8cd,<0,0>> = 2
<lvl_s8cf,<0,0>>
<lvl_s8cf,<0,0>> = 2
<lvl_s8bX,<0,0>>
<lvl_s8bX,<0,0>> = 1
<lvl_s8ch,<0,0>>
<lvl_s8ch,<0,0>> = 2
<lvl_s8bL,<0,0>>
<lvl_s8bL,<0,0>> = 0
<lvl_s8bJ,<0,0>>
<lvl_s8bJ,<0,0>> = 0
<lvl_s8bx,<0,0>>
<lvl_s8bx,<0,0>> = 2
<lvl_s8bz,<0,0>>
<lvl_s8bz,<0,0>> = 0
<$seven_s8b8,<0,0>>
<$seven_s8b8,<0,0>>
  = \ <n_a8b3,<1,0>> ->
      case GHC.Integer.Type.eqInteger#
             (GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx) lvl_s8bz
      of <wild_a8dj,<1,2>>
      { __DEFAULT ->
      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild_a8dj
      }
<$wg1_s8lM,<0,0>>
<$wg1_s8lM,<0,0>>
  = \ <ww_s8lD,<1,0>> <w_s8lz,<1,0>> <ww_s8lH,<1,0>> ->
      case GHC.Integer.Type.eqInteger#
             (GHC.Integer.Type.remInteger w_s8lz lvl_s8bx) lvl_s8bz
      of <wild_a8dj,<1,2>> {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8lz lvl_s8c9
          of <wild_X8fJ,<1,3>> {
            __DEFAULT ->
              $wg1_s8lM
                (GHC.Prim.*## ww_s8lD ww_s8lD)
                (GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (GHC.Prim.*## ww_s8lD ww_s8lH);
            1# -> GHC.Prim.*## ww_s8lD ww_s8lH
          };
        1# ->
          $wg1_s8lM
            (GHC.Prim.*## ww_s8lD ww_s8lD)
            (GHC.Integer.Type.quotInteger w_s8lz lvl_s8cd)
            ww_s8lH
      };
<$wf_s8lW,<0,0>>
<$wf_s8lW,<0,0>>
  = \ <ww_s8lR,<1,0>> <w_s8lO,<1,0>> ->
      case GHC.Integer.Type.eqInteger#
             (GHC.Integer.Type.remInteger w_s8lO lvl_s8bx) lvl_s8bz
      of <wild_a8dj,<1,2>> {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8lO lvl_s8bX
          of <wild_X8fJ,<1,3>> {
            __DEFAULT ->
              $wg1_s8lM
                (GHC.Prim.*## ww_s8lR ww_s8lR)
                (GHC.Integer.Type.quotInteger w_s8lO lvl_s8cf)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (GHC.Prim.*## ww_s8lR ww_s8lR)
            (GHC.Integer.Type.quotInteger w_s8lO lvl_s8ch)
      };
<$w$s^_s8m2,<0,0>>
<$w$s^_s8m2,<0,0>>
  = \ <w_s8lX,<1,0>> <w_s8lY,<1,0>> ->
      case GHC.Integer.Type.ltInteger# w_s8lY lvl_s8bJ
      of <wild_a8e0,<1,2>> {
        __DEFAULT ->
          case GHC.Integer.Type.eqInteger# w_s8lY lvl_s8bL
          of <wild_a8dj,<1,3>> {
            __DEFAULT ->
              case w_s8lX of <ww_s8lQ,<1,4>> { GHC.Types.D# <ww_s8lR,<1,4>> ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of <wild_00,<1,3>> { }
      }
<$s^_s8au,<0,0>>
<$s^_s8au,<0,0>>
  = \ <w_s8lX,<1,0>> <w_s8lY,<1,0>> ->
      case $w$s^_s8m2 w_s8lX w_s8lY of <ww_s8m1,<1,2>> { __DEFAULT ->
      GHC.Types.D# ww_s8m1
      }
<$w$s^^_s8m8,<0,0>>
<$w$s^^_s8m8,<0,0>>
  = \ <w_s8m3,<1,0>> <w_s8m4,<1,0>> ->
      case GHC.Integer.Type.geInteger# w_s8m4 lvl_s8ct
      of <wild_a8e9,<1,2>> {
        __DEFAULT ->
          case $w$s^_s8m2 w_s8m3 (GHC.Integer.Type.negateInteger w_s8m4)
          of <ww_s8m1,<1,3>>
          { __DEFAULT ->
          GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }
<$s^^_s8ai,<0,0>>
<$s^^_s8ai,<0,0>>
  = \ <w_s8m3,<1,0>> <w_s8m4,<1,0>> ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of <ww_s8m7,<1,2>> { __DEFAULT ->
      GHC.Types.D# ww_s8m7
      }
<go_s8bn,<0,0>>
<go_s8bn,<0,0>>
  = \ <ds_a7YZ,<1,0>> ->
      case ds_a7YZ of <wild_a7Z0,<1,2>> {
        [] -> GHC.Tuple.();
        : <x_a7Z3,<1,2>> <xs_a7Z4,<1,2>> ->
          case x_a7Z3 of <ds1_a7YU,<1,3>> { GHC.Types.C# <ipv_s7Zc,<1,3>> ->
          go_s8bn xs_a7Z4
          }
      };
<$trModule_s7TB,<0,0>>
<$trModule_s7TB,<0,0>> = "main"#
<$trModule_s7TC,<0,0>>
<$trModule_s7TC,<0,0>> = GHC.Types.TrNameS $trModule_s7TB
<$trModule_s7TD,<0,0>>
<$trModule_s7TD,<0,0>> = "Main"#
<$trModule_s7TE,<0,0>>
<$trModule_s7TE,<0,0>> = GHC.Types.TrNameS $trModule_s7TD
<Main.$trModule,<0,0>>
<Main.$trModule,<0,0>>
  = GHC.Types.Module $trModule_s7TC $trModule_s7TE
<lvl_s8cu,<0,0>>
<lvl_s8cu,<0,0>> = " milli seconds -- "#
<lvl_s8cv,<0,0>>
<lvl_s8cv,<0,0>> = " pico seconds"#
<lvl_s8cw,<0,0>>
<lvl_s8cw,<0,0>> = 1000000000
<$smeasure_s8ac,<0,0>>
<$smeasure_s8ac,<0,0>>
  = \ <description_a1UB,<1,0>> <f_a1UC,<1,0>> <s_a7Ub,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Ub
      of <ds_a7Ul,<1,2>>
      { (# <ipv_a7Un,<1,2>>, <ipv1_a7Uo,<1,2>> #) ->
      case go_s8bn f_a1UC of <wild_a7QZ,<1,3>> { () ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7Un
      of <ds_X7X6,<1,4>>
      { (# <ipv_X7Xa,<1,4>>, <ipv1_X7Xc,<1,4>> #) ->
      let {
        <duration_s8ae,<1,5>>
        <duration_s8ae,<1,5>>
          = case ipv1_X7Xc of <wild_a8gw,<1,7>>
            { (<ds1_a8gy,<1,7>>, <y_a8gz,<1,7>>) ->
            case ipv1_a7Uo of <wild_X8jv,<1,8>>
            { (<ds1_X8jz,<1,8>>, <y_X8jB,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8ae lvl_s8cw)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Vn,<1,8>>
                    { (# <ww3_a7Vp,<1,8>>, <ww4_a7Vq,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X7X1,<1,9>>
                          { (# <ww3_X7X5,<1,9>>, <ww4_X7X7,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8pc,F<0,0>>
                               <lvl_s8pc,F<0,0>> = GHC.CString.unpackCString# lvl_s8cv } in
                             lvl_s8pc)
                            ww3_X7X5
                            ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7Xa
      }
      }
      }
<lvl_s8cx,<0,0>>
<lvl_s8cx,<0,0>> = " milli seconds -- "#
<lvl_s8cy,<0,0>>
<lvl_s8cy,<0,0>> = " pico seconds"#
<lvl_s8cz,<0,0>>
<lvl_s8cz,<0,0>> = 1000000000
<$smeasure_s8a6,<0,0>>
<$smeasure_s8a6,<0,0>>
  = \ <description_a1UB,<1,0>> <f_a1UC,<1,0>> <s_a7Ub,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Ub
      of <ds_a7Ul,<1,2>>
      { (# <ipv_a7Un,<1,2>>, <ipv1_a7Uo,<1,2>> #) ->
      case f_a1UC of <ds1_a7YU,<1,3>> { GHC.Types.D# <ipv_s8gX,<1,3>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7Un
      of <ds_X7Xc,<1,4>>
      { (# <ipv_X7Xg,<1,4>>, <ipv1_X7Xi,<1,4>> #) ->
      let {
        <duration_s8a8,<1,5>>
        <duration_s8a8,<1,5>>
          = case ipv1_X7Xi of <wild_a8gw,<1,7>>
            { (<ds1_a8gy,<1,7>>, <y_a8gz,<1,7>>) ->
            case ipv1_a7Uo of <wild_X8jB,<1,8>>
            { (<ds1_X8jF,<1,8>>, <y_X8jH,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8a8 lvl_s8cz)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Vn,<1,8>>
                    { (# <ww3_a7Vp,<1,8>>, <ww4_a7Vq,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8cx
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X7X7,<1,9>>
                          { (# <ww3_X7Xb,<1,9>>, <ww4_X7Xd,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8pd,F<0,0>>
                               <lvl_s8pd,F<0,0>> = GHC.CString.unpackCString# lvl_s8cy } in
                             lvl_s8pd)
                            ww3_X7Xb
                            ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7Xg
      }
      }
      }
<lvl_s8cA,<0,0>>
<lvl_s8cA,<0,0>> = " milli seconds -- "#
<lvl_s8cB,<0,0>>
<lvl_s8cB,<0,0>> = " pico seconds"#
<lvl_s8cC,<0,0>>
<lvl_s8cC,<0,0>> = 1000000000
<$smeasure_s8a2,<0,0>>
<$smeasure_s8a2,<0,0>>
  = \ <description_a1UB,<1,0>> <f_a1UC,<1,0>> <s_a7Ub,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Ub
      of <ds_a7Ul,<1,2>>
      { (# <ipv_a7Un,<1,2>>, <ipv1_a7Uo,<1,2>> #) ->
      case f_a1UC of <ds1_a7YU,<1,3>> { __DEFAULT ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7Un
      of <ds_X7Xe,<1,4>>
      { (# <ipv_X7Xi,<1,4>>, <ipv1_X7Xk,<1,4>> #) ->
      let {
        <duration_s8a4,<1,5>>
        <duration_s8a4,<1,5>>
          = case ipv1_X7Xk of <wild_a8gw,<1,7>>
            { (<ds1_a8gy,<1,7>>, <y_a8gz,<1,7>>) ->
            case ipv1_a7Uo of <wild_X8jD,<1,8>>
            { (<ds1_X8jH,<1,8>>, <y_X8jJ,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8a4 lvl_s8cC)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Vn,<1,8>>
                    { (# <ww3_a7Vp,<1,8>>, <ww4_a7Vq,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8cA
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X7X9,<1,9>>
                          { (# <ww3_X7Xd,<1,9>>, <ww4_X7Xf,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8pe,F<0,0>>
                               <lvl_s8pe,F<0,0>> = GHC.CString.unpackCString# lvl_s8cB } in
                             lvl_s8pe)
                            ww3_X7Xd
                            ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7Xi
      }
      }
      }
<lvl_s8cD,<0,0>>
<lvl_s8cD,<0,0>> = " milli seconds -- "#
<lvl_s8cE,<0,0>>
<lvl_s8cE,<0,0>> = " pico seconds"#
<lvl_s8cF,<0,0>>
<lvl_s8cF,<0,0>> = 1000000000
<measure_s7WY,<0,0>>
<measure_s7WY,<0,0>>
  = \ <a_a5KA,<1,0>>
      <$dNFData_a5KC,<1,0>>
      <description_a1UB,<1,0>>
      <f_a1UC,<1,0>>
      <s_a7Ub,<1,0>> ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             s_a7Ub
      of <ds_a7Ul,<1,2>>
      { (# <ipv_a7Un,<1,2>>, <ipv1_a7Uo,<1,2>> #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: Control.DeepSeq.NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of <wild_a7QZ,<1,3>>
      { () ->
      case System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                         ~R# (GHC.Ptr.Ptr System.CPUTime.Posix.ClockGetTime.Timespec
                              -> GHC.Types.IO ())))
             ipv_a7Un
      of <ds_X7Xl,<1,4>>
      { (# <ipv_X7Xp,<1,4>>, <ipv1_X7Xr,<1,4>> #) ->
      let {
        <duration_s8a0,<1,5>>
        <duration_s8a0,<1,5>>
          = case ipv1_X7Xr of <wild_a8gw,<1,7>>
            { (<ds1_a8gy,<1,7>>, <y_a8gz,<1,7>>) ->
            case ipv1_a7Uo of <wild_X8jK,<1,8>>
            { (<ds1_X8jO,<1,8>>, <y_X8jQ,<1,8>>) ->
            GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (GHC.Types.:
             @ GHC.Types.Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (GHC.Base.++
                   @ GHC.Types.Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (GHC.Integer.Type.divInteger duration_s8a0 lvl_s8cF)
                           (GHC.Types.[] @ GHC.Types.Char)
                    of <ww2_a7Vn,<1,8>>
                    { (# <ww3_a7Vp,<1,8>>, <ww4_a7Vq,<1,8>> #) ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (GHC.CString.unpackAppendCString#
                         lvl_s8cD
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (GHC.Types.[] @ GHC.Types.Char)
                          of <ww2_X7Xg,<1,9>>
                          { (# <ww3_X7Xk,<1,9>>, <ww4_X7Xm,<1,9>> #) ->
                          GHC.Base.++_$s++
                            @ GHC.Types.Char
                            (let {
                               <lvl_s8pf,F<0,0>>
                               <lvl_s8pf,F<0,0>> = GHC.CString.unpackCString# lvl_s8cE } in
                             lvl_s8pf)
                            ww3_X7Xk
                            ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: GHC.Types.IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_X7Xp
      }
      }
      }
<Main.measure,<0,0>>
<Main.measure,<0,0>>
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <Control.DeepSeq.NFData a>_R
            ->_R <GHC.Base.String>_R
            ->_R <a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Control.DeepSeq.NFData a =>
                GHC.Base.String
                -> a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# (forall a.
                    Control.DeepSeq.NFData a =>
                    GHC.Base.String -> a -> GHC.Types.IO ()))
<Main.testStimes,<0,0>>
<Main.testStimes,<0,0>>
  = GHC.Magic.noinline
      @ (forall b a. GHC.Real.Integral b => b -> [a] -> [a])
      Data.Semigroup.Internal.stimesList
      @ GHC.Integer.Type.Integer
      @ GHC.Types.Char
      GHC.Real.$fIntegralInteger
      (let {
         <lvl_s8pg,F<0,0>>
         <lvl_s8pg,F<0,0>> = 1000000 } in
       lvl_s8pg)
      (let {
         <lvl_s8pi,F<0,0>>
         <lvl_s8pi,F<0,0>>
           = GHC.CString.unpackCString#
               (let {
                  <lvl_s8ph,F<0,0>>
                  <lvl_s8ph,F<0,0>> = "foo"# } in
                lvl_s8ph) } in
       lvl_s8pi)
<Main.testIntegralPower,<0,0>>
<Main.testIntegralPower,<0,0>>
  = GHC.Real.^_$s^
      (let {
         <lvl_s8pj,F<0,0>>
         <lvl_s8pj,F<0,0>> = 3 } in
       lvl_s8pj)
      (let {
         <lvl_s8pk,F<0,0>>
         <lvl_s8pk,F<0,0>> = 1000000 } in
       lvl_s8pk)
<Main.testFractionalPower,<0,0>>
<Main.testFractionalPower,<0,0>>
  = case $w$s^^_s8m8
           (let {
              <lvl_s8pl,F<0,0>>
              <lvl_s8pl,F<0,0>> = GHC.Types.D# 5.0## } in
            lvl_s8pl)
           (let {
              <lvl_s8pm,F<0,0>>
              <lvl_s8pm,F<0,0>> = 441 } in
            lvl_s8pm)
    of <ww_s8m7,<0,3>>
    { __DEFAULT ->
    GHC.Types.D# ww_s8m7
    }
<main_s7Zj,<0,0>>
<main_s7Zj,<0,0>>
  = \ <s_a7YK,<0,1>> ->
      case $smeasure_s8ac
             (let {
                <lvl_s8po,F<0,0>>
                <lvl_s8po,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8pn,F<0,0>>
                         <lvl_s8pn,F<0,0>> = "stimes : "# } in
                       lvl_s8pn) } in
              lvl_s8po)
             Main.testStimes
             s_a7YK
      of <ds1_a7YL,<0,3>>
      { (# <ipv_a7YN,<0,3>>, <ipv1_a7YO,<0,3>> #) ->
      case $smeasure_s8a6
             (let {
                <lvl_s8pq,F<0,0>>
                <lvl_s8pq,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8pp,F<0,0>>
                         <lvl_s8pp,F<0,0>> = "fractional power 1 : "# } in
                       lvl_s8pp) } in
              lvl_s8pq)
             Main.testFractionalPower
             ipv_a7YN
      of <ds1_X7Zb,<0,4>>
      { (# <ipv_X7Zf,<0,4>>, <ipv1_X7Zh,<0,4>> #) ->
      case $smeasure_s8a6
             (let {
                <lvl_s8ps,F<0,0>>
                <lvl_s8ps,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8pr,F<0,0>>
                         <lvl_s8pr,F<0,0>> = "fractional power 2 : "# } in
                       lvl_s8pr) } in
              lvl_s8ps)
             Main.testFractionalPower
             ipv_X7Zf
      of <ds1_X7Zg,<0,5>>
      { (# <ipv_X7Zk,<0,5>>, <ipv1_X7Zm,<0,5>> #) ->
      case $smeasure_s8a6
             (let {
                <lvl_s8pu,F<0,0>>
                <lvl_s8pu,F<0,0>>
                  = GHC.CString.unpackCString#
                      (let {
                         <lvl_s8pt,F<0,0>>
                         <lvl_s8pt,F<0,0>> = "fractional power 3 : "# } in
                       lvl_s8pt) } in
              lvl_s8pu)
             Main.testFractionalPower
             ipv_X7Zk
      of <ds1_X7Zl,<0,6>>
      { (# <ipv_X7Zp,<0,6>>, <ipv1_X7Zr,<0,6>> #) ->
      $smeasure_s8a2
        (let {
           <lvl_s8pw,F<0,0>>
           <lvl_s8pw,F<0,0>>
             = GHC.CString.unpackCString#
                 (let {
                    <lvl_s8pv,F<0,0>>
                    <lvl_s8pv,F<0,0>> = "integral power : "# } in
                  lvl_s8pv) } in
         lvl_s8pw)
        Main.testIntegralPower
        ipv_X7Zp
      }
      }
      }
      }
<Main.main,<0,0>>
<Main.main,<0,0>>
  = main_s7Zj
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())
<main_s89K,<0,0>>
<main_s89K,<0,0>>
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# GHC.Types.IO ()))
<:Main.main,<0,0>>
<:Main.main,<0,0>>
  = main_s89K
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# GHC.Types.IO ())


==================== Float out(FOS {Lam = Just 0, Consts = True, OverSatApps = True}) ====================
2019-11-05 16:48:03.327894246 UTC

Result size of Float out(FOS {Lam = Just 0,
                              Consts = True,
                              OverSatApps = True})
  = {terms: 580, types: 566, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId]
lvl_s8ct = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pb :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pb = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId, Str=x]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pb)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId]
lvl_s8cd = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId]
lvl_s8cf = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId]
lvl_s8bX = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId]
lvl_s8ch = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId]
lvl_s8bL = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId]
lvl_s8bJ = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId]
lvl_s8bx = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId]
lvl_s8bz = 0

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8b3 [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
                        lvl_s8bz
                 of wild_a8dj [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
                 }}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8bx)
             lvl_s8bz
      of wild_a8dj [Dmd=<S,U>]
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8lM [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=3, Str=<S,U><S,U><S,U>]
$wg1_s8lM
  = \ (ww_s8lD :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lz :: Integer)
      (ww_s8lH :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lz lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lz lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH
          };
        1# ->
          $wg1_s8lM
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cd)
            ww_s8lH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8lW [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8lW
  = \ (ww_s8lR :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lO :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lO lvl_s8bx)
             lvl_s8bz
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lO lvl_s8bX
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cf)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8ch)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8m2 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8m2
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8lY lvl_s8bJ
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lY lvl_s8bL
          of {
            __DEFAULT ->
              case w_s8lX of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lX [Occ=Once] :: Double)
                 (w_s8lY [Occ=Once] :: Integer) ->
                 case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
                 }}]
$s^_s8au
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8m8 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8m8
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8m4 lvl_s8ct
      of {
        __DEFAULT ->
          case $w$s^_s8m2
                 w_s8m3 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8m4)
          of ww_s8m1
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8m3 [Occ=Once] :: Double)
                 (w_s8m4 [Occ=Once] :: Integer) ->
                 case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
                 }}]
$s^^_s8ai
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 [Dmd=<S,H>] xs_a7Z4 [Dmd=<S,U>] ->
          case x_a7Z3 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc [Dmd=<L,A>] ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId]
lvl_s8cw = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pc :: [Char]
[LclId]
lvl_s8pc = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><S,U>]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa [Dmd=<S,U>], ipv1_X7Xc [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ae :: Integer
        [LclId]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jz [Dmd=<L,A>], y_X8jB [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7X5 ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId]
lvl_s8cz = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pd :: [Char]
[LclId]
lvl_s8pd = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cy

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><S,U>]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX [Dmd=<L,A>] ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg [Dmd=<S,U>], ipv1_X7Xi [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a8 :: Integer
        [LclId]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jF [Dmd=<L,A>], y_X8jH [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cz)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cx
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pd ww3_X7Xb ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId]
lvl_s8cC = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pe :: [Char]
[LclId]
lvl_s8pe = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cB

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><S,U>]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi [Dmd=<S,U>], ipv1_X7Xk [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a4 :: Integer
        [LclId]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jH [Dmd=<L,A>], y_X8jJ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cC)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cA
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pe ww3_X7Xd ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId]
lvl_s8cF = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pf :: [Char]
[LclId]
lvl_s8pf = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cE

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><S,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp [Dmd=<S,U>], ipv1_X7Xr [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a0 :: Integer
        [LclId]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jO [Dmd=<L,A>], y_X8jQ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cF)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cD
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pf ww3_X7Xk ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7WY
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pg :: Integer
[LclId]
lvl_s8pg = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ph :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8ph = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pi :: [Char]
[LclId]
lvl_s8pi = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8ph

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8pg
      lvl_s8pi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pj :: Integer
[LclId]
lvl_s8pj = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pk :: Integer
[LclId]
lvl_s8pk = 1000000

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8pj lvl_s8pk

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pl :: Double
[LclId]
lvl_s8pl = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pm :: Integer
[LclId]
lvl_s8pm = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8m8 lvl_s8pl lvl_s8pm of ww_s8m7 { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pv = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pw :: [Char]
[LclId]
lvl_s8pw = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pt :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pt = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pu :: [Char]
[LclId]
lvl_s8pu = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pr :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pr = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8ps :: [Char]
[LclId]
lvl_s8ps = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pp :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pp = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pq :: [Char]
[LclId]
lvl_s8pq = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pn :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pn = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8po :: [Char]
[LclId]
lvl_s8po = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pn

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<S,U>]
main_s7Zj
  = \ (s_a7YK [Dmd=<S,U>]
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac lvl_s8po testStimes s_a7YK of
      { (# ipv_a7YN [Dmd=<S,U>], ipv1_a7YO [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pq testFractionalPower ipv_a7YN of
      { (# ipv_X7Zf [Dmd=<S,U>], ipv1_X7Zh [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8ps testFractionalPower ipv_X7Zf of
      { (# ipv_X7Zk [Dmd=<S,U>], ipv1_X7Zm [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pu testFractionalPower ipv_X7Zk of
      { (# ipv_X7Zp [Dmd=<S,U>], ipv1_X7Zr [Dmd=<L,A>] #) ->
      $smeasure_s8a2 lvl_s8pw testIntegralPower ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s7Zj
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s89K
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Float inwards ====================
2019-11-05 16:48:03.351681021 UTC

Result size of Float inwards
  = {terms: 577, types: 566, coercions: 77, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId]
lvl_s8ct = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pb :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pb = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId, Str=x]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pb)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId]
lvl_s8cd = lvl_s8cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId]
lvl_s8cf = lvl_s8cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId]
lvl_s8bX = lvl_s8c9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId]
lvl_s8ch = lvl_s8cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId]
lvl_s8bL = lvl_s8ct

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId]
lvl_s8bJ = lvl_s8ct

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId]
lvl_s8bx = lvl_s8cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId]
lvl_s8bz = lvl_s8ct

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8b3 [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
                        lvl_s8ct
                 of wild_a8dj [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
                 }}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
             lvl_s8ct
      of wild_a8dj [Dmd=<S,U>]
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8lM [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=3, Str=<S,U><S,U><S,U>]
$wg1_s8lM
  = \ (ww_s8lD :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lz :: Integer)
      (ww_s8lH :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lz lvl_s8cb)
             lvl_s8ct
      of wild_a8dj {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lz lvl_s8c9
          of wild_X8fJ {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH
          };
        1# ->
          $wg1_s8lM
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
            ww_s8lH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8lW [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8lW
  = \ (ww_s8lR :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lO :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lO lvl_s8cb)
             lvl_s8ct
      of wild_a8dj {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lO lvl_s8c9
          of wild_X8fJ {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8m2 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8m2
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8lY lvl_s8ct
      of wild_a8e0 {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lY lvl_s8ct
          of wild_a8dj {
            __DEFAULT ->
              case w_s8lX of ww_s8lQ { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lX [Occ=Once] :: Double)
                 (w_s8lY [Occ=Once] :: Integer) ->
                 case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
                 }}]
$s^_s8au
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8m8 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8m8
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8m4 lvl_s8ct
      of wild_a8e9 {
        __DEFAULT ->
          case $w$s^_s8m2
                 w_s8m3 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8m4)
          of ww_s8m1
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8m3 [Occ=Once] :: Double)
                 (w_s8m4 [Occ=Once] :: Integer) ->
                 case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
                 }}]
$s^^_s8ai
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of wild_a7Z0 [Dmd=<L,A>] {
        __DEFAULT -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 [Dmd=<S,H>] xs_a7Z4 [Dmd=<S,U>] ->
          case x_a7Z3 of ds1_a7YU [Dmd=<L,A>]
          { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc [Dmd=<L,A>] ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId]
lvl_s8cw = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pc :: [Char]
[LclId]
lvl_s8pc = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><S,U>]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of ds_a7Ul
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case go_s8bn f_a1UC of wild_a7QZ { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of ds_X7X6
      { (# ipv_X7Xa [Dmd=<S,U>], ipv1_X7Xc [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8ae :: Integer
          [LclId]
          duration_s8ae
            = case ipv1_X7Xc of wild_a8gw [Dmd=<L,A>]
              { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
              case ipv1_a7Uo of wild_X8jv [Dmd=<L,A>]
              { (ds1_X8jz [Dmd=<L,A>], y_X8jB [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Vn
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7X1
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7X5 ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId]
lvl_s8cz = lvl_s8cw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pd :: [Char]
[LclId]
lvl_s8pd = lvl_s8pc

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><S,U>]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of ds_a7Ul
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of ds1_a7YU [Dmd=<L,A>]
      { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX [Dmd=<L,A>] ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of ds_X7Xc
      { (# ipv_X7Xg [Dmd=<S,U>], ipv1_X7Xi [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8a8 :: Integer
          [LclId]
          duration_s8a8
            = case ipv1_X7Xi of wild_a8gw [Dmd=<L,A>]
              { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
              case ipv1_a7Uo of wild_X8jB [Dmd=<L,A>]
              { (ds1_X8jF [Dmd=<L,A>], y_X8jH [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Vn
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7X7
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xb ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId]
lvl_s8cC = lvl_s8cw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pe :: [Char]
[LclId]
lvl_s8pe = lvl_s8pc

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><S,U>]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of ds_a7Ul
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of ds1_a7YU [Dmd=<L,A>] { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of ds_X7Xe
      { (# ipv_X7Xi [Dmd=<S,U>], ipv1_X7Xk [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8a4 :: Integer
          [LclId]
          duration_s8a4
            = case ipv1_X7Xk of wild_a8gw [Dmd=<L,A>]
              { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
              case ipv1_a7Uo of wild_X8jD [Dmd=<L,A>]
              { (ds1_X8jH [Dmd=<L,A>], y_X8jJ [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Vn
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7X9
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xd ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId]
lvl_s8cF = lvl_s8cw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pf :: [Char]
[LclId]
lvl_s8pf = lvl_s8pc

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><S,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of ds_a7Ul
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of wild_a7QZ
      { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of ds_X7Xl
      { (# ipv_X7Xp [Dmd=<S,U>], ipv1_X7Xr [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8a0 :: Integer
          [LclId]
          duration_s8a0
            = case ipv1_X7Xr of wild_a8gw [Dmd=<L,A>]
              { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
              case ipv1_a7Uo of wild_X8jK [Dmd=<L,A>]
              { (ds1_X8jO [Dmd=<L,A>], y_X8jQ [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Vn
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7Xg
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xk ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7WY
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pg :: Integer
[LclId]
lvl_s8pg = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ph :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8ph = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pi :: [Char]
[LclId]
lvl_s8pi = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8ph

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8pg
      lvl_s8pi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pj :: Integer
[LclId]
lvl_s8pj = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pk :: Integer
[LclId]
lvl_s8pk = lvl_s8pg

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8pj lvl_s8pg

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pl :: Double
[LclId]
lvl_s8pl = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pm :: Integer
[LclId]
lvl_s8pm = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8m8 lvl_s8pl lvl_s8pm of ww_s8m7 { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pv = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pw :: [Char]
[LclId]
lvl_s8pw = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pt :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pt = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pu :: [Char]
[LclId]
lvl_s8pu = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pr :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pr = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8ps :: [Char]
[LclId]
lvl_s8ps = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pp :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pp = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pq :: [Char]
[LclId]
lvl_s8pq = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pn :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pn = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8po :: [Char]
[LclId]
lvl_s8po = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pn

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<S,U>]
main_s7Zj
  = \ (s_a7YK [Dmd=<S,U>]
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac lvl_s8po testStimes s_a7YK of ds1_a7YL
      { (# ipv_a7YN [Dmd=<S,U>], ipv1_a7YO [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pq testFractionalPower ipv_a7YN
      of ds1_X7Zb
      { (# ipv_X7Zf [Dmd=<S,U>], ipv1_X7Zh [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8ps testFractionalPower ipv_X7Zf
      of ds1_X7Zg
      { (# ipv_X7Zk [Dmd=<S,U>], ipv1_X7Zm [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pu testFractionalPower ipv_X7Zk
      of ds1_X7Zl
      { (# ipv_X7Zp [Dmd=<S,U>], ipv1_X7Zr [Dmd=<L,A>] #) ->
      $smeasure_s8a2 lvl_s8pw testIntegralPower ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s7Zj
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s89K = GHC.TopHandler.runMainIO1 @ () main

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s89K
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Liberate case ====================
2019-11-05 16:48:03.36455295 UTC

Result size of Liberate case
  = {terms: 577, types: 566, coercions: 77, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId]
lvl_s8ct = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pb :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pb = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId, Str=x]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pb)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId]
lvl_s8c9 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cd :: Integer
[LclId]
lvl_s8cd = lvl_s8cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cf :: Integer
[LclId]
lvl_s8cf = lvl_s8cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bX :: Integer
[LclId]
lvl_s8bX = lvl_s8c9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ch :: Integer
[LclId]
lvl_s8ch = lvl_s8cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bL :: Integer
[LclId]
lvl_s8bL = lvl_s8ct

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bJ :: Integer
[LclId]
lvl_s8bJ = lvl_s8ct

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bx :: Integer
[LclId]
lvl_s8bx = lvl_s8cb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8bz :: Integer
[LclId]
lvl_s8bz = lvl_s8ct

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8b3 [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
                        lvl_s8ct
                 of wild_a8dj [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
                 }}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
             lvl_s8ct
      of wild_a8dj [Dmd=<S,U>]
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8lM [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=3, Str=<S,U><S,U><S,U>]
$wg1_s8lM
  = \ (ww_s8lD :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lz :: Integer)
      (ww_s8lH :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lz lvl_s8cb)
             lvl_s8ct
      of wild_a8dj {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lz lvl_s8c9
          of wild_X8fJ {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH
          };
        1# ->
          $wg1_s8lM
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
            ww_s8lH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8lW [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U><S,U>]
$wf_s8lW
  = \ (ww_s8lR :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lO :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lO lvl_s8cb)
             lvl_s8ct
      of wild_a8dj {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lO lvl_s8c9
          of wild_X8fJ {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8m2 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^_s8m2
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8lY lvl_s8ct
      of wild_a8e0 {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lY lvl_s8ct
          of wild_a8dj {
            __DEFAULT ->
              case w_s8lX of ww_s8lQ { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lX [Occ=Once] :: Double)
                 (w_s8lY [Occ=Once] :: Integer) ->
                 case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
                 }}]
$s^_s8au
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8m8 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId, Arity=2, Str=<L,U(U)><S,U>]
$w$s^^_s8m8
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8m4 lvl_s8ct
      of wild_a8e9 {
        __DEFAULT ->
          case $w$s^_s8m2
                 w_s8m3 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8m4)
          of ww_s8m1
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8m3 [Occ=Once] :: Double)
                 (w_s8m4 [Occ=Once] :: Integer) ->
                 case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
                 }}]
$s^^_s8ai
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId, Arity=1, Str=<S,U>]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of wild_a7Z0 [Dmd=<L,A>] {
        __DEFAULT -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 [Dmd=<S,H>] xs_a7Z4 [Dmd=<S,U>] ->
          case x_a7Z3 of ds1_a7YU [Dmd=<L,A>]
          { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc [Dmd=<L,A>] ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId]
lvl_s8cw = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pc :: [Char]
[LclId]
lvl_s8pc = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><S,U>]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of ds_a7Ul
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case go_s8bn f_a1UC of wild_a7QZ { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of ds_X7X6
      { (# ipv_X7Xa [Dmd=<S,U>], ipv1_X7Xc [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8ae :: Integer
          [LclId]
          duration_s8ae
            = case ipv1_X7Xc of wild_a8gw [Dmd=<L,A>]
              { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
              case ipv1_a7Uo of wild_X8jv [Dmd=<L,A>]
              { (ds1_X8jz [Dmd=<L,A>], y_X8jB [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Vn
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7X1
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7X5 ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cx :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cx = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cy :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cy = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cz :: Integer
[LclId]
lvl_s8cz = lvl_s8cw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pd :: [Char]
[LclId]
lvl_s8pd = lvl_s8pc

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,H><S,U>]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of ds_a7Ul
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of ds1_a7YU [Dmd=<L,A>]
      { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX [Dmd=<L,A>] ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of ds_X7Xc
      { (# ipv_X7Xg [Dmd=<S,U>], ipv1_X7Xi [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8a8 :: Integer
          [LclId]
          duration_s8a8
            = case ipv1_X7Xi of wild_a8gw [Dmd=<L,A>]
              { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
              case ipv1_a7Uo of wild_X8jB [Dmd=<L,A>]
              { (ds1_X8jF [Dmd=<L,A>], y_X8jH [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Vn
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7X7
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xb ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cA = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cB = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cC :: Integer
[LclId]
lvl_s8cC = lvl_s8cw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pe :: [Char]
[LclId]
lvl_s8pe = lvl_s8pc

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=3, Str=<L,U><L,U><S,U>]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of ds_a7Ul
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of ds1_a7YU [Dmd=<L,A>] { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of ds_X7Xe
      { (# ipv_X7Xi [Dmd=<S,U>], ipv1_X7Xk [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8a4 :: Integer
          [LclId]
          duration_s8a4
            = case ipv1_X7Xk of wild_a8gw [Dmd=<L,A>]
              { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
              case ipv1_a7Uo of wild_X8jD [Dmd=<L,A>]
              { (ds1_X8jH [Dmd=<L,A>], y_X8jJ [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Vn
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7X9
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xd ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cD = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cE :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8cE = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cF :: Integer
[LclId]
lvl_s8cF = lvl_s8cw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pf :: [Char]
[LclId]
lvl_s8pf = lvl_s8pc

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><S,U>,
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of ds_a7Ul
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of wild_a7QZ
      { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of ds_X7Xl
      { (# ipv_X7Xp [Dmd=<S,U>], ipv1_X7Xr [Dmd=<L,U(A,U)>] #) ->
      ((let {
          duration_s8a0 :: Integer
          [LclId]
          duration_s8a0
            = case ipv1_X7Xr of wild_a8gw [Dmd=<L,A>]
              { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
              case ipv1_a7Uo of wild_X8jK [Dmd=<L,A>]
              { (ds1_X8jO [Dmd=<L,A>], y_X8jQ [Dmd=<S,U>]) ->
              integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
              }
              } } in
        GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of ww2_a7Vn
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of ww2_X7Xg
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xk ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7WY
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pg :: Integer
[LclId]
lvl_s8pg = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ph :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8ph = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pi :: [Char]
[LclId]
lvl_s8pi = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8ph

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8pg
      lvl_s8pi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pj :: Integer
[LclId]
lvl_s8pj = 3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pk :: Integer
[LclId]
lvl_s8pk = lvl_s8pg

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX]
testIntegralPower = GHC.Real.^_$s^ lvl_s8pj lvl_s8pg

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pl :: Double
[LclId]
lvl_s8pl = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pm :: Integer
[LclId]
lvl_s8pm = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX]
testFractionalPower
  = case $w$s^^_s8m8 lvl_s8pl lvl_s8pm of ww_s8m7 { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pv = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pw :: [Char]
[LclId]
lvl_s8pw = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pt :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pt = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pu :: [Char]
[LclId]
lvl_s8pu = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pr :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pr = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8ps :: [Char]
[LclId]
lvl_s8ps = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pp :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pp = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pq :: [Char]
[LclId]
lvl_s8pq = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pn :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
lvl_s8pn = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8po :: [Char]
[LclId]
lvl_s8po = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pn

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1, Str=<S,U>]
main_s7Zj
  = \ (s_a7YK [Dmd=<S,U>]
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac lvl_s8po testStimes s_a7YK of ds1_a7YL
      { (# ipv_a7YN [Dmd=<S,U>], ipv1_a7YO [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pq testFractionalPower ipv_a7YN
      of ds1_X7Zb
      { (# ipv_X7Zf [Dmd=<S,U>], ipv1_X7Zh [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8ps testFractionalPower ipv_X7Zf
      of ds1_X7Zg
      { (# ipv_X7Zk [Dmd=<S,U>], ipv1_X7Zm [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pu testFractionalPower ipv_X7Zk
      of ds1_X7Zl
      { (# ipv_X7Zp [Dmd=<S,U>], ipv1_X7Zr [Dmd=<L,A>] #) ->
      $smeasure_s8a2 lvl_s8pw testIntegralPower ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s7Zj
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s89K = GHC.TopHandler.runMainIO1 @ () main

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s89K
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier ====================
2019-11-05 16:48:03.397650706 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [post-liberate-case],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 535, types: 542, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pb :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8pb = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pb)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8b3 [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
                        lvl_s8ct
                 of wild_a8dj [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
                 }}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
             lvl_s8ct
      of wild_a8dj [Dmd=<S,U>]
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8lM [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8lM
  = \ (ww_s8lD :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lz :: Integer)
      (ww_s8lH :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lz lvl_s8cb)
             lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lz lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH
          };
        1# ->
          $wg1_s8lM
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
            ww_s8lH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8lW [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8lW
  = \ (ww_s8lR :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lO :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lO lvl_s8cb)
             lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lO lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8m2 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8m2
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8lY lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lY lvl_s8ct
          of {
            __DEFAULT ->
              case w_s8lX of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lX [Occ=Once] :: Double)
                 (w_s8lY [Occ=Once] :: Integer) ->
                 case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
                 }}]
$s^_s8au
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8m8 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8m8
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8m4 lvl_s8ct
      of {
        __DEFAULT ->
          case $w$s^_s8m2
                 w_s8m3 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8m4)
          of ww_s8m1
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8m3 [Occ=Once] :: Double)
                 (w_s8m4 [Occ=Once] :: Integer) ->
                 case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
                 }}]
$s^^_s8ai
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 [Dmd=<S,H>] xs_a7Z4 [Dmd=<S,U>] ->
          case x_a7Z3 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc [Dmd=<L,A>] ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pc :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pc = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa [Dmd=<S,U>], ipv1_X7Xc [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jz [Dmd=<L,A>], y_X8jB [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7X5 ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX [Dmd=<L,A>] ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg [Dmd=<S,U>], ipv1_X7Xi [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jF [Dmd=<L,A>], y_X8jH [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xb ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi [Dmd=<S,U>], ipv1_X7Xk [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jH [Dmd=<L,A>], y_X8jJ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xd ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp [Dmd=<S,U>], ipv1_X7Xr [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jO [Dmd=<L,A>], y_X8jQ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xk ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7WY
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pg :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pg = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ph :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8ph = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pi :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pi = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8ph

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8pg
      lvl_s8pi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pj :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pj = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = GHC.Real.^_$s^ lvl_s8pj lvl_s8pg

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pl :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8pl = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pm :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pm = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $w$s^^_s8m8 lvl_s8pl lvl_s8pm of ww_s8m7 { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8pv = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pw :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pw = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pt :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pt = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pu = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pr :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pr = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8ps :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8ps = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pp :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pp = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pq :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pq = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pn :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8pn = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8po :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8po = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pn

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s7Zj
  = \ (s_a7YK [Dmd=<S,U>]
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac lvl_s8po testStimes s_a7YK of
      { (# ipv_a7YN [Dmd=<S,U>], ipv1_a7YO [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pq testFractionalPower ipv_a7YN of
      { (# ipv_X7Zf [Dmd=<S,U>], ipv1_X7Zh [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8ps testFractionalPower ipv_X7Zf of
      { (# ipv_X7Zk [Dmd=<S,U>], ipv1_X7Zm [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pu testFractionalPower ipv_X7Zk of
      { (# ipv_X7Zp [Dmd=<S,U>], ipv1_X7Zr [Dmd=<L,A>] #) ->
      $smeasure_s8a2 lvl_s8pw testIntegralPower ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s7Zj
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s89K
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai


==================== Simplifier ====================
2019-11-05 16:48:03.456494477 UTC
  Max iterations = 4
  SimplMode {Phase = 0 [final],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 535, types: 542, coercions: 80, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ct :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8ct = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pb :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8pb = "Negative exponent"#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl_s8cl :: Double
[LclId,
 Str=x,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=NEVER}]
lvl_s8cl
  = errorWithoutStackTrace
      @ 'ghc-prim-0.5.3:GHC.Types.LiftedRep
      @ Double
      (ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pb)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cb :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cb = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8c9 :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8c9 = 1

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
$seven_s8b8 :: Integer -> Bool
[LclId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a8b3 [Occ=Once] :: Integer) ->
                 case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                        (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
                        lvl_s8ct
                 of wild_a8dj [Occ=Once]
                 { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
                 }}]
$seven_s8b8
  = \ (n_a8b3 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger n_a8b3 lvl_s8cb)
             lvl_s8ct
      of wild_a8dj [Dmd=<S,U>]
      { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Prim.tagToEnum# @ Bool wild_a8dj
      }

Rec {
-- RHS size: {terms: 38, types: 5, coercions: 0, joins: 0/0}
$wg1_s8lM [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.Double#
     -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=3,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 274 0}]
$wg1_s8lM
  = \ (ww_s8lD :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lz :: Integer)
      (ww_s8lH :: ghc-prim-0.5.3:GHC.Prim.Double#) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lz lvl_s8cb)
             lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lz lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH);
            1# -> ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lH
          };
        1# ->
          $wg1_s8lM
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lD ww_s8lD)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lz lvl_s8cb)
            ww_s8lH
      }
end Rec }

Rec {
-- RHS size: {terms: 32, types: 4, coercions: 0, joins: 0/0}
$wf_s8lW [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: ghc-prim-0.5.3:GHC.Prim.Double#
     -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 262 0}]
$wf_s8lW
  = \ (ww_s8lR :: ghc-prim-0.5.3:GHC.Prim.Double#)
      (w_s8lO :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
             (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger w_s8lO lvl_s8cb)
             lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lO lvl_s8c9
          of {
            __DEFAULT ->
              $wg1_s8lM
                (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
                (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
                ww_s8lR;
            1# -> ww_s8lR
          };
        1# ->
          $wf_s8lW
            (ghc-prim-0.5.3:GHC.Prim.*## ww_s8lR ww_s8lR)
            (integer-gmp-1.0.2.0:GHC.Integer.Type.quotInteger w_s8lO lvl_s8cb)
      }
end Rec }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
$w$s^_s8m2 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 0}]
$w$s^_s8m2
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
             w_s8lY lvl_s8ct
      of {
        __DEFAULT ->
          case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                 w_s8lY lvl_s8ct
          of {
            __DEFAULT ->
              case w_s8lX of { ghc-prim-0.5.3:GHC.Types.D# ww_s8lR ->
              $wf_s8lW ww_s8lR w_s8lY
              };
            1# -> 1.0##
          };
        1# -> case lvl_s8cl of wild_00 { }
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^_s8au [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8lX [Occ=Once] :: Double)
                 (w_s8lY [Occ=Once] :: Integer) ->
                 case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
                 }}]
$s^_s8au
  = \ (w_s8lX :: Double) (w_s8lY :: Integer) ->
      case $w$s^_s8m2 w_s8lX w_s8lY of ww_s8m1 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m1
      }

-- RHS size: {terms: 20, types: 4, coercions: 0, joins: 0/0}
$w$s^^_s8m8 [InlPrag=NOUSERINLINE[1]]
  :: Double -> Integer -> ghc-prim-0.5.3:GHC.Prim.Double#
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 141 0}]
$w$s^^_s8m8
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case integer-gmp-1.0.2.0:GHC.Integer.Type.geInteger#
             w_s8m4 lvl_s8ct
      of {
        __DEFAULT ->
          case $w$s^_s8m2
                 w_s8m3 (integer-gmp-1.0.2.0:GHC.Integer.Type.negateInteger w_s8m4)
          of ww_s8m1
          { __DEFAULT ->
          ghc-prim-0.5.3:GHC.Prim./## 1.0## ww_s8m1
          };
        1# -> $w$s^_s8m2 w_s8m3 w_s8m4
      }

-- RHS size: {terms: 9, types: 3, coercions: 0, joins: 0/0}
$s^^_s8ai [InlPrag=NOUSERINLINE[1]] :: Double -> Integer -> Double
[LclId,
 Arity=2,
 Str=<L,U(U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s8m3 [Occ=Once] :: Double)
                 (w_s8m4 [Occ=Once] :: Integer) ->
                 case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 [Occ=Once] { __DEFAULT ->
                 ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
                 }}]
$s^^_s8ai
  = \ (w_s8m3 :: Double) (w_s8m4 :: Integer) ->
      case $w$s^^_s8m8 w_s8m3 w_s8m4 of ww_s8m7 { __DEFAULT ->
      ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
      }

Rec {
-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
go_s8bn [Occ=LoopBreaker] :: [Char] -> ()
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 50 10}]
go_s8bn
  = \ (ds_a7YZ :: [Char]) ->
      case ds_a7YZ of {
        [] -> ghc-prim-0.5.3:GHC.Tuple.();
        : x_a7Z3 [Dmd=<S,H>] xs_a7Z4 [Dmd=<S,U>] ->
          case x_a7Z3 of
          { ghc-prim-0.5.3:GHC.Types.C# ipv_s7Zc [Dmd=<L,A>] ->
          go_s8bn xs_a7Z4
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TB :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TB = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TC :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TC = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TD :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s7TD = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s7TE :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s7TE = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s7TD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s7TC $trModule_s7TE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cu :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8cu = " milli seconds -- "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
lvl_s8cv = " pico seconds"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8cw :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8cw = 1000000000

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pc :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pc = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8cv

-- RHS size: {terms: 60, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8ac
  :: String
     -> String
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 500 0}]
$smeasure_s8ac
  = \ (description_a1UB :: String)
      (f_a1UC :: String)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case go_s8bn f_a1UC of { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xa [Dmd=<S,U>], ipv1_X7Xc [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8ae :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8ae
          = case ipv1_X7Xc of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jz [Dmd=<L,A>], y_X8jB [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jB
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8ae lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8ae (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7X5, ww4_X7X7 #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7X5 ww4_X7X7
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xa
      }
      }
      }

-- RHS size: {terms: 59, types: 73, coercions: 14, joins: 0/1}
$smeasure_s8a6
  :: String
     -> Double
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,H><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8a6
  = \ (description_a1UB :: String)
      (f_a1UC :: Double)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of
      { ghc-prim-0.5.3:GHC.Types.D# ipv_s8gX [Dmd=<L,A>] ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xg [Dmd=<S,U>], ipv1_X7Xi [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a8 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a8
          = case ipv1_X7Xi of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jF [Dmd=<L,A>], y_X8jH [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jH
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a8 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a8 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xb, ww4_X7Xd #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xb ww4_X7Xd
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xg
      }
      }
      }

-- RHS size: {terms: 59, types: 72, coercions: 14, joins: 0/1}
$smeasure_s8a2
  :: String
     -> Integer
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=3,
 Str=<L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 20 0] 480 0}]
$smeasure_s8a2
  = \ (description_a1UB :: String)
      (f_a1UC :: Integer)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case f_a1UC of { __DEFAULT ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xi [Dmd=<S,U>], ipv1_X7Xk [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a4 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a4
          = case ipv1_X7Xk of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jH [Dmd=<L,A>], y_X8jJ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jJ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a4 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a4 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xd, ww4_X7Xf #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xd ww4_X7Xf
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xi
      }
      }
      }

-- RHS size: {terms: 62, types: 76, coercions: 16, joins: 0/1}
measure_s7WY
  :: forall a.
     NFData a =>
     String
     -> a
     -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=4,
 Str=<L,C1(H)><L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0 0 0] 500 0},
 RULES: "SPEC measure @ String"
            forall ($dNFData_X8ap :: NFData String).
              measure_s7WY @ String $dNFData_X8ap
              = $smeasure_s8ac
        "SPEC measure @ Double"
            forall ($dNFData_s8a5 :: NFData Double).
              measure_s7WY @ Double $dNFData_s8a5
              = $smeasure_s8a6
        "SPEC measure @ Integer"
            forall ($dNFData_s8a1 :: NFData Integer).
              measure_s7WY @ Integer $dNFData_s8a1
              = $smeasure_s8a2]
measure_s7WY
  = \ (@ a_a5KA)
      ($dNFData_a5KC :: NFData a_a5KA)
      (description_a1UB :: String)
      (f_a1UC :: a_a5KA)
      (s_a7Ub
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             s_a7Ub
      of
      { (# ipv_a7Un [Dmd=<S,U>], ipv1_a7Uo [Dmd=<L,U(A,U)>] #) ->
      case ($dNFData_a5KC
            `cast` (Control.DeepSeq.N:NFData[0] <a_a5KA>_N
                    :: NFData a_a5KA ~R# (a_a5KA -> ())))
             f_a1UC
      of
      { () ->
      case base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime4
             @ ()
             (base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.getCPUTime2
              `cast` (<GHC.Ptr.Ptr
                         base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec>_R
                      ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                      :: (GHC.Ptr.Ptr
                            base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                          -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                          -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                  ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                () #))
                         ~R# (GHC.Ptr.Ptr
                                base-4.12.0.0:System.CPUTime.Posix.ClockGetTime.Timespec
                              -> IO ())))
             ipv_a7Un
      of
      { (# ipv_X7Xp [Dmd=<S,U>], ipv1_X7Xr [Dmd=<L,U(A,U)>] #) ->
      let {
        duration_s8a0 :: Integer
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
        duration_s8a0
          = case ipv1_X7Xr of { (ds1_a8gy [Dmd=<L,A>], y_a8gz [Dmd=<S,U>]) ->
            case ipv1_a7Uo of { (ds1_X8jO [Dmd=<L,A>], y_X8jQ [Dmd=<S,U>]) ->
            integer-gmp-1.0.2.0:GHC.Integer.Type.minusInteger y_a8gz y_X8jQ
            }
            } } in
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (ghc-prim-0.5.3:GHC.Types.:
             @ Char
             GHC.Show.$fShow(,)3
             (GHC.Show.showLitString
                (++
                   @ Char
                   description_a1UB
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           (integer-gmp-1.0.2.0:GHC.Integer.Type.divInteger
                              duration_s8a0 lvl_s8cw)
                           (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                    of
                    { (# ww3_a7Vp, ww4_a7Vq #) ->
                    GHC.Base.++_$s++
                      @ Char
                      (ghc-prim-0.5.3:GHC.CString.unpackAppendCString#
                         lvl_s8cu
                         (case GHC.Show.$w$cshowsPrec4
                                 0# duration_s8a0 (ghc-prim-0.5.3:GHC.Types.[] @ Char)
                          of
                          { (# ww3_X7Xk, ww4_X7Xm #) ->
                          GHC.Base.++_$s++ @ Char lvl_s8pc ww3_X7Xk ww4_X7Xm
                          }))
                      ww3_a7Vp
                      ww4_a7Vq
                    }))
                GHC.Show.$fShow[]1))
          ghc-prim-0.5.3:GHC.Types.True)
       `cast` (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (ghc-prim-0.5.3:GHC.Prim.State#
                         ghc-prim-0.5.3:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.5.3:GHC.Prim.State#
                               ghc-prim-0.5.3:GHC.Prim.RealWorld,
                             () #))))
        ipv_X7Xp
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
measure :: forall a. NFData a => String -> a -> IO ()
[LclIdX,
 Arity=4,
 Str=<L,1*C1(H)><L,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= measure_s7WY
               `cast` (forall (a :: <*>_N).
                       <NFData a>_R
                       ->_R <String>_R
                       ->_R <a>_R
                       ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           NFData a =>
                           String
                           -> a
                           -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# (forall a. NFData a => String -> a -> IO ()))}]
measure
  = measure_s7WY
    `cast` (forall (a :: <*>_N).
            <NFData a>_R
            ->_R <String>_R
            ->_R <a>_R
            ->_R Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                NFData a =>
                String
                -> a
                -> ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# (forall a. NFData a => String -> a -> IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pg :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pg = 1000000

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8ph :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8ph = "foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pi :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pi = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8ph

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
testStimes :: String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
testStimes
  = ghc-prim-0.5.3:GHC.Magic.noinline
      @ (forall b a. Integral b => b -> [a] -> [a])
      base-4.12.0.0:Data.Semigroup.Internal.stimesList
      @ Integer
      @ Char
      GHC.Real.$fIntegralInteger
      lvl_s8pg
      lvl_s8pi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pj :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pj = 3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
testIntegralPower :: Integer
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
testIntegralPower = GHC.Real.^_$s^ lvl_s8pj lvl_s8pg

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pl :: Double
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
lvl_s8pl = ghc-prim-0.5.3:GHC.Types.D# 5.0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pm :: Integer
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
lvl_s8pm = 441

-- RHS size: {terms: 7, types: 1, coercions: 0, joins: 0/0}
testFractionalPower :: Double
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
testFractionalPower
  = case $w$s^^_s8m8 lvl_s8pl lvl_s8pm of ww_s8m7 { __DEFAULT ->
    ghc-prim-0.5.3:GHC.Types.D# ww_s8m7
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pv :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
lvl_s8pv = "integral power : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pw :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pw = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pt :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pt = "fractional power 3 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pu :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pu = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pr :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pr = "fractional power 2 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8ps :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8ps = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pp :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
lvl_s8pp = "fractional power 1 : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8pq :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8pq = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_s8pn :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
lvl_s8pn = "stimes : "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_s8po :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_s8po = ghc-prim-0.5.3:GHC.CString.unpackCString# lvl_s8pn

-- RHS size: {terms: 29, types: 46, coercions: 0, joins: 0/0}
main_s7Zj
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0}]
main_s7Zj
  = \ (s_a7YK [Dmd=<S,U>]
         :: ghc-prim-0.5.3:GHC.Prim.State#
              ghc-prim-0.5.3:GHC.Prim.RealWorld) ->
      case $smeasure_s8ac lvl_s8po testStimes s_a7YK of
      { (# ipv_a7YN [Dmd=<S,U>], ipv1_a7YO [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pq testFractionalPower ipv_a7YN of
      { (# ipv_X7Zf [Dmd=<S,U>], ipv1_X7Zh [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8ps testFractionalPower ipv_X7Zf of
      { (# ipv_X7Zk [Dmd=<S,U>], ipv1_X7Zm [Dmd=<L,A>] #) ->
      case $smeasure_s8a6 lvl_s8pu testFractionalPower ipv_X7Zk of
      { (# ipv_X7Zp [Dmd=<S,U>], ipv1_X7Zr [Dmd=<L,A>] #) ->
      $smeasure_s8a2 lvl_s8pw testIntegralPower ipv_X7Zp
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s7Zj
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main
  = main_s7Zj
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main_s89K
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s89K
  = GHC.TopHandler.runMainIO1
      @ ()
      (main_s7Zj
       `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
               :: (ghc-prim-0.5.3:GHC.Prim.State#
                     ghc-prim-0.5.3:GHC.Prim.RealWorld
                   -> (# ghc-prim-0.5.3:GHC.Prim.State#
                           ghc-prim-0.5.3:GHC.Prim.RealWorld,
                         () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s89K
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s89K
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())


------ Local rules for imported ids --------
"SPEC/Main even @ Integer"
    forall ($dIntegral_s8b7 :: Integral Integer).
      even @ Integer $dIntegral_s8b7
      = $seven_s8b8
"SPEC/Main ^ @ Double @ Integer" [1]
    forall ($dIntegral_s8at :: Integral Integer)
           ($dNum_s8as :: Num Double).
      ^ @ Double @ Integer $dNum_s8as $dIntegral_s8at
      = $s^_s8au
"SPEC/Main ^^ @ Double @ Integer" [1]
    forall ($dIntegral_s8ah :: Integral Integer)
           ($dFractional_s8ag :: Fractional Double).
      ^^ @ Double @ Integer $dFractional_s8ag $dIntegral_s8ah
      = $s^^_s8ai

